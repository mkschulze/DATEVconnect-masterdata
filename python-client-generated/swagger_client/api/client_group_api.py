# coding: utf-8

"""
    Client Master Data

    In the documentation below, you will receive detailed functional and technical specifications on the API DATEVconnect for Master Data.  **General information on dealing with fields administered as historical** A number of fields in the  master data are administered as \"historical\". This means that the existing content is not overwritten when the field is updated, but that the existing value remains in place, with a new value added that is valid from a date entered by the user.  Specifically, the following fields are administered as historical:  *Ressource 'addressees'* - short_names, - surnames, - company_names, - legal_form_ids  *Subordinate object 'detail'* - considerations, - denominations, - federal_states_of_natural_person, - job_titles, - marital_statuses, - codes_of_classification_of_economic_activities_2008, - descriptions_of_classification_of_economic_activities_2008, - mad_codes_of_classification_of_economic_activities_2008, - codes_of_classification_of_economic_activities_2003, - descriptions_of_classification_of_economic_activities_2003, - mad_codes_of_classification_of_economic_activities_2003, - countries_of_head_office, - distributions_of_profit, - enterprise_purposes, - federal_states_mad_of_legal_person, - federal_states_of_legal_person, - fiscal_years, - kind_of_register_courts, - locations_of_head_office, - names_of_register_court, - registered_company_names, - registration_numbers, - three_lined_company_names_first_line, - three_lined_company_names_second_line, - three_lined_company_names_third_line, - two_lined_company_names_first_line, - two_lined_company_names_second_line  These fields are shown as arrays, with their elements exhibiting the following structure: - value, - valid_from  This structure makes it possible to generate periods that indicate the validity date of a particular value in a value range.  This is illustrated by the following examples:  \"job_titles\": [   {\"value\":\"Müller\"},   {\"value\":\"Bäcker\", \"valid_from\":\"1995-04-01T00:00:00.000\"},   {\"value\":\"Metzger\", \"valid_from\":\"2001-07-01T00:00:00.000\"} ] In this example, the profession \"Müller\" (\"miller\") was valid until 03/31/1995. \"Bäcker\" (\"baker\") was valid from 04/01/1995 to 06/30/2001. The value \"Metzger\" (\"butcher\") is valid starting 07/01/2001.  For all the historically administered fields listed above, there is an additional field that indicates the current value of the value range (the value that is valid today/as of the system time). The syntactic structure of the property name is as follows: current_<*Property name of the historically administered field in the singular*>.  In the example above, the property name is \"current_job_title\" with the value \"Metzger\" (\"current_job_title\": \"Metzger\").  When writing fields administered as historical, please note that both properties have to be entered to prevent content from being lost. This can once again be illustrated using the example above:  Starting on 01/01/2010, the person is no longer employed as a butcher (\"Metzger\"), but now works as a landlord (\"Wirt\") in the hospitality industry. In order to save this information in the master data, the request has to be as follows:  ...  \"job_titles\": [   {\"value\":\"Müller\"},   {\"value\":\"Bäcker\", \"valid_from\":\"1995-04-01T00:00:00.000\"},   {\"value\":\"Metzger\", \"valid_from\":\"2001-07-01T00:00:00.000\"},   {\"value\": \"Wirt\", \"valid_from\": \"2010-01-01T00:00:00.000\"} ],  \"current_job_title\": \"Wirt\",  ...  If the property \"current_job_title\" had not been entered, but only the property \"job_titles\", then the current value (\"landlord\" in this example) would have been overwritten by a NULL value, as there would have been no explicit entry for the current value.  If, however, only the property \"current_job_title\" had been entered (i.e. without entering the property \"job_titles\"), then all historical values would have been overwritten. The result would have been the sole value of \"landlord\" without any time period set.  In summary, it can be said that the content of the property \"current_job_title\" overwrites the content of the valid array element of the property \"job_titles\".   # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: schnittstellenberatung@datev.de
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ClientGroupApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def client_group_types_client_group_type_id_get(self, client_group_type_id, **kwargs):  # noqa: E501
        """Retrieve a specific client group type.  # noqa: E501

         Retrieving a specific client group type.<br> Only relevant if the package 'Eigenorganisation comfort' is installed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_group_types_client_group_type_id_get(client_group_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_group_type_id: The GUID of a client group type. (required)
        :param str select: Enter relevant attributes to which the results will then be limited.      
        :return: ClientGroupType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.client_group_types_client_group_type_id_get_with_http_info(client_group_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.client_group_types_client_group_type_id_get_with_http_info(client_group_type_id, **kwargs)  # noqa: E501
            return data

    def client_group_types_client_group_type_id_get_with_http_info(self, client_group_type_id, **kwargs):  # noqa: E501
        """Retrieve a specific client group type.  # noqa: E501

         Retrieving a specific client group type.<br> Only relevant if the package 'Eigenorganisation comfort' is installed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_group_types_client_group_type_id_get_with_http_info(client_group_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_group_type_id: The GUID of a client group type. (required)
        :param str select: Enter relevant attributes to which the results will then be limited.      
        :return: ClientGroupType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_group_type_id', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method client_group_types_client_group_type_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_group_type_id' is set
        if self.api_client.client_side_validation and ('client_group_type_id' not in params or
                                                       params['client_group_type_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `client_group_type_id` when calling `client_group_types_client_group_type_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_group_type_id' in params:
            path_params['client-group-type-id'] = params['client_group_type_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/client-group-types/{client-group-type-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClientGroupType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def client_group_types_client_group_type_id_put(self, client_group_type_id, client_group_type, **kwargs):  # noqa: E501
        """Update a spezific client group type.  # noqa: E501

        Only relevant if the package 'Eigenorganisation comfort' is installed.<br> Updating a spezific client group type.  The following property may not be changed: - id   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_group_types_client_group_type_id_put(client_group_type_id, client_group_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_group_type_id: The GUID of a client group type. (required)
        :param ClientGroupType client_group_type: Client group type object (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.client_group_types_client_group_type_id_put_with_http_info(client_group_type_id, client_group_type, **kwargs)  # noqa: E501
        else:
            (data) = self.client_group_types_client_group_type_id_put_with_http_info(client_group_type_id, client_group_type, **kwargs)  # noqa: E501
            return data

    def client_group_types_client_group_type_id_put_with_http_info(self, client_group_type_id, client_group_type, **kwargs):  # noqa: E501
        """Update a spezific client group type.  # noqa: E501

        Only relevant if the package 'Eigenorganisation comfort' is installed.<br> Updating a spezific client group type.  The following property may not be changed: - id   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_group_types_client_group_type_id_put_with_http_info(client_group_type_id, client_group_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_group_type_id: The GUID of a client group type. (required)
        :param ClientGroupType client_group_type: Client group type object (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_group_type_id', 'client_group_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method client_group_types_client_group_type_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_group_type_id' is set
        if self.api_client.client_side_validation and ('client_group_type_id' not in params or
                                                       params['client_group_type_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `client_group_type_id` when calling `client_group_types_client_group_type_id_put`")  # noqa: E501
        # verify the required parameter 'client_group_type' is set
        if self.api_client.client_side_validation and ('client_group_type' not in params or
                                                       params['client_group_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `client_group_type` when calling `client_group_types_client_group_type_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_group_type_id' in params:
            path_params['client-group-type-id'] = params['client_group_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'client_group_type' in params:
            body_params = params['client_group_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/client-group-types/{client-group-type-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def client_group_types_get(self, **kwargs):  # noqa: E501
        """Retrieve a list of client group types.  # noqa: E501

         Only relevant if the package 'Eigenorganisation comfort' is installed.  **Filter** Unless further parameters are entered, the list will contain all client group types.<br><br>  **Filter Options**  The number of results can be limited by using the following filters: - short_name - name - timestamp <br>  **Operators** <br>  *Filter Option: name, short_name*  | Operator                       | Description                                                    | |--------------------------------|----------------------------------------------------------------| | eq                             | Equal                                                          | | contains(property, substring)  | Search for Substring in property's value                       | | startswith(property, substring)| Search for Substring at the beginning of the property's value  | <br>  *Filter Option: timestamp*  | Operator          | Description                                     | |-------------------|-------------------------------------------------| | eq                | Equal                                           | | gt                | Greater than                                    | | ge                | Greater than or equal                           | | lt                | Less than                                       | | le                | Less than or equal                              | <br>   **Filter Combinations**  Filters can be combined using the operator \"and\".<br><br>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_group_types_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str select: Enter relevant attributes to which the results will then be limited.      
        :param str filter: Entering a filter expression influences the number of results. 
        :return: list[ClientGroupType]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.client_group_types_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.client_group_types_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def client_group_types_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve a list of client group types.  # noqa: E501

         Only relevant if the package 'Eigenorganisation comfort' is installed.  **Filter** Unless further parameters are entered, the list will contain all client group types.<br><br>  **Filter Options**  The number of results can be limited by using the following filters: - short_name - name - timestamp <br>  **Operators** <br>  *Filter Option: name, short_name*  | Operator                       | Description                                                    | |--------------------------------|----------------------------------------------------------------| | eq                             | Equal                                                          | | contains(property, substring)  | Search for Substring in property's value                       | | startswith(property, substring)| Search for Substring at the beginning of the property's value  | <br>  *Filter Option: timestamp*  | Operator          | Description                                     | |-------------------|-------------------------------------------------| | eq                | Equal                                           | | gt                | Greater than                                    | | ge                | Greater than or equal                           | | lt                | Less than                                       | | le                | Less than or equal                              | <br>   **Filter Combinations**  Filters can be combined using the operator \"and\".<br><br>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_group_types_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str select: Enter relevant attributes to which the results will then be limited.      
        :param str filter: Entering a filter expression influences the number of results. 
        :return: list[ClientGroupType]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['select', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method client_group_types_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/client-group-types', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ClientGroupType]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def client_group_types_post(self, new_client_group, **kwargs):  # noqa: E501
        """Creating a new client group type.  # noqa: E501

         Only relevant if the package 'Eigenorganisation comfort' is installed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_group_types_post(new_client_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClientGroupType new_client_group: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.client_group_types_post_with_http_info(new_client_group, **kwargs)  # noqa: E501
        else:
            (data) = self.client_group_types_post_with_http_info(new_client_group, **kwargs)  # noqa: E501
            return data

    def client_group_types_post_with_http_info(self, new_client_group, **kwargs):  # noqa: E501
        """Creating a new client group type.  # noqa: E501

         Only relevant if the package 'Eigenorganisation comfort' is installed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_group_types_post_with_http_info(new_client_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClientGroupType new_client_group: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['new_client_group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method client_group_types_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'new_client_group' is set
        if self.api_client.client_side_validation and ('new_client_group' not in params or
                                                       params['new_client_group'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `new_client_group` when calling `client_group_types_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'new_client_group' in params:
            body_params = params['new_client_group']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/client-group-types', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def client_groups_get(self, **kwargs):  # noqa: E501
        """Retrieve a list of client group assignments.  # noqa: E501

         Only relevant if the package 'Eigenorganisation comfort' is installed.<br>  **Filter** Unless further parameters are entered, the list will contain the client group assignments for active and inactive clients.<br><br>  **Filter Options**  The number of results can be limited by using the following filters: - client_group_type_id - client_group_type_short_name - client_id - client_name - client_number - client_status - timestamp <br>  **Operators** <br>  *Filter Option: client_number, timestamp*  | Operator          | Description                                     | |-------------------|-------------------------------------------------| | eq                | Equal                                           | | gt                | Greater than                                    | | ge                | Greater than or equal                           | | lt                | Less than                                       | | le                | Less than or equal                              | <br>   *Filter Option: client_group_type_short_name, client_name*  | Operator                       | Description                                                    | |--------------------------------|----------------------------------------------------------------| | eq                             | Equal                                                          | | contains(property, substring)  | Search for Substring in property's value                       | | startswith(property, substring)| Search for Substring at the beginning of the property's value  | <br>   *Filter Option: client_id, client_status, client_group_type_id*  | Operator                       | Description                                                    | |--------------------------------|----------------------------------------------------------------| | eq                             | Equal                                                          | <br>  **Filter Combinations**  Filters can be combined using the operator \"and\".<br><br>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_groups_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str select: Enter relevant attributes to which the results will then be limited.      
        :param str filter: Entering a filter expression influences the number of results. 
        :return: list[ClientGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.client_groups_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.client_groups_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def client_groups_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve a list of client group assignments.  # noqa: E501

         Only relevant if the package 'Eigenorganisation comfort' is installed.<br>  **Filter** Unless further parameters are entered, the list will contain the client group assignments for active and inactive clients.<br><br>  **Filter Options**  The number of results can be limited by using the following filters: - client_group_type_id - client_group_type_short_name - client_id - client_name - client_number - client_status - timestamp <br>  **Operators** <br>  *Filter Option: client_number, timestamp*  | Operator          | Description                                     | |-------------------|-------------------------------------------------| | eq                | Equal                                           | | gt                | Greater than                                    | | ge                | Greater than or equal                           | | lt                | Less than                                       | | le                | Less than or equal                              | <br>   *Filter Option: client_group_type_short_name, client_name*  | Operator                       | Description                                                    | |--------------------------------|----------------------------------------------------------------| | eq                             | Equal                                                          | | contains(property, substring)  | Search for Substring in property's value                       | | startswith(property, substring)| Search for Substring at the beginning of the property's value  | <br>   *Filter Option: client_id, client_status, client_group_type_id*  | Operator                       | Description                                                    | |--------------------------------|----------------------------------------------------------------| | eq                             | Equal                                                          | <br>  **Filter Combinations**  Filters can be combined using the operator \"and\".<br><br>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_groups_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str select: Enter relevant attributes to which the results will then be limited.      
        :param str filter: Entering a filter expression influences the number of results. 
        :return: list[ClientGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['select', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method client_groups_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/client-groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ClientGroup]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clients_client_id_client_groups_get(self, client_id, **kwargs):  # noqa: E501
        """Retrieve the client group assignment for a specific client.  # noqa: E501

         Retrieving the client group assignment for a specific client.<br> Only relevant if the package 'Eigenorganisation comfort' is installed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clients_client_id_client_groups_get(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: The GUID of a client. (required)
        :param str select: Enter relevant attributes to which the results will then be limited.      
        :return: list[ClientGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clients_client_id_client_groups_get_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.clients_client_id_client_groups_get_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def clients_client_id_client_groups_get_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """Retrieve the client group assignment for a specific client.  # noqa: E501

         Retrieving the client group assignment for a specific client.<br> Only relevant if the package 'Eigenorganisation comfort' is installed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clients_client_id_client_groups_get_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: The GUID of a client. (required)
        :param str select: Enter relevant attributes to which the results will then be limited.      
        :return: list[ClientGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clients_client_id_client_groups_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if self.api_client.client_side_validation and ('client_id' not in params or
                                                       params['client_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `client_id` when calling `clients_client_id_client_groups_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['client-id'] = params['client_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/clients/{client-id}/client-groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ClientGroup]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clients_client_id_client_groups_put(self, client_id, client_category, **kwargs):  # noqa: E501
        """Update the client group assignment for a specific client.  # noqa: E501

         Only relevant if the package 'Eigenorganisation comfort' is installed.<br>   Updating the client group assignment for a specific client.<br><br>  The following property may not be changed: - client_id  If you would create a client group assignment, which was not yet defined for the client, you must create a new GUID for the property 'id'.<br><br>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clients_client_id_client_groups_put(client_id, client_category, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: The GUID of a client. (required)
        :param list[ClientGroup] client_category: Client group object (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clients_client_id_client_groups_put_with_http_info(client_id, client_category, **kwargs)  # noqa: E501
        else:
            (data) = self.clients_client_id_client_groups_put_with_http_info(client_id, client_category, **kwargs)  # noqa: E501
            return data

    def clients_client_id_client_groups_put_with_http_info(self, client_id, client_category, **kwargs):  # noqa: E501
        """Update the client group assignment for a specific client.  # noqa: E501

         Only relevant if the package 'Eigenorganisation comfort' is installed.<br>   Updating the client group assignment for a specific client.<br><br>  The following property may not be changed: - client_id  If you would create a client group assignment, which was not yet defined for the client, you must create a new GUID for the property 'id'.<br><br>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clients_client_id_client_groups_put_with_http_info(client_id, client_category, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: The GUID of a client. (required)
        :param list[ClientGroup] client_category: Client group object (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'client_category']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clients_client_id_client_groups_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if self.api_client.client_side_validation and ('client_id' not in params or
                                                       params['client_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `client_id` when calling `clients_client_id_client_groups_put`")  # noqa: E501
        # verify the required parameter 'client_category' is set
        if self.api_client.client_side_validation and ('client_category' not in params or
                                                       params['client_category'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `client_category` when calling `clients_client_id_client_groups_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['client-id'] = params['client_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'client_category' in params:
            body_params = params['client_category']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/clients/{client-id}/client-groups', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
