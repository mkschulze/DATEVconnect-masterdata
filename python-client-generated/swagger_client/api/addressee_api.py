# coding: utf-8

"""
    Client Master Data

    In the documentation below, you will receive detailed functional and technical specifications on the API DATEVconnect for Master Data.  **General information on dealing with fields administered as historical** A number of fields in the  master data are administered as \"historical\". This means that the existing content is not overwritten when the field is updated, but that the existing value remains in place, with a new value added that is valid from a date entered by the user.  Specifically, the following fields are administered as historical:  *Ressource 'addressees'* - short_names, - surnames, - company_names, - legal_form_ids  *Subordinate object 'detail'* - considerations, - denominations, - federal_states_of_natural_person, - job_titles, - marital_statuses, - codes_of_classification_of_economic_activities_2008, - descriptions_of_classification_of_economic_activities_2008, - mad_codes_of_classification_of_economic_activities_2008, - codes_of_classification_of_economic_activities_2003, - descriptions_of_classification_of_economic_activities_2003, - mad_codes_of_classification_of_economic_activities_2003, - countries_of_head_office, - distributions_of_profit, - enterprise_purposes, - federal_states_mad_of_legal_person, - federal_states_of_legal_person, - fiscal_years, - kind_of_register_courts, - locations_of_head_office, - names_of_register_court, - registered_company_names, - registration_numbers, - three_lined_company_names_first_line, - three_lined_company_names_second_line, - three_lined_company_names_third_line, - two_lined_company_names_first_line, - two_lined_company_names_second_line  These fields are shown as arrays, with their elements exhibiting the following structure: - value, - valid_from  This structure makes it possible to generate periods that indicate the validity date of a particular value in a value range.  This is illustrated by the following examples:  \"job_titles\": [   {\"value\":\"Müller\"},   {\"value\":\"Bäcker\", \"valid_from\":\"1995-04-01T00:00:00.000\"},   {\"value\":\"Metzger\", \"valid_from\":\"2001-07-01T00:00:00.000\"} ] In this example, the profession \"Müller\" (\"miller\") was valid until 03/31/1995. \"Bäcker\" (\"baker\") was valid from 04/01/1995 to 06/30/2001. The value \"Metzger\" (\"butcher\") is valid starting 07/01/2001.  For all the historically administered fields listed above, there is an additional field that indicates the current value of the value range (the value that is valid today/as of the system time). The syntactic structure of the property name is as follows: current_<*Property name of the historically administered field in the singular*>.  In the example above, the property name is \"current_job_title\" with the value \"Metzger\" (\"current_job_title\": \"Metzger\").  When writing fields administered as historical, please note that both properties have to be entered to prevent content from being lost. This can once again be illustrated using the example above:  Starting on 01/01/2010, the person is no longer employed as a butcher (\"Metzger\"), but now works as a landlord (\"Wirt\") in the hospitality industry. In order to save this information in the master data, the request has to be as follows:  ...  \"job_titles\": [   {\"value\":\"Müller\"},   {\"value\":\"Bäcker\", \"valid_from\":\"1995-04-01T00:00:00.000\"},   {\"value\":\"Metzger\", \"valid_from\":\"2001-07-01T00:00:00.000\"},   {\"value\": \"Wirt\", \"valid_from\": \"2010-01-01T00:00:00.000\"} ],  \"current_job_title\": \"Wirt\",  ...  If the property \"current_job_title\" had not been entered, but only the property \"job_titles\", then the current value (\"landlord\" in this example) would have been overwritten by a NULL value, as there would have been no explicit entry for the current value.  If, however, only the property \"current_job_title\" had been entered (i.e. without entering the property \"job_titles\"), then all historical values would have been overwritten. The result would have been the sole value of \"landlord\" without any time period set.  In summary, it can be said that the content of the property \"current_job_title\" overwrites the content of the valid array element of the property \"job_titles\".   # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: schnittstellenberatung@datev.de
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AddresseeApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def addressees_addressee_id_get(self, addressee_id, **kwargs):  # noqa: E501
        """Retrieve an addressee.  # noqa: E501

         **Retrieving an addressee with subordinate objects**  By including the parameter expand=* in the URI, the full scope of the addressee object will be requested. If, instead of the asterisk (*), the property name of the subordinate object is entered, the addressee object will be requested with the stated subordinate object (e.g. \"expand=detail, addresses\" retrieves the addressee object along with the addressee details and addresses).<br> In the standard case, without the expand parameter, the addressee object will be requested without subordinate objects (addressee details, addresses, communication details, bank_accounts and tax_offices).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addressees_addressee_id_get(addressee_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str addressee_id: The GUID of an addressee. (required)
        :param str select: Enter relevant attributes to which the results will then be limited.      
        :param str expand: A parameter that makes it possible to read a resource along with all subordinate objects.  If an asterisk (*) is entered, all subordinate objects will be loaded with the resource. 
        :return: Addressee
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addressees_addressee_id_get_with_http_info(addressee_id, **kwargs)  # noqa: E501
        else:
            (data) = self.addressees_addressee_id_get_with_http_info(addressee_id, **kwargs)  # noqa: E501
            return data

    def addressees_addressee_id_get_with_http_info(self, addressee_id, **kwargs):  # noqa: E501
        """Retrieve an addressee.  # noqa: E501

         **Retrieving an addressee with subordinate objects**  By including the parameter expand=* in the URI, the full scope of the addressee object will be requested. If, instead of the asterisk (*), the property name of the subordinate object is entered, the addressee object will be requested with the stated subordinate object (e.g. \"expand=detail, addresses\" retrieves the addressee object along with the addressee details and addresses).<br> In the standard case, without the expand parameter, the addressee object will be requested without subordinate objects (addressee details, addresses, communication details, bank_accounts and tax_offices).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addressees_addressee_id_get_with_http_info(addressee_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str addressee_id: The GUID of an addressee. (required)
        :param str select: Enter relevant attributes to which the results will then be limited.      
        :param str expand: A parameter that makes it possible to read a resource along with all subordinate objects.  If an asterisk (*) is entered, all subordinate objects will be loaded with the resource. 
        :return: Addressee
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['addressee_id', 'select', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressees_addressee_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'addressee_id' is set
        if self.api_client.client_side_validation and ('addressee_id' not in params or
                                                       params['addressee_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `addressee_id` when calling `addressees_addressee_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'addressee_id' in params:
            path_params['addressee-id'] = params['addressee_id']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/addressees/{addressee-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Addressee',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addressees_addressee_id_put(self, addressee_id, addressee, **kwargs):  # noqa: E501
        """Update a specific addressee.  # noqa: E501

        With the PUT command, the addressee will be completely overwritten (addressee incl. subordinate objects).<br> We therefore recommend that you perform a request, with the parameter expand=*, of the addressee being updated beforehand in order to prevent master data from being overwritten.<br> The following properties may not be changed: - id - type   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addressees_addressee_id_put(addressee_id, addressee, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str addressee_id: The GUID of an addressee. (required)
        :param Addressee addressee: Addressee object (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addressees_addressee_id_put_with_http_info(addressee_id, addressee, **kwargs)  # noqa: E501
        else:
            (data) = self.addressees_addressee_id_put_with_http_info(addressee_id, addressee, **kwargs)  # noqa: E501
            return data

    def addressees_addressee_id_put_with_http_info(self, addressee_id, addressee, **kwargs):  # noqa: E501
        """Update a specific addressee.  # noqa: E501

        With the PUT command, the addressee will be completely overwritten (addressee incl. subordinate objects).<br> We therefore recommend that you perform a request, with the parameter expand=*, of the addressee being updated beforehand in order to prevent master data from being overwritten.<br> The following properties may not be changed: - id - type   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addressees_addressee_id_put_with_http_info(addressee_id, addressee, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str addressee_id: The GUID of an addressee. (required)
        :param Addressee addressee: Addressee object (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['addressee_id', 'addressee']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressees_addressee_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'addressee_id' is set
        if self.api_client.client_side_validation and ('addressee_id' not in params or
                                                       params['addressee_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `addressee_id` when calling `addressees_addressee_id_put`")  # noqa: E501
        # verify the required parameter 'addressee' is set
        if self.api_client.client_side_validation and ('addressee' not in params or
                                                       params['addressee'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `addressee` when calling `addressees_addressee_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'addressee_id' in params:
            path_params['addressee-id'] = params['addressee_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'addressee' in params:
            body_params = params['addressee']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/addressees/{addressee-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addressees_deletion_log_get(self, **kwargs):  # noqa: E501
        """Retrieve a list of deleted addressees.  # noqa: E501

        **Filter** Unless a filter is entered, the list will contain all deleted addressees. The \"timestamp\" filter option can be used to limit the results to a specific time period.<br><br>  **Filter Options**  The number of results can be limited by using the following filters: - id - timestamp <br>  **Operators** <br>  *Filter Option: timestamp*  | Operator          | Description           | |-------------------|-----------------------| | eq                | Equal                 | | gt                | Greater than          | | ge                | Greater than or equal | | lt                | Less than             | | le                | Less than or equal    |  <br>  *Filter Option: id*  | Operator          | Description           | |-------------------|-----------------------| | eq                | Equal                 |  <br>  **Filter Combinations**  Filters can be combined using the operator \"and\".<br><br>  **URI Examples**  *Retrieving deleted addressees who were deleted after 03/31/2018.*      .../addressees/deletion-log?filter=timestamp gt 2018-03-31T00:00:00.000<br><br>              # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addressees_deletion_log_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str select: Enter relevant attributes to which the results will then be limited.      
        :param str filter: Entering a filter expression influences the number of results. 
        :return: list[DeletionLog]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addressees_deletion_log_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.addressees_deletion_log_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def addressees_deletion_log_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve a list of deleted addressees.  # noqa: E501

        **Filter** Unless a filter is entered, the list will contain all deleted addressees. The \"timestamp\" filter option can be used to limit the results to a specific time period.<br><br>  **Filter Options**  The number of results can be limited by using the following filters: - id - timestamp <br>  **Operators** <br>  *Filter Option: timestamp*  | Operator          | Description           | |-------------------|-----------------------| | eq                | Equal                 | | gt                | Greater than          | | ge                | Greater than or equal | | lt                | Less than             | | le                | Less than or equal    |  <br>  *Filter Option: id*  | Operator          | Description           | |-------------------|-----------------------| | eq                | Equal                 |  <br>  **Filter Combinations**  Filters can be combined using the operator \"and\".<br><br>  **URI Examples**  *Retrieving deleted addressees who were deleted after 03/31/2018.*      .../addressees/deletion-log?filter=timestamp gt 2018-03-31T00:00:00.000<br><br>              # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addressees_deletion_log_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str select: Enter relevant attributes to which the results will then be limited.      
        :param str filter: Entering a filter expression influences the number of results. 
        :return: list[DeletionLog]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['select', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressees_deletion_log_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/addressees/deletion-log', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DeletionLog]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addressees_get(self, **kwargs):  # noqa: E501
        """Retrieve a list of addressees.  # noqa: E501

         **Filter**  Unless further parameters are entered, the list will contain both active and inactive addressees.<br><br>  **Filter Options**  The number of results can be limited by using the following filters: - current_short_name - surrogate_name         - current_company_name - current_surname - date_of_birth - date_of_foundation - firstname - eu_vat_id_country_code - eu_vat_id_number - sex - etin - tax_identification_number - current_legal_form_id - status - timestamp - type <br>  **Operators** <br> *Filter Option: timestamp*  | Operator          | Description             | |-------------------|-------------------------| | eq                | Equal                   | | gt                | Greater than            | | ge                | Greater than or equal   | | lt                | Less than               | | le                | Less than or equal      | <br>   *Filter Option: current_short_name, surrogate_name, current_company_name, current_surname, firstname, eu_vat_id_number, etin, tax_identification_number*  | Operator                       | Description                                                    | |--------------------------------|----------------------------------------------------------------| | eq                             | Equal                                                          | | contains(property, substring)  | Search for Substring in property's value                       | | startswith(property, substring)| Search for Substring at the beginning of the property's value  | <br>  *Filter Option:* date_of_birth, date_of_foundation, eu_vat_id_country_code, sex, current_legal_form_id, status, type  | Operator                       | Description  | |--------------------------------|--------------| | eq                             | Equal        | <br>  **Filter Combinations**  Filters can be combined using the operator \"and\".<br><br>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addressees_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str select: Enter relevant attributes to which the results will then be limited.      
        :param str filter: Entering a filter expression influences the number of results. 
        :return: list[Addressee]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addressees_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.addressees_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def addressees_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve a list of addressees.  # noqa: E501

         **Filter**  Unless further parameters are entered, the list will contain both active and inactive addressees.<br><br>  **Filter Options**  The number of results can be limited by using the following filters: - current_short_name - surrogate_name         - current_company_name - current_surname - date_of_birth - date_of_foundation - firstname - eu_vat_id_country_code - eu_vat_id_number - sex - etin - tax_identification_number - current_legal_form_id - status - timestamp - type <br>  **Operators** <br> *Filter Option: timestamp*  | Operator          | Description             | |-------------------|-------------------------| | eq                | Equal                   | | gt                | Greater than            | | ge                | Greater than or equal   | | lt                | Less than               | | le                | Less than or equal      | <br>   *Filter Option: current_short_name, surrogate_name, current_company_name, current_surname, firstname, eu_vat_id_number, etin, tax_identification_number*  | Operator                       | Description                                                    | |--------------------------------|----------------------------------------------------------------| | eq                             | Equal                                                          | | contains(property, substring)  | Search for Substring in property's value                       | | startswith(property, substring)| Search for Substring at the beginning of the property's value  | <br>  *Filter Option:* date_of_birth, date_of_foundation, eu_vat_id_country_code, sex, current_legal_form_id, status, type  | Operator                       | Description  | |--------------------------------|--------------| | eq                             | Equal        | <br>  **Filter Combinations**  Filters can be combined using the operator \"and\".<br><br>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addressees_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str select: Enter relevant attributes to which the results will then be limited.      
        :param str filter: Entering a filter expression influences the number of results. 
        :return: list[Addressee]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['select', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressees_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/addressees', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Addressee]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addressees_post(self, new_addressee, **kwargs):  # noqa: E501
        """Create a new addressee.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addressees_post(new_addressee, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Addressee new_addressee: (required)
        :param str national_right: This parameter serves a dual purpose:<br><br> **A: Ressource 'legal-forms'**<br> Parameter that controls the display of company legal forms depending on national law.<br><br>If 'national-right=german' is entered, then all company legal forms will be listed that are relevant to addressees subject to German law.<br>If 'national-right=austrian' is entered, then all company legal forms will be listed that are relevant to addressees subject to Austrian law.<br><br> **B: Ressource 'addressees'**<br> Parameter defines the national law that will be saved with the addressee. If the parameter is not entered, the national law that corresponds to the product installed will be entered as the default option:<br><br>If the package 'DATEV Basis für Österreich' is installed, then \"Austrian\" will be set as the applicable national law for the addressee.<br>If the package 'DATEV Basis' is installed, then \"German\" will be set as the applicable national law for the addressee. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addressees_post_with_http_info(new_addressee, **kwargs)  # noqa: E501
        else:
            (data) = self.addressees_post_with_http_info(new_addressee, **kwargs)  # noqa: E501
            return data

    def addressees_post_with_http_info(self, new_addressee, **kwargs):  # noqa: E501
        """Create a new addressee.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addressees_post_with_http_info(new_addressee, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Addressee new_addressee: (required)
        :param str national_right: This parameter serves a dual purpose:<br><br> **A: Ressource 'legal-forms'**<br> Parameter that controls the display of company legal forms depending on national law.<br><br>If 'national-right=german' is entered, then all company legal forms will be listed that are relevant to addressees subject to German law.<br>If 'national-right=austrian' is entered, then all company legal forms will be listed that are relevant to addressees subject to Austrian law.<br><br> **B: Ressource 'addressees'**<br> Parameter defines the national law that will be saved with the addressee. If the parameter is not entered, the national law that corresponds to the product installed will be entered as the default option:<br><br>If the package 'DATEV Basis für Österreich' is installed, then \"Austrian\" will be set as the applicable national law for the addressee.<br>If the package 'DATEV Basis' is installed, then \"German\" will be set as the applicable national law for the addressee. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['new_addressee', 'national_right']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressees_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'new_addressee' is set
        if self.api_client.client_side_validation and ('new_addressee' not in params or
                                                       params['new_addressee'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `new_addressee` when calling `addressees_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'national_right' in params:
            query_params.append(('national-right', params['national_right']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'new_addressee' in params:
            body_params = params['new_addressee']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/addressees', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
