# coding: utf-8

"""
    Client Master Data

    In the documentation below, you will receive detailed functional and technical specifications on the API DATEVconnect for Master Data.  **General information on dealing with fields administered as historical** A number of fields in the  master data are administered as \"historical\". This means that the existing content is not overwritten when the field is updated, but that the existing value remains in place, with a new value added that is valid from a date entered by the user.  Specifically, the following fields are administered as historical:  *Ressource 'addressees'* - short_names, - surnames, - company_names, - legal_form_ids  *Subordinate object 'detail'* - considerations, - denominations, - federal_states_of_natural_person, - job_titles, - marital_statuses, - codes_of_classification_of_economic_activities_2008, - descriptions_of_classification_of_economic_activities_2008, - mad_codes_of_classification_of_economic_activities_2008, - codes_of_classification_of_economic_activities_2003, - descriptions_of_classification_of_economic_activities_2003, - mad_codes_of_classification_of_economic_activities_2003, - countries_of_head_office, - distributions_of_profit, - enterprise_purposes, - federal_states_mad_of_legal_person, - federal_states_of_legal_person, - fiscal_years, - kind_of_register_courts, - locations_of_head_office, - names_of_register_court, - registered_company_names, - registration_numbers, - three_lined_company_names_first_line, - three_lined_company_names_second_line, - three_lined_company_names_third_line, - two_lined_company_names_first_line, - two_lined_company_names_second_line  These fields are shown as arrays, with their elements exhibiting the following structure: - value, - valid_from  This structure makes it possible to generate periods that indicate the validity date of a particular value in a value range.  This is illustrated by the following examples:  \"job_titles\": [   {\"value\":\"Müller\"},   {\"value\":\"Bäcker\", \"valid_from\":\"1995-04-01T00:00:00.000\"},   {\"value\":\"Metzger\", \"valid_from\":\"2001-07-01T00:00:00.000\"} ] In this example, the profession \"Müller\" (\"miller\") was valid until 03/31/1995. \"Bäcker\" (\"baker\") was valid from 04/01/1995 to 06/30/2001. The value \"Metzger\" (\"butcher\") is valid starting 07/01/2001.  For all the historically administered fields listed above, there is an additional field that indicates the current value of the value range (the value that is valid today/as of the system time). The syntactic structure of the property name is as follows: current_<*Property name of the historically administered field in the singular*>.  In the example above, the property name is \"current_job_title\" with the value \"Metzger\" (\"current_job_title\": \"Metzger\").  When writing fields administered as historical, please note that both properties have to be entered to prevent content from being lost. This can once again be illustrated using the example above:  Starting on 01/01/2010, the person is no longer employed as a butcher (\"Metzger\"), but now works as a landlord (\"Wirt\") in the hospitality industry. In order to save this information in the master data, the request has to be as follows:  ...  \"job_titles\": [   {\"value\":\"Müller\"},   {\"value\":\"Bäcker\", \"valid_from\":\"1995-04-01T00:00:00.000\"},   {\"value\":\"Metzger\", \"valid_from\":\"2001-07-01T00:00:00.000\"},   {\"value\": \"Wirt\", \"valid_from\": \"2010-01-01T00:00:00.000\"} ],  \"current_job_title\": \"Wirt\",  ...  If the property \"current_job_title\" had not been entered, but only the property \"job_titles\", then the current value (\"landlord\" in this example) would have been overwritten by a NULL value, as there would have been no explicit entry for the current value.  If, however, only the property \"current_job_title\" had been entered (i.e. without entering the property \"job_titles\"), then all historical values would have been overwritten. The result would have been the sole value of \"landlord\" without any time period set.  In summary, it can be said that the content of the property \"current_job_title\" overwrites the content of the valid array element of the property \"job_titles\".   # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: schnittstellenberatung@datev.de
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class LegalForm(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'display_name': 'str',
        'short_name': 'str',
        'long_name': 'str',
        'nation': 'str',
        'type': 'int'
    }

    attribute_map = {
        'id': 'id',
        'display_name': 'display_name',
        'short_name': 'short_name',
        'long_name': 'long_name',
        'nation': 'nation',
        'type': 'type'
    }

    def __init__(self, id=None, display_name=None, short_name=None, long_name=None, nation=None, type=None, _configuration=None):  # noqa: E501
        """LegalForm - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._display_name = None
        self._short_name = None
        self._long_name = None
        self._nation = None
        self._type = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if display_name is not None:
            self.display_name = display_name
        if short_name is not None:
            self.short_name = short_name
        if long_name is not None:
            self.long_name = long_name
        if nation is not None:
            self.nation = nation
        if type is not None:
            self.type = type

    @property
    def id(self):
        """Gets the id of this LegalForm.  # noqa: E501

        ID of the legal form.  # noqa: E501

        :return: The id of this LegalForm.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LegalForm.

        ID of the legal form.  # noqa: E501

        :param id: The id of this LegalForm.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                id is not None and len(id) > 6):
            raise ValueError("Invalid value for `id`, length must be less than or equal to `6`")  # noqa: E501
        if (self._configuration.client_side_validation and
                id is not None and len(id) < 6):
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `6`")  # noqa: E501

        self._id = id

    @property
    def display_name(self):
        """Gets the display_name of this LegalForm.  # noqa: E501

        Display name comprising a short and a long name. If no short name is available, or if the long and short names are identical, only the long name will be returned.  # noqa: E501

        :return: The display_name of this LegalForm.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this LegalForm.

        Display name comprising a short and a long name. If no short name is available, or if the long and short names are identical, only the long name will be returned.  # noqa: E501

        :param display_name: The display_name of this LegalForm.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                display_name is not None and len(display_name) > 133):
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `133`")  # noqa: E501

        self._display_name = display_name

    @property
    def short_name(self):
        """Gets the short_name of this LegalForm.  # noqa: E501


        :return: The short_name of this LegalForm.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this LegalForm.


        :param short_name: The short_name of this LegalForm.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                short_name is not None and len(short_name) > 30):
            raise ValueError("Invalid value for `short_name`, length must be less than or equal to `30`")  # noqa: E501

        self._short_name = short_name

    @property
    def long_name(self):
        """Gets the long_name of this LegalForm.  # noqa: E501


        :return: The long_name of this LegalForm.  # noqa: E501
        :rtype: str
        """
        return self._long_name

    @long_name.setter
    def long_name(self, long_name):
        """Sets the long_name of this LegalForm.


        :param long_name: The long_name of this LegalForm.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                long_name is not None and len(long_name) > 100):
            raise ValueError("Invalid value for `long_name`, length must be less than or equal to `100`")  # noqa: E501

        self._long_name = long_name

    @property
    def nation(self):
        """Gets the nation of this LegalForm.  # noqa: E501

        Country to which the legal form relates. The following values are permissible (see “country_of_birth” definition).  # noqa: E501

        :return: The nation of this LegalForm.  # noqa: E501
        :rtype: str
        """
        return self._nation

    @nation.setter
    def nation(self, nation):
        """Sets the nation of this LegalForm.

        Country to which the legal form relates. The following values are permissible (see “country_of_birth” definition).  # noqa: E501

        :param nation: The nation of this LegalForm.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                nation is not None and len(nation) > 2):
            raise ValueError("Invalid value for `nation`, length must be less than or equal to `2`")  # noqa: E501

        self._nation = nation

    @property
    def type(self):
        """Gets the type of this LegalForm.  # noqa: E501

        Indicates the legal form of the enterprise. The following values are permissible (1 = Einzelunternehmen, 2 = Personengesellschaft, 3 = Kapitalgesellschaft, 4 = Sonderform).  # noqa: E501

        :return: The type of this LegalForm.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LegalForm.

        Indicates the legal form of the enterprise. The following values are permissible (1 = Einzelunternehmen, 2 = Personengesellschaft, 3 = Kapitalgesellschaft, 4 = Sonderform).  # noqa: E501

        :param type: The type of this LegalForm.  # noqa: E501
        :type: int
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LegalForm, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LegalForm):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LegalForm):
            return True

        return self.to_dict() != other.to_dict()
