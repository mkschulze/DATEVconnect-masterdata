# coding: utf-8

"""
    Client Master Data

    In the documentation below, you will receive detailed functional and technical specifications on the API DATEVconnect for Master Data.  **General information on dealing with fields administered as historical** A number of fields in the  master data are administered as \"historical\". This means that the existing content is not overwritten when the field is updated, but that the existing value remains in place, with a new value added that is valid from a date entered by the user.  Specifically, the following fields are administered as historical:  *Ressource 'addressees'* - short_names, - surnames, - company_names, - legal_form_ids  *Subordinate object 'detail'* - considerations, - denominations, - federal_states_of_natural_person, - job_titles, - marital_statuses, - codes_of_classification_of_economic_activities_2008, - descriptions_of_classification_of_economic_activities_2008, - mad_codes_of_classification_of_economic_activities_2008, - codes_of_classification_of_economic_activities_2003, - descriptions_of_classification_of_economic_activities_2003, - mad_codes_of_classification_of_economic_activities_2003, - countries_of_head_office, - distributions_of_profit, - enterprise_purposes, - federal_states_mad_of_legal_person, - federal_states_of_legal_person, - fiscal_years, - kind_of_register_courts, - locations_of_head_office, - names_of_register_court, - registered_company_names, - registration_numbers, - three_lined_company_names_first_line, - three_lined_company_names_second_line, - three_lined_company_names_third_line, - two_lined_company_names_first_line, - two_lined_company_names_second_line  These fields are shown as arrays, with their elements exhibiting the following structure: - value, - valid_from  This structure makes it possible to generate periods that indicate the validity date of a particular value in a value range.  This is illustrated by the following examples:  \"job_titles\": [   {\"value\":\"Müller\"},   {\"value\":\"Bäcker\", \"valid_from\":\"1995-04-01T00:00:00.000\"},   {\"value\":\"Metzger\", \"valid_from\":\"2001-07-01T00:00:00.000\"} ] In this example, the profession \"Müller\" (\"miller\") was valid until 03/31/1995. \"Bäcker\" (\"baker\") was valid from 04/01/1995 to 06/30/2001. The value \"Metzger\" (\"butcher\") is valid starting 07/01/2001.  For all the historically administered fields listed above, there is an additional field that indicates the current value of the value range (the value that is valid today/as of the system time). The syntactic structure of the property name is as follows: current_<*Property name of the historically administered field in the singular*>.  In the example above, the property name is \"current_job_title\" with the value \"Metzger\" (\"current_job_title\": \"Metzger\").  When writing fields administered as historical, please note that both properties have to be entered to prevent content from being lost. This can once again be illustrated using the example above:  Starting on 01/01/2010, the person is no longer employed as a butcher (\"Metzger\"), but now works as a landlord (\"Wirt\") in the hospitality industry. In order to save this information in the master data, the request has to be as follows:  ...  \"job_titles\": [   {\"value\":\"Müller\"},   {\"value\":\"Bäcker\", \"valid_from\":\"1995-04-01T00:00:00.000\"},   {\"value\":\"Metzger\", \"valid_from\":\"2001-07-01T00:00:00.000\"},   {\"value\": \"Wirt\", \"valid_from\": \"2010-01-01T00:00:00.000\"} ],  \"current_job_title\": \"Wirt\",  ...  If the property \"current_job_title\" had not been entered, but only the property \"job_titles\", then the current value (\"landlord\" in this example) would have been overwritten by a NULL value, as there would have been no explicit entry for the current value.  If, however, only the property \"current_job_title\" had been entered (i.e. without entering the property \"job_titles\"), then all historical values would have been overwritten. The result would have been the sole value of \"landlord\" without any time period set.  In summary, it can be said that the content of the property \"current_job_title\" overwrites the content of the valid array element of the property \"job_titles\".   # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: schnittstellenberatung@datev.de
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TaxAuthority(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'city': 'str',
        'country_code': 'str',
        'name': 'str',
        'number': 'int',
        'standard': 'bool',
        'timestamp': 'date'
    }

    attribute_map = {
        'id': 'id',
        'city': 'city',
        'country_code': 'country_code',
        'name': 'name',
        'number': 'number',
        'standard': 'standard',
        'timestamp': 'timestamp'
    }

    def __init__(self, id=None, city=None, country_code=None, name=None, number=None, standard=None, timestamp=None, _configuration=None):  # noqa: E501
        """TaxAuthority - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._city = None
        self._country_code = None
        self._name = None
        self._number = None
        self._standard = None
        self._timestamp = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if city is not None:
            self.city = city
        if country_code is not None:
            self.country_code = country_code
        if name is not None:
            self.name = name
        if number is not None:
            self.number = number
        if standard is not None:
            self.standard = standard
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def id(self):
        """Gets the id of this TaxAuthority.  # noqa: E501

        Internal identifier of a tax authority.   # noqa: E501

        :return: The id of this TaxAuthority.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaxAuthority.

        Internal identifier of a tax authority.   # noqa: E501

        :param id: The id of this TaxAuthority.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                id is not None and len(id) > 6):
            raise ValueError("Invalid value for `id`, length must be less than or equal to `6`")  # noqa: E501

        self._id = id

    @property
    def city(self):
        """Gets the city of this TaxAuthority.  # noqa: E501

        Indicates the location of the tax authority.  # noqa: E501

        :return: The city of this TaxAuthority.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this TaxAuthority.

        Indicates the location of the tax authority.  # noqa: E501

        :param city: The city of this TaxAuthority.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                city is not None and len(city) > 30):
            raise ValueError("Invalid value for `city`, length must be less than or equal to `30`")  # noqa: E501

        self._city = city

    @property
    def country_code(self):
        """Gets the country_code of this TaxAuthority.  # noqa: E501

        Indicates the country in which the tax authority is located. The following values are permissible (see \"country_of_birth\" definition).  # noqa: E501

        :return: The country_code of this TaxAuthority.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this TaxAuthority.

        Indicates the country in which the tax authority is located. The following values are permissible (see \"country_of_birth\" definition).  # noqa: E501

        :param country_code: The country_code of this TaxAuthority.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                country_code is not None and len(country_code) > 2):
            raise ValueError("Invalid value for `country_code`, length must be less than or equal to `2`")  # noqa: E501

        self._country_code = country_code

    @property
    def name(self):
        """Gets the name of this TaxAuthority.  # noqa: E501

        Name of the tax authority.  # noqa: E501

        :return: The name of this TaxAuthority.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TaxAuthority.

        Name of the tax authority.  # noqa: E501

        :param name: The name of this TaxAuthority.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 60):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `60`")  # noqa: E501

        self._name = name

    @property
    def number(self):
        """Gets the number of this TaxAuthority.  # noqa: E501

        Indicates the number of the tax authority. This number identifies a tax authority.  # noqa: E501

        :return: The number of this TaxAuthority.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this TaxAuthority.

        Indicates the number of the tax authority. This number identifies a tax authority.  # noqa: E501

        :param number: The number of this TaxAuthority.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                number is not None and number > 9999):  # noqa: E501
            raise ValueError("Invalid value for `number`, must be a value less than or equal to `9999`")  # noqa: E501
        if (self._configuration.client_side_validation and
                number is not None and number < 1):  # noqa: E501
            raise ValueError("Invalid value for `number`, must be a value greater than or equal to `1`")  # noqa: E501

        self._number = number

    @property
    def standard(self):
        """Gets the standard of this TaxAuthority.  # noqa: E501

        Indicates whether the tax authority is a standard institution (to be supplied) or an individual institution.  # noqa: E501

        :return: The standard of this TaxAuthority.  # noqa: E501
        :rtype: bool
        """
        return self._standard

    @standard.setter
    def standard(self, standard):
        """Sets the standard of this TaxAuthority.

        Indicates whether the tax authority is a standard institution (to be supplied) or an individual institution.  # noqa: E501

        :param standard: The standard of this TaxAuthority.  # noqa: E501
        :type: bool
        """

        self._standard = standard

    @property
    def timestamp(self):
        """Gets the timestamp of this TaxAuthority.  # noqa: E501

        Indicates when the tax authority was last edited.  # noqa: E501

        :return: The timestamp of this TaxAuthority.  # noqa: E501
        :rtype: date
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this TaxAuthority.

        Indicates when the tax authority was last edited.  # noqa: E501

        :param timestamp: The timestamp of this TaxAuthority.  # noqa: E501
        :type: date
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaxAuthority, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaxAuthority):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TaxAuthority):
            return True

        return self.to_dict() != other.to_dict()
