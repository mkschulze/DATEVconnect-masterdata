# coding: utf-8

"""
    Client Master Data

    In the documentation below, you will receive detailed functional and technical specifications on the API DATEVconnect for Master Data.  **General information on dealing with fields administered as historical** A number of fields in the  master data are administered as \"historical\". This means that the existing content is not overwritten when the field is updated, but that the existing value remains in place, with a new value added that is valid from a date entered by the user.  Specifically, the following fields are administered as historical:  *Ressource 'addressees'* - short_names, - surnames, - company_names, - legal_form_ids  *Subordinate object 'detail'* - considerations, - denominations, - federal_states_of_natural_person, - job_titles, - marital_statuses, - codes_of_classification_of_economic_activities_2008, - descriptions_of_classification_of_economic_activities_2008, - mad_codes_of_classification_of_economic_activities_2008, - codes_of_classification_of_economic_activities_2003, - descriptions_of_classification_of_economic_activities_2003, - mad_codes_of_classification_of_economic_activities_2003, - countries_of_head_office, - distributions_of_profit, - enterprise_purposes, - federal_states_mad_of_legal_person, - federal_states_of_legal_person, - fiscal_years, - kind_of_register_courts, - locations_of_head_office, - names_of_register_court, - registered_company_names, - registration_numbers, - three_lined_company_names_first_line, - three_lined_company_names_second_line, - three_lined_company_names_third_line, - two_lined_company_names_first_line, - two_lined_company_names_second_line  These fields are shown as arrays, with their elements exhibiting the following structure: - value, - valid_from  This structure makes it possible to generate periods that indicate the validity date of a particular value in a value range.  This is illustrated by the following examples:  \"job_titles\": [   {\"value\":\"Müller\"},   {\"value\":\"Bäcker\", \"valid_from\":\"1995-04-01T00:00:00.000\"},   {\"value\":\"Metzger\", \"valid_from\":\"2001-07-01T00:00:00.000\"} ] In this example, the profession \"Müller\" (\"miller\") was valid until 03/31/1995. \"Bäcker\" (\"baker\") was valid from 04/01/1995 to 06/30/2001. The value \"Metzger\" (\"butcher\") is valid starting 07/01/2001.  For all the historically administered fields listed above, there is an additional field that indicates the current value of the value range (the value that is valid today/as of the system time). The syntactic structure of the property name is as follows: current_<*Property name of the historically administered field in the singular*>.  In the example above, the property name is \"current_job_title\" with the value \"Metzger\" (\"current_job_title\": \"Metzger\").  When writing fields administered as historical, please note that both properties have to be entered to prevent content from being lost. This can once again be illustrated using the example above:  Starting on 01/01/2010, the person is no longer employed as a butcher (\"Metzger\"), but now works as a landlord (\"Wirt\") in the hospitality industry. In order to save this information in the master data, the request has to be as follows:  ...  \"job_titles\": [   {\"value\":\"Müller\"},   {\"value\":\"Bäcker\", \"valid_from\":\"1995-04-01T00:00:00.000\"},   {\"value\":\"Metzger\", \"valid_from\":\"2001-07-01T00:00:00.000\"},   {\"value\": \"Wirt\", \"valid_from\": \"2010-01-01T00:00:00.000\"} ],  \"current_job_title\": \"Wirt\",  ...  If the property \"current_job_title\" had not been entered, but only the property \"job_titles\", then the current value (\"landlord\" in this example) would have been overwritten by a NULL value, as there would have been no explicit entry for the current value.  If, however, only the property \"current_job_title\" had been entered (i.e. without entering the property \"job_titles\"), then all historical values would have been overwritten. The result would have been the sole value of \"landlord\" without any time period set.  In summary, it can be said that the content of the property \"current_job_title\" overwrites the content of the valid array element of the property \"job_titles\".   # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: schnittstellenberatung@datev.de
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class BankAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'bank_account_number': 'str',
        'bank_code': 'str',
        'bank_name': 'str',
        'bic': 'str',
        'country_code': 'str',
        'differing_account_holder': 'str',
        'iban': 'str',
        'note': 'str',
        'valid_from': 'date',
        'valid_to': 'date',
        'currently_valid': 'bool',
        'is_main_bank_account': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'bank_account_number': 'bank_account_number',
        'bank_code': 'bank_code',
        'bank_name': 'bank_name',
        'bic': 'bic',
        'country_code': 'country_code',
        'differing_account_holder': 'differing_account_holder',
        'iban': 'iban',
        'note': 'note',
        'valid_from': 'valid_from',
        'valid_to': 'valid_to',
        'currently_valid': 'currently_valid',
        'is_main_bank_account': 'is_main_bank_account'
    }

    def __init__(self, id=None, bank_account_number=None, bank_code=None, bank_name=None, bic=None, country_code=None, differing_account_holder=None, iban=None, note=None, valid_from=None, valid_to=None, currently_valid=None, is_main_bank_account=None, _configuration=None):  # noqa: E501
        """BankAccount - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._bank_account_number = None
        self._bank_code = None
        self._bank_name = None
        self._bic = None
        self._country_code = None
        self._differing_account_holder = None
        self._iban = None
        self._note = None
        self._valid_from = None
        self._valid_to = None
        self._currently_valid = None
        self._is_main_bank_account = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if bank_account_number is not None:
            self.bank_account_number = bank_account_number
        if bank_code is not None:
            self.bank_code = bank_code
        if bank_name is not None:
            self.bank_name = bank_name
        if bic is not None:
            self.bic = bic
        if country_code is not None:
            self.country_code = country_code
        if differing_account_holder is not None:
            self.differing_account_holder = differing_account_holder
        if iban is not None:
            self.iban = iban
        if note is not None:
            self.note = note
        if valid_from is not None:
            self.valid_from = valid_from
        if valid_to is not None:
            self.valid_to = valid_to
        if currently_valid is not None:
            self.currently_valid = currently_valid
        if is_main_bank_account is not None:
            self.is_main_bank_account = is_main_bank_account

    @property
    def id(self):
        """Gets the id of this BankAccount.  # noqa: E501

        GUID - internal ID of a bank account.  # noqa: E501

        :return: The id of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BankAccount.

        GUID - internal ID of a bank account.  # noqa: E501

        :param id: The id of this BankAccount.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def bank_account_number(self):
        """Gets the bank_account_number of this BankAccount.  # noqa: E501

        Number of the bank account. The maximum length depends on the country in which the bank account is located (property country_code). For 'DE' 10 digits; for 'AT' 11 digits; for 'PL' 16 digits; for 'IT' 20 digits; for 'CZ' 17 digits. For any other country 30 digits are permissible.  # noqa: E501

        :return: The bank_account_number of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._bank_account_number

    @bank_account_number.setter
    def bank_account_number(self, bank_account_number):
        """Sets the bank_account_number of this BankAccount.

        Number of the bank account. The maximum length depends on the country in which the bank account is located (property country_code). For 'DE' 10 digits; for 'AT' 11 digits; for 'PL' 16 digits; for 'IT' 20 digits; for 'CZ' 17 digits. For any other country 30 digits are permissible.  # noqa: E501

        :param bank_account_number: The bank_account_number of this BankAccount.  # noqa: E501
        :type: str
        """

        self._bank_account_number = bank_account_number

    @property
    def bank_code(self):
        """Gets the bank_code of this BankAccount.  # noqa: E501

        Code number for identification all banks within a country. Bank branches are not identified. The maximum length depends on the country in which the bank is located (property country_code). For 'DE' 8 digits; for 'AT' 5 digits; for 'PL' 8 digits. For any other country 10 digits are permissible.  # noqa: E501

        :return: The bank_code of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._bank_code

    @bank_code.setter
    def bank_code(self, bank_code):
        """Sets the bank_code of this BankAccount.

        Code number for identification all banks within a country. Bank branches are not identified. The maximum length depends on the country in which the bank is located (property country_code). For 'DE' 8 digits; for 'AT' 5 digits; for 'PL' 8 digits. For any other country 10 digits are permissible.  # noqa: E501

        :param bank_code: The bank_code of this BankAccount.  # noqa: E501
        :type: str
        """

        self._bank_code = bank_code

    @property
    def bank_name(self):
        """Gets the bank_name of this BankAccount.  # noqa: E501

        Name of the bank.  # noqa: E501

        :return: The bank_name of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._bank_name

    @bank_name.setter
    def bank_name(self, bank_name):
        """Sets the bank_name of this BankAccount.

        Name of the bank.  # noqa: E501

        :param bank_name: The bank_name of this BankAccount.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                bank_name is not None and len(bank_name) > 30):
            raise ValueError("Invalid value for `bank_name`, length must be less than or equal to `30`")  # noqa: E501

        self._bank_name = bank_name

    @property
    def bic(self):
        """Gets the bic of this BankAccount.  # noqa: E501

        Unique identifier for a SWIFT-participant (BIC - Bank Identifier Code). SWIFT is the abbreviation for \"Society for Worldwide Interbank Financial Telecommunications\".  # noqa: E501

        :return: The bic of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._bic

    @bic.setter
    def bic(self, bic):
        """Sets the bic of this BankAccount.

        Unique identifier for a SWIFT-participant (BIC - Bank Identifier Code). SWIFT is the abbreviation for \"Society for Worldwide Interbank Financial Telecommunications\".  # noqa: E501

        :param bic: The bic of this BankAccount.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                bic is not None and len(bic) > 11):
            raise ValueError("Invalid value for `bic`, length must be less than or equal to `11`")  # noqa: E501
        if (self._configuration.client_side_validation and
                bic is not None and not re.search(r'^([A-Z]{4}[A-Z]{2}([A-Z0-9]){2}([A-Z0-9]){0,3})$', bic)):  # noqa: E501
            raise ValueError(r"Invalid value for `bic`, must be a follow pattern or equal to `/^([A-Z]{4}[A-Z]{2}([A-Z0-9]){2}([A-Z0-9]){0,3})$/`")  # noqa: E501

        self._bic = bic

    @property
    def country_code(self):
        """Gets the country_code of this BankAccount.  # noqa: E501

        Indicates the country in which the bank is located. The following values are permissible (see “country_of_birth” definition).  # noqa: E501

        :return: The country_code of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this BankAccount.

        Indicates the country in which the bank is located. The following values are permissible (see “country_of_birth” definition).  # noqa: E501

        :param country_code: The country_code of this BankAccount.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                country_code is not None and len(country_code) > 2):
            raise ValueError("Invalid value for `country_code`, length must be less than or equal to `2`")  # noqa: E501

        self._country_code = country_code

    @property
    def differing_account_holder(self):
        """Gets the differing_account_holder of this BankAccount.  # noqa: E501

        Name of the account holder, if is not the associated addressee.  # noqa: E501

        :return: The differing_account_holder of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._differing_account_holder

    @differing_account_holder.setter
    def differing_account_holder(self, differing_account_holder):
        """Sets the differing_account_holder of this BankAccount.

        Name of the account holder, if is not the associated addressee.  # noqa: E501

        :param differing_account_holder: The differing_account_holder of this BankAccount.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                differing_account_holder is not None and len(differing_account_holder) > 70):
            raise ValueError("Invalid value for `differing_account_holder`, length must be less than or equal to `70`")  # noqa: E501

        self._differing_account_holder = differing_account_holder

    @property
    def iban(self):
        """Gets the iban of this BankAccount.  # noqa: E501

        Identifies a bank account worldwide (ISO 13616).  # noqa: E501

        :return: The iban of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this BankAccount.

        Identifies a bank account worldwide (ISO 13616).  # noqa: E501

        :param iban: The iban of this BankAccount.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                iban is not None and len(iban) > 34):
            raise ValueError("Invalid value for `iban`, length must be less than or equal to `34`")  # noqa: E501
        if (self._configuration.client_side_validation and
                iban is not None and not re.search(r'^([A-Z]{2}\\d\\d([A-Za-z0-9]){11,30})$', iban)):  # noqa: E501
            raise ValueError(r"Invalid value for `iban`, must be a follow pattern or equal to `/^([A-Z]{2}\\d\\d([A-Za-z0-9]){11,30})$/`")  # noqa: E501

        self._iban = iban

    @property
    def note(self):
        """Gets the note of this BankAccount.  # noqa: E501

        Field for notes about the bank account.  # noqa: E501

        :return: The note of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this BankAccount.

        Field for notes about the bank account.  # noqa: E501

        :param note: The note of this BankAccount.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                note is not None and len(note) > 40):
            raise ValueError("Invalid value for `note`, length must be less than or equal to `40`")  # noqa: E501

        self._note = note

    @property
    def valid_from(self):
        """Gets the valid_from of this BankAccount.  # noqa: E501

        Indicates the date from which a bank account is valid.  # noqa: E501

        :return: The valid_from of this BankAccount.  # noqa: E501
        :rtype: date
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this BankAccount.

        Indicates the date from which a bank account is valid.  # noqa: E501

        :param valid_from: The valid_from of this BankAccount.  # noqa: E501
        :type: date
        """

        self._valid_from = valid_from

    @property
    def valid_to(self):
        """Gets the valid_to of this BankAccount.  # noqa: E501

        Indicates the date until which a bank account is valid.  # noqa: E501

        :return: The valid_to of this BankAccount.  # noqa: E501
        :rtype: date
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to):
        """Sets the valid_to of this BankAccount.

        Indicates the date until which a bank account is valid.  # noqa: E501

        :param valid_to: The valid_to of this BankAccount.  # noqa: E501
        :type: date
        """

        self._valid_to = valid_to

    @property
    def currently_valid(self):
        """Gets the currently_valid of this BankAccount.  # noqa: E501

        Indicates whether or not the bank account is currently valid.  # noqa: E501

        :return: The currently_valid of this BankAccount.  # noqa: E501
        :rtype: bool
        """
        return self._currently_valid

    @currently_valid.setter
    def currently_valid(self, currently_valid):
        """Sets the currently_valid of this BankAccount.

        Indicates whether or not the bank account is currently valid.  # noqa: E501

        :param currently_valid: The currently_valid of this BankAccount.  # noqa: E501
        :type: bool
        """

        self._currently_valid = currently_valid

    @property
    def is_main_bank_account(self):
        """Gets the is_main_bank_account of this BankAccount.  # noqa: E501

        Indicates whether this is the main bank account. Among all valid bank accounts of an addressee, this property must be marked with 'true' exactly once.  # noqa: E501

        :return: The is_main_bank_account of this BankAccount.  # noqa: E501
        :rtype: bool
        """
        return self._is_main_bank_account

    @is_main_bank_account.setter
    def is_main_bank_account(self, is_main_bank_account):
        """Sets the is_main_bank_account of this BankAccount.

        Indicates whether this is the main bank account. Among all valid bank accounts of an addressee, this property must be marked with 'true' exactly once.  # noqa: E501

        :param is_main_bank_account: The is_main_bank_account of this BankAccount.  # noqa: E501
        :type: bool
        """

        self._is_main_bank_account = is_main_bank_account

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BankAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankAccount):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BankAccount):
            return True

        return self.to_dict() != other.to_dict()
