# coding: utf-8

"""
    Client Master Data

    In the documentation below, you will receive detailed functional and technical specifications on the API DATEVconnect for Master Data.  **General information on dealing with fields administered as historical** A number of fields in the  master data are administered as \"historical\". This means that the existing content is not overwritten when the field is updated, but that the existing value remains in place, with a new value added that is valid from a date entered by the user.  Specifically, the following fields are administered as historical:  *Ressource 'addressees'* - short_names, - surnames, - company_names, - legal_form_ids  *Subordinate object 'detail'* - considerations, - denominations, - federal_states_of_natural_person, - job_titles, - marital_statuses, - codes_of_classification_of_economic_activities_2008, - descriptions_of_classification_of_economic_activities_2008, - mad_codes_of_classification_of_economic_activities_2008, - codes_of_classification_of_economic_activities_2003, - descriptions_of_classification_of_economic_activities_2003, - mad_codes_of_classification_of_economic_activities_2003, - countries_of_head_office, - distributions_of_profit, - enterprise_purposes, - federal_states_mad_of_legal_person, - federal_states_of_legal_person, - fiscal_years, - kind_of_register_courts, - locations_of_head_office, - names_of_register_court, - registered_company_names, - registration_numbers, - three_lined_company_names_first_line, - three_lined_company_names_second_line, - three_lined_company_names_third_line, - two_lined_company_names_first_line, - two_lined_company_names_second_line  These fields are shown as arrays, with their elements exhibiting the following structure: - value, - valid_from  This structure makes it possible to generate periods that indicate the validity date of a particular value in a value range.  This is illustrated by the following examples:  \"job_titles\": [   {\"value\":\"Müller\"},   {\"value\":\"Bäcker\", \"valid_from\":\"1995-04-01T00:00:00.000\"},   {\"value\":\"Metzger\", \"valid_from\":\"2001-07-01T00:00:00.000\"} ] In this example, the profession \"Müller\" (\"miller\") was valid until 03/31/1995. \"Bäcker\" (\"baker\") was valid from 04/01/1995 to 06/30/2001. The value \"Metzger\" (\"butcher\") is valid starting 07/01/2001.  For all the historically administered fields listed above, there is an additional field that indicates the current value of the value range (the value that is valid today/as of the system time). The syntactic structure of the property name is as follows: current_<*Property name of the historically administered field in the singular*>.  In the example above, the property name is \"current_job_title\" with the value \"Metzger\" (\"current_job_title\": \"Metzger\").  When writing fields administered as historical, please note that both properties have to be entered to prevent content from being lost. This can once again be illustrated using the example above:  Starting on 01/01/2010, the person is no longer employed as a butcher (\"Metzger\"), but now works as a landlord (\"Wirt\") in the hospitality industry. In order to save this information in the master data, the request has to be as follows:  ...  \"job_titles\": [   {\"value\":\"Müller\"},   {\"value\":\"Bäcker\", \"valid_from\":\"1995-04-01T00:00:00.000\"},   {\"value\":\"Metzger\", \"valid_from\":\"2001-07-01T00:00:00.000\"},   {\"value\": \"Wirt\", \"valid_from\": \"2010-01-01T00:00:00.000\"} ],  \"current_job_title\": \"Wirt\",  ...  If the property \"current_job_title\" had not been entered, but only the property \"job_titles\", then the current value (\"landlord\" in this example) would have been overwritten by a NULL value, as there would have been no explicit entry for the current value.  If, however, only the property \"current_job_title\" had been entered (i.e. without entering the property \"job_titles\"), then all historical values would have been overwritten. The result would have been the sole value of \"landlord\" without any time period set.  In summary, it can be said that the content of the property \"current_job_title\" overwrites the content of the valid array element of the property \"job_titles\".   # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: schnittstellenberatung@datev.de
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Detail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'complimentary_close': 'str',
        'correspondence_title': 'str',
        'national_right': 'str',
        'note': 'str',
        'salutation': 'str',
        'all_first_names': 'str',
        'birth_name': 'str',
        'considerations': 'list[Consideration]',
        'current_consideration': 'str',
        'country_of_birth': 'str',
        'date_of_death': 'date',
        'date_of_expiry': 'date',
        'date_of_issue': 'date',
        'degree': 'str',
        'denominations': 'list[Denomination]',
        'current_denomination': 'str',
        'federal_states_of_natural_person': 'list[FederalState]',
        'current_federal_state_of_natural_person': 'str',
        'identification_number': 'str',
        'issuing_authority': 'str',
        'job_titles': 'list[JobTitle]',
        'current_job_title': 'str',
        'marital_statuses': 'list[MaritalStatus]',
        'current_marital_status': 'str',
        'name_prefix': 'str',
        'nationality': 'str',
        'paper_of_identity': 'str',
        'pension_insurance_institute': 'str',
        'place_of_birth': 'str',
        'register_of_births_number': 'str',
        'register_office_of_birth': 'str',
        'social_security_number': 'str',
        'title_of_nobility': 'str',
        'codes_of_classification_of_economic_activities_2008': 'list[CodeOfClassificationOfEconomicActivities2008]',
        'current_code_of_classification_of_economic_activities_2008': 'str',
        'descriptions_of_classification_of_economic_activities_2008': 'list[DescriptionOfClassificationOfEconomicActivities2008]',
        'current_description_of_classification_of_economic_activities_2008': 'str',
        'mad_codes_of_classification_of_economic_activities_2008': 'list[MADCodeOfClassificationOfEconomicActivities2008]',
        'current_mad_code_of_classification_of_economic_activities_2008': 'str',
        'codes_of_classification_of_economic_activities_2003': 'list[CodeOfClassificationOfEconomicActivities2003]',
        'current_code_of_classification_of_economic_activities_2003': 'str',
        'descriptions_of_classification_of_economic_activities_2003': 'list[DescriptionOfClassificationOfEconomicActivities2003]',
        'current_description_of_classification_of_economic_activities_2003': 'str',
        'mad_codes_of_classification_of_economic_activities_2003': 'list[MADCodeOfClassificationOfEconomicActivities2003]',
        'current_mad_code_of_classification_of_economic_activities_2003': 'str',
        'countries_of_head_office': 'list[CountryOfHeadOffice]',
        'current_country_of_head_office': 'str',
        'date_of_memorandum_of_association': 'date',
        'distributions_of_profit': 'list[DistributionOfProfit]',
        'current_distribution_of_profit': 'str',
        'enterprise_purposes': 'list[EnterprisePurpose]',
        'current_enterprise_purpose': 'str',
        'federal_states_mad_of_legal_person': 'list[FederalStateMAD]',
        'current_federal_state_mad_of_legal_person': 'int',
        'federal_states_of_legal_person': 'list[FederalState]',
        'current_federal_state_of_legal_person': 'str',
        'fiscal_years': 'list[FiscalYear]',
        'current_fiscal_year': 'str',
        'kind_of_register_courts': 'list[KindOfRegisterCourt]',
        'current_kind_of_register_court': 'str',
        'locations_of_head_office': 'list[LocationOfHeadOffice]',
        'current_location_of_head_office': 'str',
        'names_of_register_court': 'list[NameOfRegisterCourt]',
        'current_name_of_register_court': 'str',
        'registered_company_names': 'list[RegisteredCompanyName]',
        'current_registered_company_name': 'str',
        'registration_date': 'date',
        'registration_numbers': 'list[RegistrationNumber]',
        'current_registration_number': 'str',
        'three_lined_company_names_first_line': 'list[CompanyName]',
        'current_three_lined_company_name_first_line': 'str',
        'three_lined_company_names_second_line': 'list[CompanyName]',
        'current_three_lined_company_name_second_line': 'str',
        'three_lined_company_names_third_line': 'list[CompanyName]',
        'current_three_lined_company_name_third_line': 'str',
        'two_lined_company_names_first_line': 'list[CompanyName]',
        'current_two_lined_company_name_first_line': 'str',
        'two_lined_company_names_second_line': 'list[CompanyName]',
        'current_two_lined_company_name_second_line': 'str',
        'winding_up_date': 'date',
        'winding_up_proceedings': 'str'
    }

    attribute_map = {
        'complimentary_close': 'complimentary_close',
        'correspondence_title': 'correspondence_title',
        'national_right': 'national_right',
        'note': 'note',
        'salutation': 'salutation',
        'all_first_names': 'all_first_names',
        'birth_name': 'birth_name',
        'considerations': 'considerations',
        'current_consideration': 'current_consideration',
        'country_of_birth': 'country_of_birth',
        'date_of_death': 'date_of_death',
        'date_of_expiry': 'date_of_expiry',
        'date_of_issue': 'date_of_issue',
        'degree': 'degree',
        'denominations': 'denominations',
        'current_denomination': 'current_denomination',
        'federal_states_of_natural_person': 'federal_states_of_natural_person',
        'current_federal_state_of_natural_person': 'current_federal_state_of_natural_person',
        'identification_number': 'identification_number',
        'issuing_authority': 'issuing_authority',
        'job_titles': 'job_titles',
        'current_job_title': 'current_job_title',
        'marital_statuses': 'marital_statuses',
        'current_marital_status': 'current_marital_status',
        'name_prefix': 'name_prefix',
        'nationality': 'nationality',
        'paper_of_identity': 'paper_of_identity',
        'pension_insurance_institute': 'pension_insurance_institute',
        'place_of_birth': 'place_of_birth',
        'register_of_births_number': 'register_of_births_number',
        'register_office_of_birth': 'register_office_of_birth',
        'social_security_number': 'social_security_number',
        'title_of_nobility': 'title_of_nobility',
        'codes_of_classification_of_economic_activities_2008': 'codes_of_classification_of_economic_activities_2008',
        'current_code_of_classification_of_economic_activities_2008': 'current_code_of_classification_of_economic_activities_2008',
        'descriptions_of_classification_of_economic_activities_2008': 'descriptions_of_classification_of_economic_activities_2008',
        'current_description_of_classification_of_economic_activities_2008': 'current_description_of_classification_of_economic_activities_2008',
        'mad_codes_of_classification_of_economic_activities_2008': 'mad_codes_of_classification_of_economic_activities_2008',
        'current_mad_code_of_classification_of_economic_activities_2008': 'current_mad_code_of_classification_of_economic_activities_2008',
        'codes_of_classification_of_economic_activities_2003': 'codes_of_classification_of_economic_activities_2003',
        'current_code_of_classification_of_economic_activities_2003': 'current_code_of_classification_of_economic_activities_2003',
        'descriptions_of_classification_of_economic_activities_2003': 'descriptions_of_classification_of_economic_activities_2003',
        'current_description_of_classification_of_economic_activities_2003': 'current_description_of_classification_of_economic_activities_2003',
        'mad_codes_of_classification_of_economic_activities_2003': 'mad_codes_of_classification_of_economic_activities_2003',
        'current_mad_code_of_classification_of_economic_activities_2003': 'current_mad_code_of_classification_of_economic_activities_2003',
        'countries_of_head_office': 'countries_of_head_office',
        'current_country_of_head_office': 'current_country_of_head_office',
        'date_of_memorandum_of_association': 'date_of_memorandum_of_association',
        'distributions_of_profit': 'distributions_of_profit',
        'current_distribution_of_profit': 'current_distribution_of_profit',
        'enterprise_purposes': 'enterprise_purposes',
        'current_enterprise_purpose': 'current_enterprise_purpose',
        'federal_states_mad_of_legal_person': 'federal_states_mad_of_legal_person',
        'current_federal_state_mad_of_legal_person': 'current_federal_state_mad_of_legal_person',
        'federal_states_of_legal_person': 'federal_states_of_legal_person',
        'current_federal_state_of_legal_person': 'current_federal_state_of_legal_person',
        'fiscal_years': 'fiscal_years',
        'current_fiscal_year': 'current_fiscal_year',
        'kind_of_register_courts': 'kind_of_register_courts',
        'current_kind_of_register_court': 'current_kind_of_register_court',
        'locations_of_head_office': 'locations_of_head_office',
        'current_location_of_head_office': 'current_location_of_head_office',
        'names_of_register_court': 'names_of_register_court',
        'current_name_of_register_court': 'current_name_of_register_court',
        'registered_company_names': 'registered_company_names',
        'current_registered_company_name': 'current_registered_company_name',
        'registration_date': 'registration_date',
        'registration_numbers': 'registration_numbers',
        'current_registration_number': 'current_registration_number',
        'three_lined_company_names_first_line': 'three_lined_company_names_first_line',
        'current_three_lined_company_name_first_line': 'current_three_lined_company_name_first_line',
        'three_lined_company_names_second_line': 'three_lined_company_names_second_line',
        'current_three_lined_company_name_second_line': 'current_three_lined_company_name_second_line',
        'three_lined_company_names_third_line': 'three_lined_company_names_third_line',
        'current_three_lined_company_name_third_line': 'current_three_lined_company_name_third_line',
        'two_lined_company_names_first_line': 'two_lined_company_names_first_line',
        'current_two_lined_company_name_first_line': 'current_two_lined_company_name_first_line',
        'two_lined_company_names_second_line': 'two_lined_company_names_second_line',
        'current_two_lined_company_name_second_line': 'current_two_lined_company_name_second_line',
        'winding_up_date': 'winding_up_date',
        'winding_up_proceedings': 'winding_up_proceedings'
    }

    def __init__(self, complimentary_close=None, correspondence_title=None, national_right=None, note=None, salutation=None, all_first_names=None, birth_name=None, considerations=None, current_consideration=None, country_of_birth=None, date_of_death=None, date_of_expiry=None, date_of_issue=None, degree=None, denominations=None, current_denomination=None, federal_states_of_natural_person=None, current_federal_state_of_natural_person=None, identification_number=None, issuing_authority=None, job_titles=None, current_job_title=None, marital_statuses=None, current_marital_status=None, name_prefix=None, nationality=None, paper_of_identity=None, pension_insurance_institute=None, place_of_birth=None, register_of_births_number=None, register_office_of_birth=None, social_security_number=None, title_of_nobility=None, codes_of_classification_of_economic_activities_2008=None, current_code_of_classification_of_economic_activities_2008=None, descriptions_of_classification_of_economic_activities_2008=None, current_description_of_classification_of_economic_activities_2008=None, mad_codes_of_classification_of_economic_activities_2008=None, current_mad_code_of_classification_of_economic_activities_2008=None, codes_of_classification_of_economic_activities_2003=None, current_code_of_classification_of_economic_activities_2003=None, descriptions_of_classification_of_economic_activities_2003=None, current_description_of_classification_of_economic_activities_2003=None, mad_codes_of_classification_of_economic_activities_2003=None, current_mad_code_of_classification_of_economic_activities_2003=None, countries_of_head_office=None, current_country_of_head_office=None, date_of_memorandum_of_association=None, distributions_of_profit=None, current_distribution_of_profit=None, enterprise_purposes=None, current_enterprise_purpose=None, federal_states_mad_of_legal_person=None, current_federal_state_mad_of_legal_person=None, federal_states_of_legal_person=None, current_federal_state_of_legal_person=None, fiscal_years=None, current_fiscal_year=None, kind_of_register_courts=None, current_kind_of_register_court=None, locations_of_head_office=None, current_location_of_head_office=None, names_of_register_court=None, current_name_of_register_court=None, registered_company_names=None, current_registered_company_name=None, registration_date=None, registration_numbers=None, current_registration_number=None, three_lined_company_names_first_line=None, current_three_lined_company_name_first_line=None, three_lined_company_names_second_line=None, current_three_lined_company_name_second_line=None, three_lined_company_names_third_line=None, current_three_lined_company_name_third_line=None, two_lined_company_names_first_line=None, current_two_lined_company_name_first_line=None, two_lined_company_names_second_line=None, current_two_lined_company_name_second_line=None, winding_up_date=None, winding_up_proceedings=None, _configuration=None):  # noqa: E501
        """Detail - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._complimentary_close = None
        self._correspondence_title = None
        self._national_right = None
        self._note = None
        self._salutation = None
        self._all_first_names = None
        self._birth_name = None
        self._considerations = None
        self._current_consideration = None
        self._country_of_birth = None
        self._date_of_death = None
        self._date_of_expiry = None
        self._date_of_issue = None
        self._degree = None
        self._denominations = None
        self._current_denomination = None
        self._federal_states_of_natural_person = None
        self._current_federal_state_of_natural_person = None
        self._identification_number = None
        self._issuing_authority = None
        self._job_titles = None
        self._current_job_title = None
        self._marital_statuses = None
        self._current_marital_status = None
        self._name_prefix = None
        self._nationality = None
        self._paper_of_identity = None
        self._pension_insurance_institute = None
        self._place_of_birth = None
        self._register_of_births_number = None
        self._register_office_of_birth = None
        self._social_security_number = None
        self._title_of_nobility = None
        self._codes_of_classification_of_economic_activities_2008 = None
        self._current_code_of_classification_of_economic_activities_2008 = None
        self._descriptions_of_classification_of_economic_activities_2008 = None
        self._current_description_of_classification_of_economic_activities_2008 = None
        self._mad_codes_of_classification_of_economic_activities_2008 = None
        self._current_mad_code_of_classification_of_economic_activities_2008 = None
        self._codes_of_classification_of_economic_activities_2003 = None
        self._current_code_of_classification_of_economic_activities_2003 = None
        self._descriptions_of_classification_of_economic_activities_2003 = None
        self._current_description_of_classification_of_economic_activities_2003 = None
        self._mad_codes_of_classification_of_economic_activities_2003 = None
        self._current_mad_code_of_classification_of_economic_activities_2003 = None
        self._countries_of_head_office = None
        self._current_country_of_head_office = None
        self._date_of_memorandum_of_association = None
        self._distributions_of_profit = None
        self._current_distribution_of_profit = None
        self._enterprise_purposes = None
        self._current_enterprise_purpose = None
        self._federal_states_mad_of_legal_person = None
        self._current_federal_state_mad_of_legal_person = None
        self._federal_states_of_legal_person = None
        self._current_federal_state_of_legal_person = None
        self._fiscal_years = None
        self._current_fiscal_year = None
        self._kind_of_register_courts = None
        self._current_kind_of_register_court = None
        self._locations_of_head_office = None
        self._current_location_of_head_office = None
        self._names_of_register_court = None
        self._current_name_of_register_court = None
        self._registered_company_names = None
        self._current_registered_company_name = None
        self._registration_date = None
        self._registration_numbers = None
        self._current_registration_number = None
        self._three_lined_company_names_first_line = None
        self._current_three_lined_company_name_first_line = None
        self._three_lined_company_names_second_line = None
        self._current_three_lined_company_name_second_line = None
        self._three_lined_company_names_third_line = None
        self._current_three_lined_company_name_third_line = None
        self._two_lined_company_names_first_line = None
        self._current_two_lined_company_name_first_line = None
        self._two_lined_company_names_second_line = None
        self._current_two_lined_company_name_second_line = None
        self._winding_up_date = None
        self._winding_up_proceedings = None
        self.discriminator = None

        if complimentary_close is not None:
            self.complimentary_close = complimentary_close
        if correspondence_title is not None:
            self.correspondence_title = correspondence_title
        if national_right is not None:
            self.national_right = national_right
        if note is not None:
            self.note = note
        if salutation is not None:
            self.salutation = salutation
        if all_first_names is not None:
            self.all_first_names = all_first_names
        if birth_name is not None:
            self.birth_name = birth_name
        if considerations is not None:
            self.considerations = considerations
        if current_consideration is not None:
            self.current_consideration = current_consideration
        if country_of_birth is not None:
            self.country_of_birth = country_of_birth
        if date_of_death is not None:
            self.date_of_death = date_of_death
        if date_of_expiry is not None:
            self.date_of_expiry = date_of_expiry
        if date_of_issue is not None:
            self.date_of_issue = date_of_issue
        if degree is not None:
            self.degree = degree
        if denominations is not None:
            self.denominations = denominations
        if current_denomination is not None:
            self.current_denomination = current_denomination
        if federal_states_of_natural_person is not None:
            self.federal_states_of_natural_person = federal_states_of_natural_person
        if current_federal_state_of_natural_person is not None:
            self.current_federal_state_of_natural_person = current_federal_state_of_natural_person
        if identification_number is not None:
            self.identification_number = identification_number
        if issuing_authority is not None:
            self.issuing_authority = issuing_authority
        if job_titles is not None:
            self.job_titles = job_titles
        if current_job_title is not None:
            self.current_job_title = current_job_title
        if marital_statuses is not None:
            self.marital_statuses = marital_statuses
        if current_marital_status is not None:
            self.current_marital_status = current_marital_status
        if name_prefix is not None:
            self.name_prefix = name_prefix
        if nationality is not None:
            self.nationality = nationality
        if paper_of_identity is not None:
            self.paper_of_identity = paper_of_identity
        if pension_insurance_institute is not None:
            self.pension_insurance_institute = pension_insurance_institute
        if place_of_birth is not None:
            self.place_of_birth = place_of_birth
        if register_of_births_number is not None:
            self.register_of_births_number = register_of_births_number
        if register_office_of_birth is not None:
            self.register_office_of_birth = register_office_of_birth
        if social_security_number is not None:
            self.social_security_number = social_security_number
        if title_of_nobility is not None:
            self.title_of_nobility = title_of_nobility
        if codes_of_classification_of_economic_activities_2008 is not None:
            self.codes_of_classification_of_economic_activities_2008 = codes_of_classification_of_economic_activities_2008
        if current_code_of_classification_of_economic_activities_2008 is not None:
            self.current_code_of_classification_of_economic_activities_2008 = current_code_of_classification_of_economic_activities_2008
        if descriptions_of_classification_of_economic_activities_2008 is not None:
            self.descriptions_of_classification_of_economic_activities_2008 = descriptions_of_classification_of_economic_activities_2008
        if current_description_of_classification_of_economic_activities_2008 is not None:
            self.current_description_of_classification_of_economic_activities_2008 = current_description_of_classification_of_economic_activities_2008
        if mad_codes_of_classification_of_economic_activities_2008 is not None:
            self.mad_codes_of_classification_of_economic_activities_2008 = mad_codes_of_classification_of_economic_activities_2008
        if current_mad_code_of_classification_of_economic_activities_2008 is not None:
            self.current_mad_code_of_classification_of_economic_activities_2008 = current_mad_code_of_classification_of_economic_activities_2008
        if codes_of_classification_of_economic_activities_2003 is not None:
            self.codes_of_classification_of_economic_activities_2003 = codes_of_classification_of_economic_activities_2003
        if current_code_of_classification_of_economic_activities_2003 is not None:
            self.current_code_of_classification_of_economic_activities_2003 = current_code_of_classification_of_economic_activities_2003
        if descriptions_of_classification_of_economic_activities_2003 is not None:
            self.descriptions_of_classification_of_economic_activities_2003 = descriptions_of_classification_of_economic_activities_2003
        if current_description_of_classification_of_economic_activities_2003 is not None:
            self.current_description_of_classification_of_economic_activities_2003 = current_description_of_classification_of_economic_activities_2003
        if mad_codes_of_classification_of_economic_activities_2003 is not None:
            self.mad_codes_of_classification_of_economic_activities_2003 = mad_codes_of_classification_of_economic_activities_2003
        if current_mad_code_of_classification_of_economic_activities_2003 is not None:
            self.current_mad_code_of_classification_of_economic_activities_2003 = current_mad_code_of_classification_of_economic_activities_2003
        if countries_of_head_office is not None:
            self.countries_of_head_office = countries_of_head_office
        if current_country_of_head_office is not None:
            self.current_country_of_head_office = current_country_of_head_office
        if date_of_memorandum_of_association is not None:
            self.date_of_memorandum_of_association = date_of_memorandum_of_association
        if distributions_of_profit is not None:
            self.distributions_of_profit = distributions_of_profit
        if current_distribution_of_profit is not None:
            self.current_distribution_of_profit = current_distribution_of_profit
        if enterprise_purposes is not None:
            self.enterprise_purposes = enterprise_purposes
        if current_enterprise_purpose is not None:
            self.current_enterprise_purpose = current_enterprise_purpose
        if federal_states_mad_of_legal_person is not None:
            self.federal_states_mad_of_legal_person = federal_states_mad_of_legal_person
        if current_federal_state_mad_of_legal_person is not None:
            self.current_federal_state_mad_of_legal_person = current_federal_state_mad_of_legal_person
        if federal_states_of_legal_person is not None:
            self.federal_states_of_legal_person = federal_states_of_legal_person
        if current_federal_state_of_legal_person is not None:
            self.current_federal_state_of_legal_person = current_federal_state_of_legal_person
        if fiscal_years is not None:
            self.fiscal_years = fiscal_years
        if current_fiscal_year is not None:
            self.current_fiscal_year = current_fiscal_year
        if kind_of_register_courts is not None:
            self.kind_of_register_courts = kind_of_register_courts
        if current_kind_of_register_court is not None:
            self.current_kind_of_register_court = current_kind_of_register_court
        if locations_of_head_office is not None:
            self.locations_of_head_office = locations_of_head_office
        if current_location_of_head_office is not None:
            self.current_location_of_head_office = current_location_of_head_office
        if names_of_register_court is not None:
            self.names_of_register_court = names_of_register_court
        if current_name_of_register_court is not None:
            self.current_name_of_register_court = current_name_of_register_court
        if registered_company_names is not None:
            self.registered_company_names = registered_company_names
        if current_registered_company_name is not None:
            self.current_registered_company_name = current_registered_company_name
        if registration_date is not None:
            self.registration_date = registration_date
        if registration_numbers is not None:
            self.registration_numbers = registration_numbers
        if current_registration_number is not None:
            self.current_registration_number = current_registration_number
        if three_lined_company_names_first_line is not None:
            self.three_lined_company_names_first_line = three_lined_company_names_first_line
        if current_three_lined_company_name_first_line is not None:
            self.current_three_lined_company_name_first_line = current_three_lined_company_name_first_line
        if three_lined_company_names_second_line is not None:
            self.three_lined_company_names_second_line = three_lined_company_names_second_line
        if current_three_lined_company_name_second_line is not None:
            self.current_three_lined_company_name_second_line = current_three_lined_company_name_second_line
        if three_lined_company_names_third_line is not None:
            self.three_lined_company_names_third_line = three_lined_company_names_third_line
        if current_three_lined_company_name_third_line is not None:
            self.current_three_lined_company_name_third_line = current_three_lined_company_name_third_line
        if two_lined_company_names_first_line is not None:
            self.two_lined_company_names_first_line = two_lined_company_names_first_line
        if current_two_lined_company_name_first_line is not None:
            self.current_two_lined_company_name_first_line = current_two_lined_company_name_first_line
        if two_lined_company_names_second_line is not None:
            self.two_lined_company_names_second_line = two_lined_company_names_second_line
        if current_two_lined_company_name_second_line is not None:
            self.current_two_lined_company_name_second_line = current_two_lined_company_name_second_line
        if winding_up_date is not None:
            self.winding_up_date = winding_up_date
        if winding_up_proceedings is not None:
            self.winding_up_proceedings = winding_up_proceedings

    @property
    def complimentary_close(self):
        """Gets the complimentary_close of this Detail.  # noqa: E501

        The complimentary close defines the sign-off used for an addressee in correspondence.  # noqa: E501

        :return: The complimentary_close of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._complimentary_close

    @complimentary_close.setter
    def complimentary_close(self, complimentary_close):
        """Sets the complimentary_close of this Detail.

        The complimentary close defines the sign-off used for an addressee in correspondence.  # noqa: E501

        :param complimentary_close: The complimentary_close of this Detail.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                complimentary_close is not None and len(complimentary_close) > 50):
            raise ValueError("Invalid value for `complimentary_close`, length must be less than or equal to `50`")  # noqa: E501

        self._complimentary_close = complimentary_close

    @property
    def correspondence_title(self):
        """Gets the correspondence_title of this Detail.  # noqa: E501

        The title is the way in which an addressee is addressed. Examples are \"Ms.\" or \"Mr.\"  # noqa: E501

        :return: The correspondence_title of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._correspondence_title

    @correspondence_title.setter
    def correspondence_title(self, correspondence_title):
        """Sets the correspondence_title of this Detail.

        The title is the way in which an addressee is addressed. Examples are \"Ms.\" or \"Mr.\"  # noqa: E501

        :param correspondence_title: The correspondence_title of this Detail.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                correspondence_title is not None and len(correspondence_title) > 30):
            raise ValueError("Invalid value for `correspondence_title`, length must be less than or equal to `30`")  # noqa: E501

        self._correspondence_title = correspondence_title

    @property
    def national_right(self):
        """Gets the national_right of this Detail.  # noqa: E501

        Indicates which national law governs the provision of services to the addressee. Accounting may, for example, be carried out in accordance with Austrian law. It is currently possible to choose between German (DE) and Austrian (AT) law.  # noqa: E501

        :return: The national_right of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._national_right

    @national_right.setter
    def national_right(self, national_right):
        """Sets the national_right of this Detail.

        Indicates which national law governs the provision of services to the addressee. Accounting may, for example, be carried out in accordance with Austrian law. It is currently possible to choose between German (DE) and Austrian (AT) law.  # noqa: E501

        :param national_right: The national_right of this Detail.  # noqa: E501
        :type: str
        """
        allowed_values = ["DE", "AT"]  # noqa: E501
        if (self._configuration.client_side_validation and
                national_right not in allowed_values):
            raise ValueError(
                "Invalid value for `national_right` ({0}), must be one of {1}"  # noqa: E501
                .format(national_right, allowed_values)
            )

        self._national_right = national_right

    @property
    def note(self):
        """Gets the note of this Detail.  # noqa: E501

        Note about an addressee (free text).  # noqa: E501

        :return: The note of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this Detail.

        Note about an addressee (free text).  # noqa: E501

        :param note: The note of this Detail.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                note is not None and len(note) > 65535):
            raise ValueError("Invalid value for `note`, length must be less than or equal to `65535`")  # noqa: E501

        self._note = note

    @property
    def salutation(self):
        """Gets the salutation of this Detail.  # noqa: E501

        Enter the salutation for correspondence as you wish it to appear in letters. For example, \"Dear Ms. Sample,\". The salutation should therefore include both the name and the punctuation.  # noqa: E501

        :return: The salutation of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._salutation

    @salutation.setter
    def salutation(self, salutation):
        """Sets the salutation of this Detail.

        Enter the salutation for correspondence as you wish it to appear in letters. For example, \"Dear Ms. Sample,\". The salutation should therefore include both the name and the punctuation.  # noqa: E501

        :param salutation: The salutation of this Detail.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                salutation is not None and len(salutation) > 100):
            raise ValueError("Invalid value for `salutation`, length must be less than or equal to `100`")  # noqa: E501

        self._salutation = salutation

    @property
    def all_first_names(self):
        """Gets the all_first_names of this Detail.  # noqa: E501

        All first names of a natural person.<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :return: The all_first_names of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._all_first_names

    @all_first_names.setter
    def all_first_names(self, all_first_names):
        """Sets the all_first_names of this Detail.

        All first names of a natural person.<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :param all_first_names: The all_first_names of this Detail.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                all_first_names is not None and len(all_first_names) > 250):
            raise ValueError("Invalid value for `all_first_names`, length must be less than or equal to `250`")  # noqa: E501

        self._all_first_names = all_first_names

    @property
    def birth_name(self):
        """Gets the birth_name of this Detail.  # noqa: E501

        Birth name of a natural person.<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :return: The birth_name of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._birth_name

    @birth_name.setter
    def birth_name(self, birth_name):
        """Sets the birth_name of this Detail.

        Birth name of a natural person.<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :param birth_name: The birth_name of this Detail.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                birth_name is not None and len(birth_name) > 30):
            raise ValueError("Invalid value for `birth_name`, length must be less than or equal to `30`")  # noqa: E501

        self._birth_name = birth_name

    @property
    def considerations(self):
        """Gets the considerations of this Detail.  # noqa: E501

        The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :return: The considerations of this Detail.  # noqa: E501
        :rtype: list[Consideration]
        """
        return self._considerations

    @considerations.setter
    def considerations(self, considerations):
        """Sets the considerations of this Detail.

        The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :param considerations: The considerations of this Detail.  # noqa: E501
        :type: list[Consideration]
        """

        self._considerations = considerations

    @property
    def current_consideration(self):
        """Gets the current_consideration of this Detail.  # noqa: E501

        Current consideration of a natural person (= value as at system date).<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :return: The current_consideration of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._current_consideration

    @current_consideration.setter
    def current_consideration(self, current_consideration):
        """Sets the current_consideration of this Detail.

        Current consideration of a natural person (= value as at system date).<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :param current_consideration: The current_consideration of this Detail.  # noqa: E501
        :type: str
        """

        self._current_consideration = current_consideration

    @property
    def country_of_birth(self):
        """Gets the country_of_birth of this Detail.  # noqa: E501

        Country of birth of a natural person. The following values are permissible (AD = Andorra, AE = Vereinigte Arabische Emirate, AF = Afghanistan, AG = Antigua und Barbuda, AI = Anguilla, AL = Albanien, AM = Armenien, AN = Niederländische Antillen (bis 2010), AO = Angola, AQ = Antarktis, AR = Argentinien, AS = Amerikanisch-Samoa, AT = Österreich, AU = Australien, AW = Aruba, AX = Ålandinseln, AZ = Aserbaidschan, BA = Bosnien und Herzegowina, BB = Barbados, BD = Bangladesch, BE = Belgien, BF = Burkina Faso, BG = Bulgarien, BH = Bahrain, BI = Burundi, BJ = Benin, BL = St. Barthélemy, BM = Bermuda, BN = Brunei Darussalam, BO = Bolivie, Plurinationaler Staat, BQ = Bonaire, St. Eustatius und Saba, BR = Brasilien, BS = Bahamas, BT = Bhutan, BV = Bouvetinsel, BW = Botsuana, BY = Belarus, BZ = Belize, CA = Kanada, CC = Kokosinseln, CD = Kongo, Demokratische Republik, CF = Zentralafrikanische Republik, CG = Kongo, CH = Schweiz, CI = Cote d'Ivoire, CK = Cookinseln, CL = Chile, CM = Kamerun, CN = China, CO = Kolumbien, CR = Costa Rica, CS = Serbien und Montenegro (bis 2006), CU = Kuba, CV = Cabo Verde, CW = Curaçao, CX = Weihnachtsinsel, CY = Zypern, CZ = Tschechien, DE = Deutschland, DJ = Dschibuti, DK = Dänemark, DM = Dominica, DO = Dominikanische Republik, DZ = Algerien, EC = Ecuador, EE = Estland, EG = Ägypten, EH = Westsahara, ER = Eritrea, ES = Spanien, ET = Äthiopien, FI = Finnland, FJ = Fidschi, FK = Falklandinseln, FM = Mikronesien, Föderierte Staaten von, FO = Färöer, FR = Frankreich, GA = Gabun, GB = Großbritannien, GD = Grenada, GE = Georgien, GF = Französisch-Guayana, GG = Guernsey, GH = Ghana, GI = Gibraltar, GL = Grönland, GM = Gambia, GN = Guinea, GP = Guadeloupe, GQ = Äquatorialguinea, GR = Griechenland, GS = Südgeorgien und die Südlichen Sandwichinseln, GT = Guatemala, GU = Guam, GW = Guinea-Bissau, GY = Guyana, HK = Hongkong, HM = Heard und McDonaldinseln, HN = Honduras, HR = Kroatien, HT = Haiti, HU = Ungarn, ID = Indonesien, IE = Irland, IL = Israel, IM = Insel Man, IN = Indien, IO = Britisches Territorium im Indischen Ozean, IQ = Irak, IR = Iran, Islamische Republik, IS = Island, IT = Italien, JE = Jersey, JM = Jamaika, JO = Jordanien, JP = Japan, KE = Kenia, KG = Kirgisistan, KH = Kambodscha, KI = Kiribati, KM = Komoren, KN = St. Kitts und Nevis, KP = Korea, Demokratische Volksrepublik, KR = Korea, Republik, KW = Kuwait, KY = Kaimaninseln, KZ = Kasachstan, LA = Laos, Demokratische Volksrepublik, LB = Libanon, LC = St. Lucia, LI = Liechtenstein, LK = Sri Lanka, LR = Liberia, LS = Lesotho, LT = Litauen, LU = Luxemburg, LV = Lettland, LY = Libyen, MA = Marokko, MC = Monaco, MD = Moldau, Republik, ME = Montenegro, MF = St. Martin (französischer Teil), MG = Madagaskar, MH = Marshallinseln, MK =  Nordmazedonien, ML = Mali, MM = Myanmar, MN = Mongolei, MO = Macau, MP = Nördliche Marianen, MQ = Martinique, MR = Mauretanien, MS = Montserrat, MT = Malta, MU = Mauritius, MV = Malediven, MW = Malawi, MX = Mexiko, MY = Malaysia, MZ = Mosambik, NA = Namibia, NC = Neukaledonien, NE = Niger, NF = Norfolkinsel, NG = Nigeria, NI = Nicaragua, NL = Niederlande, NO = Norwegen, NP = Nepal, NR = Nauru, NU = Niue, NZ = Neuseeland, OM = Oman, PA = Panama, PE = Peru, PF = Französisch-Polynesien, PG = Papua-Neuguinea, PH = Philippinen, PK = Pakistan, PL = Polen, PM = St. Pierre und Miquelon, PN = Pitcairninseln, PR = Puerto Rico, PS = Palästinensische Gebiete, PT = Portugal, PW = Palau, PY = Paraguay, QA = Katar, RE = Réunion, RO = Rumänien, RS = Serbien, RU = Russische Föderation, RW = Ruanda, SA = Saudi-Arabien, SB = Salomonen, SC = Seychellen, SD = Sudan, SE = Schweden, SG = Singapur, SH = St. Helena, Ascension und Tristan da Cunha, SI = Slowenien, SJ = Svalbard und Jan Mayen, SK = Slowakei, SL = Sierra Leone, SM = San Marino, SN = Senegal, SO = Somalia, SR = Suriname, SS = Südsudan, ST = Sao Tomé und Principe, SV = El Salvador, SX = St. Martin (niederländischer Teil), SY = Syrien, Arabische Republik, SZ = Eswatini, TC = Turks- und Caicosinseln, TD = Tschad, TF = Französische Süd- und Antarktisgebiete, TG = Togo, TH = Thailand, TJ = Tadschikistan, TK = Tokelau, TL = Timor-Leste, TM = Turkmenistan, TN = Tunesien, TO = Tonga, TR = Türkei, TT = Trinidad und Tobago, TV = Tuvalu, TW = Taiwan, TZ = Tansania, Vereinigte Republik, UA = Ukraine, UG = Uganda, UM = Amerikanische Überseeinseln, Kleinere, US = Vereinigte Staaten von Amerika, UY = Uruguay, UZ = Usbekistan, VA = Vatikanstadt, VC = St. Vincent und die Grenadinen, VE = Venezuela, Bolivarische Republik, VG = Britische Jungferninseln, VI = Amerikanische Jungferninseln, VN = Vietnam, VU = Vanuatu, WF = Wallis und Futuna, WS = Samoa, XI = Nordirland, XK = Kosovo, YE = Jemen, YT = Mayotte, ZA = Südafrika, ZM = Sambia, ZW = Simbabwe).<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :return: The country_of_birth of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._country_of_birth

    @country_of_birth.setter
    def country_of_birth(self, country_of_birth):
        """Sets the country_of_birth of this Detail.

        Country of birth of a natural person. The following values are permissible (AD = Andorra, AE = Vereinigte Arabische Emirate, AF = Afghanistan, AG = Antigua und Barbuda, AI = Anguilla, AL = Albanien, AM = Armenien, AN = Niederländische Antillen (bis 2010), AO = Angola, AQ = Antarktis, AR = Argentinien, AS = Amerikanisch-Samoa, AT = Österreich, AU = Australien, AW = Aruba, AX = Ålandinseln, AZ = Aserbaidschan, BA = Bosnien und Herzegowina, BB = Barbados, BD = Bangladesch, BE = Belgien, BF = Burkina Faso, BG = Bulgarien, BH = Bahrain, BI = Burundi, BJ = Benin, BL = St. Barthélemy, BM = Bermuda, BN = Brunei Darussalam, BO = Bolivie, Plurinationaler Staat, BQ = Bonaire, St. Eustatius und Saba, BR = Brasilien, BS = Bahamas, BT = Bhutan, BV = Bouvetinsel, BW = Botsuana, BY = Belarus, BZ = Belize, CA = Kanada, CC = Kokosinseln, CD = Kongo, Demokratische Republik, CF = Zentralafrikanische Republik, CG = Kongo, CH = Schweiz, CI = Cote d'Ivoire, CK = Cookinseln, CL = Chile, CM = Kamerun, CN = China, CO = Kolumbien, CR = Costa Rica, CS = Serbien und Montenegro (bis 2006), CU = Kuba, CV = Cabo Verde, CW = Curaçao, CX = Weihnachtsinsel, CY = Zypern, CZ = Tschechien, DE = Deutschland, DJ = Dschibuti, DK = Dänemark, DM = Dominica, DO = Dominikanische Republik, DZ = Algerien, EC = Ecuador, EE = Estland, EG = Ägypten, EH = Westsahara, ER = Eritrea, ES = Spanien, ET = Äthiopien, FI = Finnland, FJ = Fidschi, FK = Falklandinseln, FM = Mikronesien, Föderierte Staaten von, FO = Färöer, FR = Frankreich, GA = Gabun, GB = Großbritannien, GD = Grenada, GE = Georgien, GF = Französisch-Guayana, GG = Guernsey, GH = Ghana, GI = Gibraltar, GL = Grönland, GM = Gambia, GN = Guinea, GP = Guadeloupe, GQ = Äquatorialguinea, GR = Griechenland, GS = Südgeorgien und die Südlichen Sandwichinseln, GT = Guatemala, GU = Guam, GW = Guinea-Bissau, GY = Guyana, HK = Hongkong, HM = Heard und McDonaldinseln, HN = Honduras, HR = Kroatien, HT = Haiti, HU = Ungarn, ID = Indonesien, IE = Irland, IL = Israel, IM = Insel Man, IN = Indien, IO = Britisches Territorium im Indischen Ozean, IQ = Irak, IR = Iran, Islamische Republik, IS = Island, IT = Italien, JE = Jersey, JM = Jamaika, JO = Jordanien, JP = Japan, KE = Kenia, KG = Kirgisistan, KH = Kambodscha, KI = Kiribati, KM = Komoren, KN = St. Kitts und Nevis, KP = Korea, Demokratische Volksrepublik, KR = Korea, Republik, KW = Kuwait, KY = Kaimaninseln, KZ = Kasachstan, LA = Laos, Demokratische Volksrepublik, LB = Libanon, LC = St. Lucia, LI = Liechtenstein, LK = Sri Lanka, LR = Liberia, LS = Lesotho, LT = Litauen, LU = Luxemburg, LV = Lettland, LY = Libyen, MA = Marokko, MC = Monaco, MD = Moldau, Republik, ME = Montenegro, MF = St. Martin (französischer Teil), MG = Madagaskar, MH = Marshallinseln, MK =  Nordmazedonien, ML = Mali, MM = Myanmar, MN = Mongolei, MO = Macau, MP = Nördliche Marianen, MQ = Martinique, MR = Mauretanien, MS = Montserrat, MT = Malta, MU = Mauritius, MV = Malediven, MW = Malawi, MX = Mexiko, MY = Malaysia, MZ = Mosambik, NA = Namibia, NC = Neukaledonien, NE = Niger, NF = Norfolkinsel, NG = Nigeria, NI = Nicaragua, NL = Niederlande, NO = Norwegen, NP = Nepal, NR = Nauru, NU = Niue, NZ = Neuseeland, OM = Oman, PA = Panama, PE = Peru, PF = Französisch-Polynesien, PG = Papua-Neuguinea, PH = Philippinen, PK = Pakistan, PL = Polen, PM = St. Pierre und Miquelon, PN = Pitcairninseln, PR = Puerto Rico, PS = Palästinensische Gebiete, PT = Portugal, PW = Palau, PY = Paraguay, QA = Katar, RE = Réunion, RO = Rumänien, RS = Serbien, RU = Russische Föderation, RW = Ruanda, SA = Saudi-Arabien, SB = Salomonen, SC = Seychellen, SD = Sudan, SE = Schweden, SG = Singapur, SH = St. Helena, Ascension und Tristan da Cunha, SI = Slowenien, SJ = Svalbard und Jan Mayen, SK = Slowakei, SL = Sierra Leone, SM = San Marino, SN = Senegal, SO = Somalia, SR = Suriname, SS = Südsudan, ST = Sao Tomé und Principe, SV = El Salvador, SX = St. Martin (niederländischer Teil), SY = Syrien, Arabische Republik, SZ = Eswatini, TC = Turks- und Caicosinseln, TD = Tschad, TF = Französische Süd- und Antarktisgebiete, TG = Togo, TH = Thailand, TJ = Tadschikistan, TK = Tokelau, TL = Timor-Leste, TM = Turkmenistan, TN = Tunesien, TO = Tonga, TR = Türkei, TT = Trinidad und Tobago, TV = Tuvalu, TW = Taiwan, TZ = Tansania, Vereinigte Republik, UA = Ukraine, UG = Uganda, UM = Amerikanische Überseeinseln, Kleinere, US = Vereinigte Staaten von Amerika, UY = Uruguay, UZ = Usbekistan, VA = Vatikanstadt, VC = St. Vincent und die Grenadinen, VE = Venezuela, Bolivarische Republik, VG = Britische Jungferninseln, VI = Amerikanische Jungferninseln, VN = Vietnam, VU = Vanuatu, WF = Wallis und Futuna, WS = Samoa, XI = Nordirland, XK = Kosovo, YE = Jemen, YT = Mayotte, ZA = Südafrika, ZM = Sambia, ZW = Simbabwe).<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :param country_of_birth: The country_of_birth of this Detail.  # noqa: E501
        :type: str
        """

        self._country_of_birth = country_of_birth

    @property
    def date_of_death(self):
        """Gets the date_of_death of this Detail.  # noqa: E501

        Date of death of a natural person.<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :return: The date_of_death of this Detail.  # noqa: E501
        :rtype: date
        """
        return self._date_of_death

    @date_of_death.setter
    def date_of_death(self, date_of_death):
        """Sets the date_of_death of this Detail.

        Date of death of a natural person.<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :param date_of_death: The date_of_death of this Detail.  # noqa: E501
        :type: date
        """

        self._date_of_death = date_of_death

    @property
    def date_of_expiry(self):
        """Gets the date_of_expiry of this Detail.  # noqa: E501

        Indicates the date until which the identity document is valid.<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :return: The date_of_expiry of this Detail.  # noqa: E501
        :rtype: date
        """
        return self._date_of_expiry

    @date_of_expiry.setter
    def date_of_expiry(self, date_of_expiry):
        """Sets the date_of_expiry of this Detail.

        Indicates the date until which the identity document is valid.<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :param date_of_expiry: The date_of_expiry of this Detail.  # noqa: E501
        :type: date
        """

        self._date_of_expiry = date_of_expiry

    @property
    def date_of_issue(self):
        """Gets the date_of_issue of this Detail.  # noqa: E501

        Indicates the date on which the issuing authority issued the identity document.<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :return: The date_of_issue of this Detail.  # noqa: E501
        :rtype: date
        """
        return self._date_of_issue

    @date_of_issue.setter
    def date_of_issue(self, date_of_issue):
        """Sets the date_of_issue of this Detail.

        Indicates the date on which the issuing authority issued the identity document.<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :param date_of_issue: The date_of_issue of this Detail.  # noqa: E501
        :type: date
        """

        self._date_of_issue = date_of_issue

    @property
    def degree(self):
        """Gets the degree of this Detail.  # noqa: E501

        This is either an academic degree acquired following a completed higher education program or an academic title awarded by a higher education institution.<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :return: The degree of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._degree

    @degree.setter
    def degree(self, degree):
        """Sets the degree of this Detail.

        This is either an academic degree acquired following a completed higher education program or an academic title awarded by a higher education institution.<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :param degree: The degree of this Detail.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                degree is not None and len(degree) > 25):
            raise ValueError("Invalid value for `degree`, length must be less than or equal to `25`")  # noqa: E501

        self._degree = degree

    @property
    def denominations(self):
        """Gets the denominations of this Detail.  # noqa: E501

        The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :return: The denominations of this Detail.  # noqa: E501
        :rtype: list[Denomination]
        """
        return self._denominations

    @denominations.setter
    def denominations(self, denominations):
        """Sets the denominations of this Detail.

        The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :param denominations: The denominations of this Detail.  # noqa: E501
        :type: list[Denomination]
        """

        self._denominations = denominations

    @property
    def current_denomination(self):
        """Gets the current_denomination of this Detail.  # noqa: E501

        Current denomination of a natural person (= value as at system date).<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :return: The current_denomination of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._current_denomination

    @current_denomination.setter
    def current_denomination(self, current_denomination):
        """Sets the current_denomination of this Detail.

        Current denomination of a natural person (= value as at system date).<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :param current_denomination: The current_denomination of this Detail.  # noqa: E501
        :type: str
        """

        self._current_denomination = current_denomination

    @property
    def federal_states_of_natural_person(self):
        """Gets the federal_states_of_natural_person of this Detail.  # noqa: E501

        The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :return: The federal_states_of_natural_person of this Detail.  # noqa: E501
        :rtype: list[FederalState]
        """
        return self._federal_states_of_natural_person

    @federal_states_of_natural_person.setter
    def federal_states_of_natural_person(self, federal_states_of_natural_person):
        """Sets the federal_states_of_natural_person of this Detail.

        The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :param federal_states_of_natural_person: The federal_states_of_natural_person of this Detail.  # noqa: E501
        :type: list[FederalState]
        """

        self._federal_states_of_natural_person = federal_states_of_natural_person

    @property
    def current_federal_state_of_natural_person(self):
        """Gets the current_federal_state_of_natural_person of this Detail.  # noqa: E501

        Current federal state of a natural person (= value as at system date).<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :return: The current_federal_state_of_natural_person of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._current_federal_state_of_natural_person

    @current_federal_state_of_natural_person.setter
    def current_federal_state_of_natural_person(self, current_federal_state_of_natural_person):
        """Sets the current_federal_state_of_natural_person of this Detail.

        Current federal state of a natural person (= value as at system date).<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :param current_federal_state_of_natural_person: The current_federal_state_of_natural_person of this Detail.  # noqa: E501
        :type: str
        """

        self._current_federal_state_of_natural_person = current_federal_state_of_natural_person

    @property
    def identification_number(self):
        """Gets the identification_number of this Detail.  # noqa: E501

        Unique identifier of an ID card or passport.<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :return: The identification_number of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._identification_number

    @identification_number.setter
    def identification_number(self, identification_number):
        """Sets the identification_number of this Detail.

        Unique identifier of an ID card or passport.<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :param identification_number: The identification_number of this Detail.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                identification_number is not None and len(identification_number) > 25):
            raise ValueError("Invalid value for `identification_number`, length must be less than or equal to `25`")  # noqa: E501

        self._identification_number = identification_number

    @property
    def issuing_authority(self):
        """Gets the issuing_authority of this Detail.  # noqa: E501

        The issuing authority that issued the identity document.<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :return: The issuing_authority of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._issuing_authority

    @issuing_authority.setter
    def issuing_authority(self, issuing_authority):
        """Sets the issuing_authority of this Detail.

        The issuing authority that issued the identity document.<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :param issuing_authority: The issuing_authority of this Detail.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                issuing_authority is not None and len(issuing_authority) > 50):
            raise ValueError("Invalid value for `issuing_authority`, length must be less than or equal to `50`")  # noqa: E501

        self._issuing_authority = issuing_authority

    @property
    def job_titles(self):
        """Gets the job_titles of this Detail.  # noqa: E501

        The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :return: The job_titles of this Detail.  # noqa: E501
        :rtype: list[JobTitle]
        """
        return self._job_titles

    @job_titles.setter
    def job_titles(self, job_titles):
        """Sets the job_titles of this Detail.

        The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :param job_titles: The job_titles of this Detail.  # noqa: E501
        :type: list[JobTitle]
        """

        self._job_titles = job_titles

    @property
    def current_job_title(self):
        """Gets the current_job_title of this Detail.  # noqa: E501

        Current profession of a natural person (= value as at system date).<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :return: The current_job_title of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._current_job_title

    @current_job_title.setter
    def current_job_title(self, current_job_title):
        """Sets the current_job_title of this Detail.

        Current profession of a natural person (= value as at system date).<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :param current_job_title: The current_job_title of this Detail.  # noqa: E501
        :type: str
        """

        self._current_job_title = current_job_title

    @property
    def marital_statuses(self):
        """Gets the marital_statuses of this Detail.  # noqa: E501

        The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :return: The marital_statuses of this Detail.  # noqa: E501
        :rtype: list[MaritalStatus]
        """
        return self._marital_statuses

    @marital_statuses.setter
    def marital_statuses(self, marital_statuses):
        """Sets the marital_statuses of this Detail.

        The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :param marital_statuses: The marital_statuses of this Detail.  # noqa: E501
        :type: list[MaritalStatus]
        """

        self._marital_statuses = marital_statuses

    @property
    def current_marital_status(self):
        """Gets the current_marital_status of this Detail.  # noqa: E501

        Current marital status of a natural person (= value as at system date).<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :return: The current_marital_status of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._current_marital_status

    @current_marital_status.setter
    def current_marital_status(self, current_marital_status):
        """Sets the current_marital_status of this Detail.

        Current marital status of a natural person (= value as at system date).<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :param current_marital_status: The current_marital_status of this Detail.  # noqa: E501
        :type: str
        """

        self._current_marital_status = current_marital_status

    @property
    def name_prefix(self):
        """Gets the name_prefix of this Detail.  # noqa: E501

        Prefixes include von, von und zu. The following values are permissible (a = a, aan de = aan de, aan den = aan den, al = al, am = am, an = an, an der = an der, auf = auf, auf dem = auf dem, auf der = auf der, auf m = auf m, auff m = auff m, aus = aus, aus dem = aus dem, aus den = aus den, aus der = aus der, b = b, bar = bar, be = be, bei = bei, bei der = bei der, beim = beim, ben = ben, bey = bey, bey der = bey der, Che = Che, Cid = Cid, d = d, d' = d', d. = d., da = da, da costa = da costa, da las = da las, da silva = da silva, dal = dal, dall = dall, dall' = dall', dalla = dalla, dalle = dalle, dallo = dallo, das = das, de = de, de la = de la, de las = de las, de le = de le, degli = degli, dei = dei, del = del, del coz = del coz, deli = deli, dell = dell, dell' = dell', della = della, delle = delle, delli = delli, dello = dello, den = den, der = der, des = des, di = di, dit = dit, do = do, Don = Don, dos = dos, dos Santos = dos Santos, du = du, dy = dy, el = el, g = g, gen = gen, Gil = Gil, gli = gli, Grosse = Grosse, i = i, im = im, in = in, in den = in den, in der = in der, in't = in't, kl = kl, kleine = kleine, l = l, l' = l', l. = l., la = la, le = le, lee = lee, li = li, lo = lo, m = m, Mac = Mac, mc = mc, o = o, o' = o', op = op, op de = op de, op den = op den, op gen = op gen, op het = op het, op ten = op ten, pla = pla, pro = pro, rr = rr, St. = St., t = t, te = te, ten = ten, ter = ter, Tho = Tho, Thom = Thom, Thum = Thum, to = to, Tom = Tom, Tor = Tor, tu = tu, tum = tum, unter = unter, unterm = unterm, v. = v., v. d. = v. d., v. dem = v. dem, v. den = v. den, v. der = v. der, van = van, van de = van de, van dem = van dem, van den = van den, van der = van der, van gen = van gen, van t = van t, vande = vande, vandem = vandem, vanden = vanden, vander = vander, ven = ven, vo = vo, vom = vom, vom und zu = vom und zu, von = von, von de = von de, von dem = von dem, von den = von den, von der = von der, von einem = von einem, von Mast = von Mast, von und zu = von und zu, von und zu der = von und zu der, von und zur = von und zur, von zum = von zum, vonde = vonde, vondem = vondem, vonden = vonden, vonder = vonder, vor = vor, vor dem = vor dem, vor den = vor den, vor der = vor der, vorm = vorm, vorn = vorn, y = y, y del = y del, zu = zu, zum = zum, zur = zur).<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :return: The name_prefix of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._name_prefix

    @name_prefix.setter
    def name_prefix(self, name_prefix):
        """Sets the name_prefix of this Detail.

        Prefixes include von, von und zu. The following values are permissible (a = a, aan de = aan de, aan den = aan den, al = al, am = am, an = an, an der = an der, auf = auf, auf dem = auf dem, auf der = auf der, auf m = auf m, auff m = auff m, aus = aus, aus dem = aus dem, aus den = aus den, aus der = aus der, b = b, bar = bar, be = be, bei = bei, bei der = bei der, beim = beim, ben = ben, bey = bey, bey der = bey der, Che = Che, Cid = Cid, d = d, d' = d', d. = d., da = da, da costa = da costa, da las = da las, da silva = da silva, dal = dal, dall = dall, dall' = dall', dalla = dalla, dalle = dalle, dallo = dallo, das = das, de = de, de la = de la, de las = de las, de le = de le, degli = degli, dei = dei, del = del, del coz = del coz, deli = deli, dell = dell, dell' = dell', della = della, delle = delle, delli = delli, dello = dello, den = den, der = der, des = des, di = di, dit = dit, do = do, Don = Don, dos = dos, dos Santos = dos Santos, du = du, dy = dy, el = el, g = g, gen = gen, Gil = Gil, gli = gli, Grosse = Grosse, i = i, im = im, in = in, in den = in den, in der = in der, in't = in't, kl = kl, kleine = kleine, l = l, l' = l', l. = l., la = la, le = le, lee = lee, li = li, lo = lo, m = m, Mac = Mac, mc = mc, o = o, o' = o', op = op, op de = op de, op den = op den, op gen = op gen, op het = op het, op ten = op ten, pla = pla, pro = pro, rr = rr, St. = St., t = t, te = te, ten = ten, ter = ter, Tho = Tho, Thom = Thom, Thum = Thum, to = to, Tom = Tom, Tor = Tor, tu = tu, tum = tum, unter = unter, unterm = unterm, v. = v., v. d. = v. d., v. dem = v. dem, v. den = v. den, v. der = v. der, van = van, van de = van de, van dem = van dem, van den = van den, van der = van der, van gen = van gen, van t = van t, vande = vande, vandem = vandem, vanden = vanden, vander = vander, ven = ven, vo = vo, vom = vom, vom und zu = vom und zu, von = von, von de = von de, von dem = von dem, von den = von den, von der = von der, von einem = von einem, von Mast = von Mast, von und zu = von und zu, von und zu der = von und zu der, von und zur = von und zur, von zum = von zum, vonde = vonde, vondem = vondem, vonden = vonden, vonder = vonder, vor = vor, vor dem = vor dem, vor den = vor den, vor der = vor der, vorm = vorm, vorn = vorn, y = y, y del = y del, zu = zu, zum = zum, zur = zur).<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :param name_prefix: The name_prefix of this Detail.  # noqa: E501
        :type: str
        """

        self._name_prefix = name_prefix

    @property
    def nationality(self):
        """Gets the nationality of this Detail.  # noqa: E501

        Nationality of a natural person. The following values are permissible (Afghanisch = Afghanisch, Ägyptisch = Ägyptisch, Albanisch = Albanisch, Algerisch = Algerisch, Amerikanisch = Amerikanisch, Andorranisch = Andorranisch, Angolanisch = Angolanisch, Antiguanisch = Antiguanisch, Äquatorialguineisch = Äquatorialguineisch, Argentinisch = Argentinisch, Armenisch = Armenisch, Aserbaidschanisch = Aserbaidschanisch, Äthiopisch = Äthiopisch, Australisch = Australisch, Bahamaisch = Bahamaisch, Bahrainisch = Bahrainisch, Bangladeschisch = Bangladeschisch, Barbadisch = Barbadisch, Belarussisch = Belarussisch, Belgisch = Belgisch, Belizisch = Belizisch, Beninisch = Beninisch, Bhutanisch = Bhutanisch, Bolivianisch = Bolivianisch, Bosnisch-herzegowinisch = Bosnisch-herzegowinisch, Botsuanisch = Botsuanisch, Brasilianisch = Brasilianisch, Britisch = Britisch, Bruneiisch = Bruneiisch, Bulgarisch = Bulgarisch, Burkinisch = Burkinisch, Burundisch = Burundisch, Chilenisch = Chilenisch, Chinesisch = Chinesisch, Costa-ricanisch = Costa-ricanisch, Dänisch = Dänisch, Deutsch = Deutsch, Dominicanisch = Dominicanisch, Dominikanisch = Dominikanisch, Dschibutisch = Dschibutisch, Ecuadorianisch = Ecuadorianisch, Eritreisch = Eritreisch, Estnisch = Estnisch, Fidschianisch = Fidschianisch, Finnisch = Finnisch, Französisch = Französisch, Gabunisch = Gabunisch, Gambisch = Gambisch, Georgisch = Georgisch, Ghanaisch = Ghanaisch, Grenadisch = Grenadisch, Griechisch = Griechisch, Guatemaltekisch = Guatemaltekisch, Guinea-bissauisch = Guinea-bissauisch, Guineisch = Guineisch, Guyanisch = Guyanisch, Haitianisch = Haitianisch, Honduranisch = Honduranisch, Indisch = Indisch, Indonesisch = Indonesisch, Irakisch = Irakisch, Iranisch = Iranisch, Irisch = Irisch, Isländisch = Isländisch, Israelisch = Israelisch, Italienisch = Italienisch, Ivorisch = Ivorisch, Jamaikanisch = Jamaikanisch, Japanisch = Japanisch, Jemenitisch = Jemenitisch, Jordanisch = Jordanisch, Kambodschanisch = Kambodschanisch, Kamerunisch = Kamerunisch, Kanadisch = Kanadisch, Kap-verdisch = Kap-verdisch, Kasachisch = Kasachisch, Katarisch = Katarisch, Kenianisch = Kenianisch, Kirgisisch = Kirgisisch, Kiribatisch = Kiribatisch, Kolumbianisch = Kolumbianisch, Komorisch = Komorisch, Kongolesisch = Kongolesisch, Koreanisch = Koreanisch, Kosovarisch = Kosovarisch, Kroatisch = Kroatisch, Kubanisch = Kubanisch, Kuwaitisch = Kuwaitisch, Laotisch = Laotisch, Lesothisch = Lesothisch, Lettisch = Lettisch, Libanesisch = Libanesisch, Liberianisch = Liberianisch, Libysch = Libysch, Liechtensteinisch = Liechtensteinisch, Litauisch = Litauisch, Lucianisch = Lucianisch, Luxemburgisch = Luxemburgisch, Madagassisch = Madagassisch, Malawisch = Malawisch, Malaysisch = Malaysisch, Maledivisch = Maledivisch, Malisch = Malisch, Maltesisch = Maltesisch, Marokkanisch = Marokkanisch, Marshallisch = Marshallisch, Mauretanisch = Mauretanisch, Mauritisch = Mauritisch, Mazedonisch = Mazedonisch, Mexikanisch = Mexikanisch, Mikronesisch = Mikronesisch, Moldauisch = Moldauisch, Monegassisch = Monegassisch, Mongolisch = Mongolisch, Montenegrinisch = Montenegrinisch, Mosambikanisch = Mosambikanisch, Myanmarisch = Myanmarisch, Namibisch = Namibisch, Nauruisch = Nauruisch, Nepalesisch = Nepalesisch, Neuseeländisch = Neuseeländisch, Nicaraguanisch = Nicaraguanisch, Niederländisch = Niederländisch, Nigerianisch = Nigerianisch, Nigrisch = Nigrisch, Niueanisch = Niueanisch, Norwegisch = Norwegisch, Omanisch = Omanisch, Österreichisch = Österreichisch, Pakistanisch = Pakistanisch, Palauisch = Palauisch, Panamaisch = Panamaisch, Papua-neuguineisch = Papua-neuguineisch, Paraguayisch = Paraguayisch, Peruanisch = Peruanisch, Philippinisch = Philippinisch, Polnisch = Polnisch, Portugiesisch = Portugiesisch, Ruandisch = Ruandisch, Rumänisch = Rumänisch, Russisch = Russisch, Salomonisch = Salomonisch, Salvadorianisch = Salvadorianisch, Sambisch = Sambisch, Samoanisch = Samoanisch, San-marinesisch = San-marinesisch, Sao-toméisch = Sao-toméisch, Saudi-arabisch = Saudi-arabisch, Schwedisch = Schwedisch, Schweizerisch = Schweizerisch, Senegalesisch = Senegalesisch, Serbisch = Serbisch, Serbisch-montenegrinisch = Serbisch-montenegrinisch, Seychellisch = Seychellisch, Sierra-leonisch = Sierra-leonisch, Simbabwisch = Simbabwisch, Singapurisch = Singapurisch, Slowakisch = Slowakisch, Slowenisch = Slowenisch, Somalisch = Somalisch, Spanisch = Spanisch, Sri-lankisch = Sri-lankisch, Südafrikanisch = Südafrikanisch, Sudanesisch = Sudanesisch, Südsudanesisch = Südsudanesisch, Surinamisch = Surinamisch, Swasiländisch = Swasiländisch, Syrisch = Syrisch, Tadschikisch = Tadschikisch, Taiwanisch = Taiwanisch, Tansanisch = Tansanisch, Thailändisch = Thailändisch, Timorisch = Timorisch, Togoisch = Togoisch, Tongaisch = Tongaisch, Tschadisch = Tschadisch, Tschechisch = Tschechisch, Tunesisch = Tunesisch, Türkisch = Türkisch, Turkmenisch = Turkmenisch, Tuvaluisch = Tuvaluisch, Ugandisch = Ugandisch, Ukrainisch = Ukrainisch, Ungarisch = Ungarisch, Uruguayisch = Uruguayisch, Usbekisch = Usbekisch, Vanuatuisch = Vanuatuisch, Vatikanisch = Vatikanisch, Venezolanisch = Venezolanisch, Vietnamesisch = Vietnamesisch, Vincentisch = Vincentisch, Zentralafrikanisch = Zentralafrikanisch, Zyprisch = Zyprisch).<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :return: The nationality of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this Detail.

        Nationality of a natural person. The following values are permissible (Afghanisch = Afghanisch, Ägyptisch = Ägyptisch, Albanisch = Albanisch, Algerisch = Algerisch, Amerikanisch = Amerikanisch, Andorranisch = Andorranisch, Angolanisch = Angolanisch, Antiguanisch = Antiguanisch, Äquatorialguineisch = Äquatorialguineisch, Argentinisch = Argentinisch, Armenisch = Armenisch, Aserbaidschanisch = Aserbaidschanisch, Äthiopisch = Äthiopisch, Australisch = Australisch, Bahamaisch = Bahamaisch, Bahrainisch = Bahrainisch, Bangladeschisch = Bangladeschisch, Barbadisch = Barbadisch, Belarussisch = Belarussisch, Belgisch = Belgisch, Belizisch = Belizisch, Beninisch = Beninisch, Bhutanisch = Bhutanisch, Bolivianisch = Bolivianisch, Bosnisch-herzegowinisch = Bosnisch-herzegowinisch, Botsuanisch = Botsuanisch, Brasilianisch = Brasilianisch, Britisch = Britisch, Bruneiisch = Bruneiisch, Bulgarisch = Bulgarisch, Burkinisch = Burkinisch, Burundisch = Burundisch, Chilenisch = Chilenisch, Chinesisch = Chinesisch, Costa-ricanisch = Costa-ricanisch, Dänisch = Dänisch, Deutsch = Deutsch, Dominicanisch = Dominicanisch, Dominikanisch = Dominikanisch, Dschibutisch = Dschibutisch, Ecuadorianisch = Ecuadorianisch, Eritreisch = Eritreisch, Estnisch = Estnisch, Fidschianisch = Fidschianisch, Finnisch = Finnisch, Französisch = Französisch, Gabunisch = Gabunisch, Gambisch = Gambisch, Georgisch = Georgisch, Ghanaisch = Ghanaisch, Grenadisch = Grenadisch, Griechisch = Griechisch, Guatemaltekisch = Guatemaltekisch, Guinea-bissauisch = Guinea-bissauisch, Guineisch = Guineisch, Guyanisch = Guyanisch, Haitianisch = Haitianisch, Honduranisch = Honduranisch, Indisch = Indisch, Indonesisch = Indonesisch, Irakisch = Irakisch, Iranisch = Iranisch, Irisch = Irisch, Isländisch = Isländisch, Israelisch = Israelisch, Italienisch = Italienisch, Ivorisch = Ivorisch, Jamaikanisch = Jamaikanisch, Japanisch = Japanisch, Jemenitisch = Jemenitisch, Jordanisch = Jordanisch, Kambodschanisch = Kambodschanisch, Kamerunisch = Kamerunisch, Kanadisch = Kanadisch, Kap-verdisch = Kap-verdisch, Kasachisch = Kasachisch, Katarisch = Katarisch, Kenianisch = Kenianisch, Kirgisisch = Kirgisisch, Kiribatisch = Kiribatisch, Kolumbianisch = Kolumbianisch, Komorisch = Komorisch, Kongolesisch = Kongolesisch, Koreanisch = Koreanisch, Kosovarisch = Kosovarisch, Kroatisch = Kroatisch, Kubanisch = Kubanisch, Kuwaitisch = Kuwaitisch, Laotisch = Laotisch, Lesothisch = Lesothisch, Lettisch = Lettisch, Libanesisch = Libanesisch, Liberianisch = Liberianisch, Libysch = Libysch, Liechtensteinisch = Liechtensteinisch, Litauisch = Litauisch, Lucianisch = Lucianisch, Luxemburgisch = Luxemburgisch, Madagassisch = Madagassisch, Malawisch = Malawisch, Malaysisch = Malaysisch, Maledivisch = Maledivisch, Malisch = Malisch, Maltesisch = Maltesisch, Marokkanisch = Marokkanisch, Marshallisch = Marshallisch, Mauretanisch = Mauretanisch, Mauritisch = Mauritisch, Mazedonisch = Mazedonisch, Mexikanisch = Mexikanisch, Mikronesisch = Mikronesisch, Moldauisch = Moldauisch, Monegassisch = Monegassisch, Mongolisch = Mongolisch, Montenegrinisch = Montenegrinisch, Mosambikanisch = Mosambikanisch, Myanmarisch = Myanmarisch, Namibisch = Namibisch, Nauruisch = Nauruisch, Nepalesisch = Nepalesisch, Neuseeländisch = Neuseeländisch, Nicaraguanisch = Nicaraguanisch, Niederländisch = Niederländisch, Nigerianisch = Nigerianisch, Nigrisch = Nigrisch, Niueanisch = Niueanisch, Norwegisch = Norwegisch, Omanisch = Omanisch, Österreichisch = Österreichisch, Pakistanisch = Pakistanisch, Palauisch = Palauisch, Panamaisch = Panamaisch, Papua-neuguineisch = Papua-neuguineisch, Paraguayisch = Paraguayisch, Peruanisch = Peruanisch, Philippinisch = Philippinisch, Polnisch = Polnisch, Portugiesisch = Portugiesisch, Ruandisch = Ruandisch, Rumänisch = Rumänisch, Russisch = Russisch, Salomonisch = Salomonisch, Salvadorianisch = Salvadorianisch, Sambisch = Sambisch, Samoanisch = Samoanisch, San-marinesisch = San-marinesisch, Sao-toméisch = Sao-toméisch, Saudi-arabisch = Saudi-arabisch, Schwedisch = Schwedisch, Schweizerisch = Schweizerisch, Senegalesisch = Senegalesisch, Serbisch = Serbisch, Serbisch-montenegrinisch = Serbisch-montenegrinisch, Seychellisch = Seychellisch, Sierra-leonisch = Sierra-leonisch, Simbabwisch = Simbabwisch, Singapurisch = Singapurisch, Slowakisch = Slowakisch, Slowenisch = Slowenisch, Somalisch = Somalisch, Spanisch = Spanisch, Sri-lankisch = Sri-lankisch, Südafrikanisch = Südafrikanisch, Sudanesisch = Sudanesisch, Südsudanesisch = Südsudanesisch, Surinamisch = Surinamisch, Swasiländisch = Swasiländisch, Syrisch = Syrisch, Tadschikisch = Tadschikisch, Taiwanisch = Taiwanisch, Tansanisch = Tansanisch, Thailändisch = Thailändisch, Timorisch = Timorisch, Togoisch = Togoisch, Tongaisch = Tongaisch, Tschadisch = Tschadisch, Tschechisch = Tschechisch, Tunesisch = Tunesisch, Türkisch = Türkisch, Turkmenisch = Turkmenisch, Tuvaluisch = Tuvaluisch, Ugandisch = Ugandisch, Ukrainisch = Ukrainisch, Ungarisch = Ungarisch, Uruguayisch = Uruguayisch, Usbekisch = Usbekisch, Vanuatuisch = Vanuatuisch, Vatikanisch = Vatikanisch, Venezolanisch = Venezolanisch, Vietnamesisch = Vietnamesisch, Vincentisch = Vincentisch, Zentralafrikanisch = Zentralafrikanisch, Zyprisch = Zyprisch).<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :param nationality: The nationality of this Detail.  # noqa: E501
        :type: str
        """

        self._nationality = nationality

    @property
    def paper_of_identity(self):
        """Gets the paper_of_identity of this Detail.  # noqa: E501

        Indicates the way in which identity has been confirmed. The following values are permissible (EZ = Erkennungszeuge, FS = Führerschein, PA = Personalausweis, PB = Persönliche Bekanntschaft, RP = Reisepass, SA = Sonstiger Ausweis, SK = Besondere Sachkunde, UK = Urkunde, IN = Elektronischer Identitätsnachweis, ES = Qualifizierte elektronische Signatur, IS = Elektronisches Identifizierungssystem).<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :return: The paper_of_identity of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._paper_of_identity

    @paper_of_identity.setter
    def paper_of_identity(self, paper_of_identity):
        """Sets the paper_of_identity of this Detail.

        Indicates the way in which identity has been confirmed. The following values are permissible (EZ = Erkennungszeuge, FS = Führerschein, PA = Personalausweis, PB = Persönliche Bekanntschaft, RP = Reisepass, SA = Sonstiger Ausweis, SK = Besondere Sachkunde, UK = Urkunde, IN = Elektronischer Identitätsnachweis, ES = Qualifizierte elektronische Signatur, IS = Elektronisches Identifizierungssystem).<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :param paper_of_identity: The paper_of_identity of this Detail.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                paper_of_identity is not None and len(paper_of_identity) > 2):
            raise ValueError("Invalid value for `paper_of_identity`, length must be less than or equal to `2`")  # noqa: E501

        self._paper_of_identity = paper_of_identity

    @property
    def pension_insurance_institute(self):
        """Gets the pension_insurance_institute of this Detail.  # noqa: E501

        Pension insurance institute is the name of the insurer/organization with which a natural person holds a pension.<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :return: The pension_insurance_institute of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._pension_insurance_institute

    @pension_insurance_institute.setter
    def pension_insurance_institute(self, pension_insurance_institute):
        """Sets the pension_insurance_institute of this Detail.

        Pension insurance institute is the name of the insurer/organization with which a natural person holds a pension.<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :param pension_insurance_institute: The pension_insurance_institute of this Detail.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                pension_insurance_institute is not None and len(pension_insurance_institute) > 20):
            raise ValueError("Invalid value for `pension_insurance_institute`, length must be less than or equal to `20`")  # noqa: E501

        self._pension_insurance_institute = pension_insurance_institute

    @property
    def place_of_birth(self):
        """Gets the place_of_birth of this Detail.  # noqa: E501

        Place of birth of a natural person.<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :return: The place_of_birth of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._place_of_birth

    @place_of_birth.setter
    def place_of_birth(self, place_of_birth):
        """Sets the place_of_birth of this Detail.

        Place of birth of a natural person.<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :param place_of_birth: The place_of_birth of this Detail.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                place_of_birth is not None and len(place_of_birth) > 30):
            raise ValueError("Invalid value for `place_of_birth`, length must be less than or equal to `30`")  # noqa: E501

        self._place_of_birth = place_of_birth

    @property
    def register_of_births_number(self):
        """Gets the register_of_births_number of this Detail.  # noqa: E501

        Number issued by the register office when a child is born. It appears on the person’s birth certificate.<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :return: The register_of_births_number of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._register_of_births_number

    @register_of_births_number.setter
    def register_of_births_number(self, register_of_births_number):
        """Sets the register_of_births_number of this Detail.

        Number issued by the register office when a child is born. It appears on the person’s birth certificate.<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :param register_of_births_number: The register_of_births_number of this Detail.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                register_of_births_number is not None and len(register_of_births_number) > 13):
            raise ValueError("Invalid value for `register_of_births_number`, length must be less than or equal to `13`")  # noqa: E501

        self._register_of_births_number = register_of_births_number

    @property
    def register_office_of_birth(self):
        """Gets the register_office_of_birth of this Detail.  # noqa: E501

        Register office where a natural person’s birth was registered.<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :return: The register_office_of_birth of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._register_office_of_birth

    @register_office_of_birth.setter
    def register_office_of_birth(self, register_office_of_birth):
        """Sets the register_office_of_birth of this Detail.

        Register office where a natural person’s birth was registered.<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :param register_office_of_birth: The register_office_of_birth of this Detail.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                register_office_of_birth is not None and len(register_office_of_birth) > 50):
            raise ValueError("Invalid value for `register_office_of_birth`, length must be less than or equal to `50`")  # noqa: E501

        self._register_office_of_birth = register_office_of_birth

    @property
    def social_security_number(self):
        """Gets the social_security_number of this Detail.  # noqa: E501

        Unique social security number. The maximum length depends on the national law applicable to the natural person. If national_right='DE', the max. length is 12 characters. If national_right='AT', the max. length is 13 characters.<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :return: The social_security_number of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._social_security_number

    @social_security_number.setter
    def social_security_number(self, social_security_number):
        """Sets the social_security_number of this Detail.

        Unique social security number. The maximum length depends on the national law applicable to the natural person. If national_right='DE', the max. length is 12 characters. If national_right='AT', the max. length is 13 characters.<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :param social_security_number: The social_security_number of this Detail.  # noqa: E501
        :type: str
        """

        self._social_security_number = social_security_number

    @property
    def title_of_nobility(self):
        """Gets the title_of_nobility of this Detail.  # noqa: E501

        a title of nobility is the hereditary title of a group of natural persons. Such titles conferred certain privileges in former times. The following values are permissible (Baron = Baron, Baronesse = Baronesse, Baronin = Baronin, Brand = Brand, Condesa = Condesa, Earl = Earl, Edle = Edle, Edler = Edler, Erbgräfin = Erbgräfin, Erbgraf = Erbgraf, Erbprinz = Erbprinz, Erbprinzessin = Erbprinzessin, Freifrau = Freifrau, Freiherr = Freiherr, Freiin = Freiin, Fürst = Fürst, Fürstin = Fürstin, Graf = Graf, Gräfin = Gräfin, Großherzog = Großherzog, Großherzogin = Großherzogin, Herzog = Herzog, Herzogin = Herzogin, Landgraf = Landgraf, Landgräfin = Landgräfin, Marques = Marques, Marquis = Marquis, Marschall = Marschall, Ostoja = Ostoja, Prinz = Prinz, Prinzessin = Prinzessin, Reichsgraf = Reichsgraf, Reichsgräfin = Reichsgräfin, Ritter = Ritter, Truchsess = Truchsess).<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :return: The title_of_nobility of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._title_of_nobility

    @title_of_nobility.setter
    def title_of_nobility(self, title_of_nobility):
        """Sets the title_of_nobility of this Detail.

        a title of nobility is the hereditary title of a group of natural persons. Such titles conferred certain privileges in former times. The following values are permissible (Baron = Baron, Baronesse = Baronesse, Baronin = Baronin, Brand = Brand, Condesa = Condesa, Earl = Earl, Edle = Edle, Edler = Edler, Erbgräfin = Erbgräfin, Erbgraf = Erbgraf, Erbprinz = Erbprinz, Erbprinzessin = Erbprinzessin, Freifrau = Freifrau, Freiherr = Freiherr, Freiin = Freiin, Fürst = Fürst, Fürstin = Fürstin, Graf = Graf, Gräfin = Gräfin, Großherzog = Großherzog, Großherzogin = Großherzogin, Herzog = Herzog, Herzogin = Herzogin, Landgraf = Landgraf, Landgräfin = Landgräfin, Marques = Marques, Marquis = Marquis, Marschall = Marschall, Ostoja = Ostoja, Prinz = Prinz, Prinzessin = Prinzessin, Reichsgraf = Reichsgraf, Reichsgräfin = Reichsgräfin, Ritter = Ritter, Truchsess = Truchsess).<br><br>The property may only be filled if the addressee is of the type 'natural_person'.  # noqa: E501

        :param title_of_nobility: The title_of_nobility of this Detail.  # noqa: E501
        :type: str
        """

        self._title_of_nobility = title_of_nobility

    @property
    def codes_of_classification_of_economic_activities_2008(self):
        """Gets the codes_of_classification_of_economic_activities_2008 of this Detail.  # noqa: E501


        :return: The codes_of_classification_of_economic_activities_2008 of this Detail.  # noqa: E501
        :rtype: list[CodeOfClassificationOfEconomicActivities2008]
        """
        return self._codes_of_classification_of_economic_activities_2008

    @codes_of_classification_of_economic_activities_2008.setter
    def codes_of_classification_of_economic_activities_2008(self, codes_of_classification_of_economic_activities_2008):
        """Sets the codes_of_classification_of_economic_activities_2008 of this Detail.


        :param codes_of_classification_of_economic_activities_2008: The codes_of_classification_of_economic_activities_2008 of this Detail.  # noqa: E501
        :type: list[CodeOfClassificationOfEconomicActivities2008]
        """

        self._codes_of_classification_of_economic_activities_2008 = codes_of_classification_of_economic_activities_2008

    @property
    def current_code_of_classification_of_economic_activities_2008(self):
        """Gets the current_code_of_classification_of_economic_activities_2008 of this Detail.  # noqa: E501

        Current (= value as at system date) code of classification of economic activities as per the 2008 classification.  # noqa: E501

        :return: The current_code_of_classification_of_economic_activities_2008 of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._current_code_of_classification_of_economic_activities_2008

    @current_code_of_classification_of_economic_activities_2008.setter
    def current_code_of_classification_of_economic_activities_2008(self, current_code_of_classification_of_economic_activities_2008):
        """Sets the current_code_of_classification_of_economic_activities_2008 of this Detail.

        Current (= value as at system date) code of classification of economic activities as per the 2008 classification.  # noqa: E501

        :param current_code_of_classification_of_economic_activities_2008: The current_code_of_classification_of_economic_activities_2008 of this Detail.  # noqa: E501
        :type: str
        """

        self._current_code_of_classification_of_economic_activities_2008 = current_code_of_classification_of_economic_activities_2008

    @property
    def descriptions_of_classification_of_economic_activities_2008(self):
        """Gets the descriptions_of_classification_of_economic_activities_2008 of this Detail.  # noqa: E501


        :return: The descriptions_of_classification_of_economic_activities_2008 of this Detail.  # noqa: E501
        :rtype: list[DescriptionOfClassificationOfEconomicActivities2008]
        """
        return self._descriptions_of_classification_of_economic_activities_2008

    @descriptions_of_classification_of_economic_activities_2008.setter
    def descriptions_of_classification_of_economic_activities_2008(self, descriptions_of_classification_of_economic_activities_2008):
        """Sets the descriptions_of_classification_of_economic_activities_2008 of this Detail.


        :param descriptions_of_classification_of_economic_activities_2008: The descriptions_of_classification_of_economic_activities_2008 of this Detail.  # noqa: E501
        :type: list[DescriptionOfClassificationOfEconomicActivities2008]
        """

        self._descriptions_of_classification_of_economic_activities_2008 = descriptions_of_classification_of_economic_activities_2008

    @property
    def current_description_of_classification_of_economic_activities_2008(self):
        """Gets the current_description_of_classification_of_economic_activities_2008 of this Detail.  # noqa: E501

        Current (= value as at system date) description of classification of economic activities as per the 2008 classification.  # noqa: E501

        :return: The current_description_of_classification_of_economic_activities_2008 of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._current_description_of_classification_of_economic_activities_2008

    @current_description_of_classification_of_economic_activities_2008.setter
    def current_description_of_classification_of_economic_activities_2008(self, current_description_of_classification_of_economic_activities_2008):
        """Sets the current_description_of_classification_of_economic_activities_2008 of this Detail.

        Current (= value as at system date) description of classification of economic activities as per the 2008 classification.  # noqa: E501

        :param current_description_of_classification_of_economic_activities_2008: The current_description_of_classification_of_economic_activities_2008 of this Detail.  # noqa: E501
        :type: str
        """

        self._current_description_of_classification_of_economic_activities_2008 = current_description_of_classification_of_economic_activities_2008

    @property
    def mad_codes_of_classification_of_economic_activities_2008(self):
        """Gets the mad_codes_of_classification_of_economic_activities_2008 of this Detail.  # noqa: E501


        :return: The mad_codes_of_classification_of_economic_activities_2008 of this Detail.  # noqa: E501
        :rtype: list[MADCodeOfClassificationOfEconomicActivities2008]
        """
        return self._mad_codes_of_classification_of_economic_activities_2008

    @mad_codes_of_classification_of_economic_activities_2008.setter
    def mad_codes_of_classification_of_economic_activities_2008(self, mad_codes_of_classification_of_economic_activities_2008):
        """Sets the mad_codes_of_classification_of_economic_activities_2008 of this Detail.


        :param mad_codes_of_classification_of_economic_activities_2008: The mad_codes_of_classification_of_economic_activities_2008 of this Detail.  # noqa: E501
        :type: list[MADCodeOfClassificationOfEconomicActivities2008]
        """

        self._mad_codes_of_classification_of_economic_activities_2008 = mad_codes_of_classification_of_economic_activities_2008

    @property
    def current_mad_code_of_classification_of_economic_activities_2008(self):
        """Gets the current_mad_code_of_classification_of_economic_activities_2008 of this Detail.  # noqa: E501

        Current (= value as at system date) code (MAD) of classification of economic activities as per the 2008 classification..  # noqa: E501

        :return: The current_mad_code_of_classification_of_economic_activities_2008 of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._current_mad_code_of_classification_of_economic_activities_2008

    @current_mad_code_of_classification_of_economic_activities_2008.setter
    def current_mad_code_of_classification_of_economic_activities_2008(self, current_mad_code_of_classification_of_economic_activities_2008):
        """Sets the current_mad_code_of_classification_of_economic_activities_2008 of this Detail.

        Current (= value as at system date) code (MAD) of classification of economic activities as per the 2008 classification..  # noqa: E501

        :param current_mad_code_of_classification_of_economic_activities_2008: The current_mad_code_of_classification_of_economic_activities_2008 of this Detail.  # noqa: E501
        :type: str
        """

        self._current_mad_code_of_classification_of_economic_activities_2008 = current_mad_code_of_classification_of_economic_activities_2008

    @property
    def codes_of_classification_of_economic_activities_2003(self):
        """Gets the codes_of_classification_of_economic_activities_2003 of this Detail.  # noqa: E501


        :return: The codes_of_classification_of_economic_activities_2003 of this Detail.  # noqa: E501
        :rtype: list[CodeOfClassificationOfEconomicActivities2003]
        """
        return self._codes_of_classification_of_economic_activities_2003

    @codes_of_classification_of_economic_activities_2003.setter
    def codes_of_classification_of_economic_activities_2003(self, codes_of_classification_of_economic_activities_2003):
        """Sets the codes_of_classification_of_economic_activities_2003 of this Detail.


        :param codes_of_classification_of_economic_activities_2003: The codes_of_classification_of_economic_activities_2003 of this Detail.  # noqa: E501
        :type: list[CodeOfClassificationOfEconomicActivities2003]
        """

        self._codes_of_classification_of_economic_activities_2003 = codes_of_classification_of_economic_activities_2003

    @property
    def current_code_of_classification_of_economic_activities_2003(self):
        """Gets the current_code_of_classification_of_economic_activities_2003 of this Detail.  # noqa: E501

        Current (= value as at system date) code of classification of economic activities as per the 2003 classification.  # noqa: E501

        :return: The current_code_of_classification_of_economic_activities_2003 of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._current_code_of_classification_of_economic_activities_2003

    @current_code_of_classification_of_economic_activities_2003.setter
    def current_code_of_classification_of_economic_activities_2003(self, current_code_of_classification_of_economic_activities_2003):
        """Sets the current_code_of_classification_of_economic_activities_2003 of this Detail.

        Current (= value as at system date) code of classification of economic activities as per the 2003 classification.  # noqa: E501

        :param current_code_of_classification_of_economic_activities_2003: The current_code_of_classification_of_economic_activities_2003 of this Detail.  # noqa: E501
        :type: str
        """

        self._current_code_of_classification_of_economic_activities_2003 = current_code_of_classification_of_economic_activities_2003

    @property
    def descriptions_of_classification_of_economic_activities_2003(self):
        """Gets the descriptions_of_classification_of_economic_activities_2003 of this Detail.  # noqa: E501


        :return: The descriptions_of_classification_of_economic_activities_2003 of this Detail.  # noqa: E501
        :rtype: list[DescriptionOfClassificationOfEconomicActivities2003]
        """
        return self._descriptions_of_classification_of_economic_activities_2003

    @descriptions_of_classification_of_economic_activities_2003.setter
    def descriptions_of_classification_of_economic_activities_2003(self, descriptions_of_classification_of_economic_activities_2003):
        """Sets the descriptions_of_classification_of_economic_activities_2003 of this Detail.


        :param descriptions_of_classification_of_economic_activities_2003: The descriptions_of_classification_of_economic_activities_2003 of this Detail.  # noqa: E501
        :type: list[DescriptionOfClassificationOfEconomicActivities2003]
        """

        self._descriptions_of_classification_of_economic_activities_2003 = descriptions_of_classification_of_economic_activities_2003

    @property
    def current_description_of_classification_of_economic_activities_2003(self):
        """Gets the current_description_of_classification_of_economic_activities_2003 of this Detail.  # noqa: E501

        Current (= value as at system date) description of classification of economic activities as per the 2003 classification.  # noqa: E501

        :return: The current_description_of_classification_of_economic_activities_2003 of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._current_description_of_classification_of_economic_activities_2003

    @current_description_of_classification_of_economic_activities_2003.setter
    def current_description_of_classification_of_economic_activities_2003(self, current_description_of_classification_of_economic_activities_2003):
        """Sets the current_description_of_classification_of_economic_activities_2003 of this Detail.

        Current (= value as at system date) description of classification of economic activities as per the 2003 classification.  # noqa: E501

        :param current_description_of_classification_of_economic_activities_2003: The current_description_of_classification_of_economic_activities_2003 of this Detail.  # noqa: E501
        :type: str
        """

        self._current_description_of_classification_of_economic_activities_2003 = current_description_of_classification_of_economic_activities_2003

    @property
    def mad_codes_of_classification_of_economic_activities_2003(self):
        """Gets the mad_codes_of_classification_of_economic_activities_2003 of this Detail.  # noqa: E501


        :return: The mad_codes_of_classification_of_economic_activities_2003 of this Detail.  # noqa: E501
        :rtype: list[MADCodeOfClassificationOfEconomicActivities2003]
        """
        return self._mad_codes_of_classification_of_economic_activities_2003

    @mad_codes_of_classification_of_economic_activities_2003.setter
    def mad_codes_of_classification_of_economic_activities_2003(self, mad_codes_of_classification_of_economic_activities_2003):
        """Sets the mad_codes_of_classification_of_economic_activities_2003 of this Detail.


        :param mad_codes_of_classification_of_economic_activities_2003: The mad_codes_of_classification_of_economic_activities_2003 of this Detail.  # noqa: E501
        :type: list[MADCodeOfClassificationOfEconomicActivities2003]
        """

        self._mad_codes_of_classification_of_economic_activities_2003 = mad_codes_of_classification_of_economic_activities_2003

    @property
    def current_mad_code_of_classification_of_economic_activities_2003(self):
        """Gets the current_mad_code_of_classification_of_economic_activities_2003 of this Detail.  # noqa: E501

        Current (= value as at system date) code (MAD) of classification of economic activities as per the 2003 classification.  # noqa: E501

        :return: The current_mad_code_of_classification_of_economic_activities_2003 of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._current_mad_code_of_classification_of_economic_activities_2003

    @current_mad_code_of_classification_of_economic_activities_2003.setter
    def current_mad_code_of_classification_of_economic_activities_2003(self, current_mad_code_of_classification_of_economic_activities_2003):
        """Sets the current_mad_code_of_classification_of_economic_activities_2003 of this Detail.

        Current (= value as at system date) code (MAD) of classification of economic activities as per the 2003 classification.  # noqa: E501

        :param current_mad_code_of_classification_of_economic_activities_2003: The current_mad_code_of_classification_of_economic_activities_2003 of this Detail.  # noqa: E501
        :type: str
        """

        self._current_mad_code_of_classification_of_economic_activities_2003 = current_mad_code_of_classification_of_economic_activities_2003

    @property
    def countries_of_head_office(self):
        """Gets the countries_of_head_office of this Detail.  # noqa: E501

        The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :return: The countries_of_head_office of this Detail.  # noqa: E501
        :rtype: list[CountryOfHeadOffice]
        """
        return self._countries_of_head_office

    @countries_of_head_office.setter
    def countries_of_head_office(self, countries_of_head_office):
        """Sets the countries_of_head_office of this Detail.

        The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :param countries_of_head_office: The countries_of_head_office of this Detail.  # noqa: E501
        :type: list[CountryOfHeadOffice]
        """

        self._countries_of_head_office = countries_of_head_office

    @property
    def current_country_of_head_office(self):
        """Gets the current_country_of_head_office of this Detail.  # noqa: E501

        Current country of head office (= value as at system date).<br><br>The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :return: The current_country_of_head_office of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._current_country_of_head_office

    @current_country_of_head_office.setter
    def current_country_of_head_office(self, current_country_of_head_office):
        """Sets the current_country_of_head_office of this Detail.

        Current country of head office (= value as at system date).<br><br>The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :param current_country_of_head_office: The current_country_of_head_office of this Detail.  # noqa: E501
        :type: str
        """

        self._current_country_of_head_office = current_country_of_head_office

    @property
    def date_of_memorandum_of_association(self):
        """Gets the date_of_memorandum_of_association of this Detail.  # noqa: E501

        Indicates the date of the memorandum of association.<br><br>The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :return: The date_of_memorandum_of_association of this Detail.  # noqa: E501
        :rtype: date
        """
        return self._date_of_memorandum_of_association

    @date_of_memorandum_of_association.setter
    def date_of_memorandum_of_association(self, date_of_memorandum_of_association):
        """Sets the date_of_memorandum_of_association of this Detail.

        Indicates the date of the memorandum of association.<br><br>The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :param date_of_memorandum_of_association: The date_of_memorandum_of_association of this Detail.  # noqa: E501
        :type: date
        """

        self._date_of_memorandum_of_association = date_of_memorandum_of_association

    @property
    def distributions_of_profit(self):
        """Gets the distributions_of_profit of this Detail.  # noqa: E501

        The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :return: The distributions_of_profit of this Detail.  # noqa: E501
        :rtype: list[DistributionOfProfit]
        """
        return self._distributions_of_profit

    @distributions_of_profit.setter
    def distributions_of_profit(self, distributions_of_profit):
        """Sets the distributions_of_profit of this Detail.

        The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :param distributions_of_profit: The distributions_of_profit of this Detail.  # noqa: E501
        :type: list[DistributionOfProfit]
        """

        self._distributions_of_profit = distributions_of_profit

    @property
    def current_distribution_of_profit(self):
        """Gets the current_distribution_of_profit of this Detail.  # noqa: E501

        Current profit distribution method of the enterprise (= value as at system date).<br><br>The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :return: The current_distribution_of_profit of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._current_distribution_of_profit

    @current_distribution_of_profit.setter
    def current_distribution_of_profit(self, current_distribution_of_profit):
        """Sets the current_distribution_of_profit of this Detail.

        Current profit distribution method of the enterprise (= value as at system date).<br><br>The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :param current_distribution_of_profit: The current_distribution_of_profit of this Detail.  # noqa: E501
        :type: str
        """

        self._current_distribution_of_profit = current_distribution_of_profit

    @property
    def enterprise_purposes(self):
        """Gets the enterprise_purposes of this Detail.  # noqa: E501

        The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :return: The enterprise_purposes of this Detail.  # noqa: E501
        :rtype: list[EnterprisePurpose]
        """
        return self._enterprise_purposes

    @enterprise_purposes.setter
    def enterprise_purposes(self, enterprise_purposes):
        """Sets the enterprise_purposes of this Detail.

        The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :param enterprise_purposes: The enterprise_purposes of this Detail.  # noqa: E501
        :type: list[EnterprisePurpose]
        """

        self._enterprise_purposes = enterprise_purposes

    @property
    def current_enterprise_purpose(self):
        """Gets the current_enterprise_purpose of this Detail.  # noqa: E501

        Current enterprise purpose (= value as at system date).<br><br>The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :return: The current_enterprise_purpose of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._current_enterprise_purpose

    @current_enterprise_purpose.setter
    def current_enterprise_purpose(self, current_enterprise_purpose):
        """Sets the current_enterprise_purpose of this Detail.

        Current enterprise purpose (= value as at system date).<br><br>The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :param current_enterprise_purpose: The current_enterprise_purpose of this Detail.  # noqa: E501
        :type: str
        """

        self._current_enterprise_purpose = current_enterprise_purpose

    @property
    def federal_states_mad_of_legal_person(self):
        """Gets the federal_states_mad_of_legal_person of this Detail.  # noqa: E501

        The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :return: The federal_states_mad_of_legal_person of this Detail.  # noqa: E501
        :rtype: list[FederalStateMAD]
        """
        return self._federal_states_mad_of_legal_person

    @federal_states_mad_of_legal_person.setter
    def federal_states_mad_of_legal_person(self, federal_states_mad_of_legal_person):
        """Sets the federal_states_mad_of_legal_person of this Detail.

        The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :param federal_states_mad_of_legal_person: The federal_states_mad_of_legal_person of this Detail.  # noqa: E501
        :type: list[FederalStateMAD]
        """

        self._federal_states_mad_of_legal_person = federal_states_mad_of_legal_person

    @property
    def current_federal_state_mad_of_legal_person(self):
        """Gets the current_federal_state_mad_of_legal_person of this Detail.  # noqa: E501

        Current federal state (MAD) of the company (= value as at system date).<br><br>The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :return: The current_federal_state_mad_of_legal_person of this Detail.  # noqa: E501
        :rtype: int
        """
        return self._current_federal_state_mad_of_legal_person

    @current_federal_state_mad_of_legal_person.setter
    def current_federal_state_mad_of_legal_person(self, current_federal_state_mad_of_legal_person):
        """Sets the current_federal_state_mad_of_legal_person of this Detail.

        Current federal state (MAD) of the company (= value as at system date).<br><br>The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :param current_federal_state_mad_of_legal_person: The current_federal_state_mad_of_legal_person of this Detail.  # noqa: E501
        :type: int
        """

        self._current_federal_state_mad_of_legal_person = current_federal_state_mad_of_legal_person

    @property
    def federal_states_of_legal_person(self):
        """Gets the federal_states_of_legal_person of this Detail.  # noqa: E501

        The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :return: The federal_states_of_legal_person of this Detail.  # noqa: E501
        :rtype: list[FederalState]
        """
        return self._federal_states_of_legal_person

    @federal_states_of_legal_person.setter
    def federal_states_of_legal_person(self, federal_states_of_legal_person):
        """Sets the federal_states_of_legal_person of this Detail.

        The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :param federal_states_of_legal_person: The federal_states_of_legal_person of this Detail.  # noqa: E501
        :type: list[FederalState]
        """

        self._federal_states_of_legal_person = federal_states_of_legal_person

    @property
    def current_federal_state_of_legal_person(self):
        """Gets the current_federal_state_of_legal_person of this Detail.  # noqa: E501

        Current federal state of the company (= value as at system date).<br><br>The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :return: The current_federal_state_of_legal_person of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._current_federal_state_of_legal_person

    @current_federal_state_of_legal_person.setter
    def current_federal_state_of_legal_person(self, current_federal_state_of_legal_person):
        """Sets the current_federal_state_of_legal_person of this Detail.

        Current federal state of the company (= value as at system date).<br><br>The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :param current_federal_state_of_legal_person: The current_federal_state_of_legal_person of this Detail.  # noqa: E501
        :type: str
        """

        self._current_federal_state_of_legal_person = current_federal_state_of_legal_person

    @property
    def fiscal_years(self):
        """Gets the fiscal_years of this Detail.  # noqa: E501

        The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :return: The fiscal_years of this Detail.  # noqa: E501
        :rtype: list[FiscalYear]
        """
        return self._fiscal_years

    @fiscal_years.setter
    def fiscal_years(self, fiscal_years):
        """Sets the fiscal_years of this Detail.

        The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :param fiscal_years: The fiscal_years of this Detail.  # noqa: E501
        :type: list[FiscalYear]
        """

        self._fiscal_years = fiscal_years

    @property
    def current_fiscal_year(self):
        """Gets the current_fiscal_year of this Detail.  # noqa: E501

        Current fiscal year of the company (= value as at system date).<br><br>The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :return: The current_fiscal_year of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._current_fiscal_year

    @current_fiscal_year.setter
    def current_fiscal_year(self, current_fiscal_year):
        """Sets the current_fiscal_year of this Detail.

        Current fiscal year of the company (= value as at system date).<br><br>The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :param current_fiscal_year: The current_fiscal_year of this Detail.  # noqa: E501
        :type: str
        """

        self._current_fiscal_year = current_fiscal_year

    @property
    def kind_of_register_courts(self):
        """Gets the kind_of_register_courts of this Detail.  # noqa: E501

        The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :return: The kind_of_register_courts of this Detail.  # noqa: E501
        :rtype: list[KindOfRegisterCourt]
        """
        return self._kind_of_register_courts

    @kind_of_register_courts.setter
    def kind_of_register_courts(self, kind_of_register_courts):
        """Sets the kind_of_register_courts of this Detail.

        The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :param kind_of_register_courts: The kind_of_register_courts of this Detail.  # noqa: E501
        :type: list[KindOfRegisterCourt]
        """

        self._kind_of_register_courts = kind_of_register_courts

    @property
    def current_kind_of_register_court(self):
        """Gets the current_kind_of_register_court of this Detail.  # noqa: E501

        Current type of register court of the company (= value as at system date).<br><br>The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :return: The current_kind_of_register_court of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._current_kind_of_register_court

    @current_kind_of_register_court.setter
    def current_kind_of_register_court(self, current_kind_of_register_court):
        """Sets the current_kind_of_register_court of this Detail.

        Current type of register court of the company (= value as at system date).<br><br>The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :param current_kind_of_register_court: The current_kind_of_register_court of this Detail.  # noqa: E501
        :type: str
        """

        self._current_kind_of_register_court = current_kind_of_register_court

    @property
    def locations_of_head_office(self):
        """Gets the locations_of_head_office of this Detail.  # noqa: E501

        The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :return: The locations_of_head_office of this Detail.  # noqa: E501
        :rtype: list[LocationOfHeadOffice]
        """
        return self._locations_of_head_office

    @locations_of_head_office.setter
    def locations_of_head_office(self, locations_of_head_office):
        """Sets the locations_of_head_office of this Detail.

        The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :param locations_of_head_office: The locations_of_head_office of this Detail.  # noqa: E501
        :type: list[LocationOfHeadOffice]
        """

        self._locations_of_head_office = locations_of_head_office

    @property
    def current_location_of_head_office(self):
        """Gets the current_location_of_head_office of this Detail.  # noqa: E501

        Current location of head office (= value as at system date).<br><br>The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :return: The current_location_of_head_office of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._current_location_of_head_office

    @current_location_of_head_office.setter
    def current_location_of_head_office(self, current_location_of_head_office):
        """Sets the current_location_of_head_office of this Detail.

        Current location of head office (= value as at system date).<br><br>The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :param current_location_of_head_office: The current_location_of_head_office of this Detail.  # noqa: E501
        :type: str
        """

        self._current_location_of_head_office = current_location_of_head_office

    @property
    def names_of_register_court(self):
        """Gets the names_of_register_court of this Detail.  # noqa: E501

        The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :return: The names_of_register_court of this Detail.  # noqa: E501
        :rtype: list[NameOfRegisterCourt]
        """
        return self._names_of_register_court

    @names_of_register_court.setter
    def names_of_register_court(self, names_of_register_court):
        """Sets the names_of_register_court of this Detail.

        The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :param names_of_register_court: The names_of_register_court of this Detail.  # noqa: E501
        :type: list[NameOfRegisterCourt]
        """

        self._names_of_register_court = names_of_register_court

    @property
    def current_name_of_register_court(self):
        """Gets the current_name_of_register_court of this Detail.  # noqa: E501

        Current name of register court (= value as at system date).<br><br>The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :return: The current_name_of_register_court of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._current_name_of_register_court

    @current_name_of_register_court.setter
    def current_name_of_register_court(self, current_name_of_register_court):
        """Sets the current_name_of_register_court of this Detail.

        Current name of register court (= value as at system date).<br><br>The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :param current_name_of_register_court: The current_name_of_register_court of this Detail.  # noqa: E501
        :type: str
        """

        self._current_name_of_register_court = current_name_of_register_court

    @property
    def registered_company_names(self):
        """Gets the registered_company_names of this Detail.  # noqa: E501


        :return: The registered_company_names of this Detail.  # noqa: E501
        :rtype: list[RegisteredCompanyName]
        """
        return self._registered_company_names

    @registered_company_names.setter
    def registered_company_names(self, registered_company_names):
        """Sets the registered_company_names of this Detail.


        :param registered_company_names: The registered_company_names of this Detail.  # noqa: E501
        :type: list[RegisteredCompanyName]
        """

        self._registered_company_names = registered_company_names

    @property
    def current_registered_company_name(self):
        """Gets the current_registered_company_name of this Detail.  # noqa: E501

        Current company name as listed by the register court (= value as at system date).  # noqa: E501

        :return: The current_registered_company_name of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._current_registered_company_name

    @current_registered_company_name.setter
    def current_registered_company_name(self, current_registered_company_name):
        """Sets the current_registered_company_name of this Detail.

        Current company name as listed by the register court (= value as at system date).  # noqa: E501

        :param current_registered_company_name: The current_registered_company_name of this Detail.  # noqa: E501
        :type: str
        """

        self._current_registered_company_name = current_registered_company_name

    @property
    def registration_date(self):
        """Gets the registration_date of this Detail.  # noqa: E501

        Date on which the company was entered into the court register.<br><br>This property is not writable. Changes can only be made via the history of the property 'registration_numbers' (valid_from).  # noqa: E501

        :return: The registration_date of this Detail.  # noqa: E501
        :rtype: date
        """
        return self._registration_date

    @registration_date.setter
    def registration_date(self, registration_date):
        """Sets the registration_date of this Detail.

        Date on which the company was entered into the court register.<br><br>This property is not writable. Changes can only be made via the history of the property 'registration_numbers' (valid_from).  # noqa: E501

        :param registration_date: The registration_date of this Detail.  # noqa: E501
        :type: date
        """

        self._registration_date = registration_date

    @property
    def registration_numbers(self):
        """Gets the registration_numbers of this Detail.  # noqa: E501

        The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :return: The registration_numbers of this Detail.  # noqa: E501
        :rtype: list[RegistrationNumber]
        """
        return self._registration_numbers

    @registration_numbers.setter
    def registration_numbers(self, registration_numbers):
        """Sets the registration_numbers of this Detail.

        The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :param registration_numbers: The registration_numbers of this Detail.  # noqa: E501
        :type: list[RegistrationNumber]
        """

        self._registration_numbers = registration_numbers

    @property
    def current_registration_number(self):
        """Gets the current_registration_number of this Detail.  # noqa: E501

        Current registration number of the company (= value as at system date).<br><br>The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :return: The current_registration_number of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._current_registration_number

    @current_registration_number.setter
    def current_registration_number(self, current_registration_number):
        """Sets the current_registration_number of this Detail.

        Current registration number of the company (= value as at system date).<br><br>The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :param current_registration_number: The current_registration_number of this Detail.  # noqa: E501
        :type: str
        """

        self._current_registration_number = current_registration_number

    @property
    def three_lined_company_names_first_line(self):
        """Gets the three_lined_company_names_first_line of this Detail.  # noqa: E501

        The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :return: The three_lined_company_names_first_line of this Detail.  # noqa: E501
        :rtype: list[CompanyName]
        """
        return self._three_lined_company_names_first_line

    @three_lined_company_names_first_line.setter
    def three_lined_company_names_first_line(self, three_lined_company_names_first_line):
        """Sets the three_lined_company_names_first_line of this Detail.

        The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :param three_lined_company_names_first_line: The three_lined_company_names_first_line of this Detail.  # noqa: E501
        :type: list[CompanyName]
        """

        self._three_lined_company_names_first_line = three_lined_company_names_first_line

    @property
    def current_three_lined_company_name_first_line(self):
        """Gets the current_three_lined_company_name_first_line of this Detail.  # noqa: E501

        Current first line of the three-line company name (= value as at system date).<br><br>The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :return: The current_three_lined_company_name_first_line of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._current_three_lined_company_name_first_line

    @current_three_lined_company_name_first_line.setter
    def current_three_lined_company_name_first_line(self, current_three_lined_company_name_first_line):
        """Sets the current_three_lined_company_name_first_line of this Detail.

        Current first line of the three-line company name (= value as at system date).<br><br>The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :param current_three_lined_company_name_first_line: The current_three_lined_company_name_first_line of this Detail.  # noqa: E501
        :type: str
        """

        self._current_three_lined_company_name_first_line = current_three_lined_company_name_first_line

    @property
    def three_lined_company_names_second_line(self):
        """Gets the three_lined_company_names_second_line of this Detail.  # noqa: E501

        The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :return: The three_lined_company_names_second_line of this Detail.  # noqa: E501
        :rtype: list[CompanyName]
        """
        return self._three_lined_company_names_second_line

    @three_lined_company_names_second_line.setter
    def three_lined_company_names_second_line(self, three_lined_company_names_second_line):
        """Sets the three_lined_company_names_second_line of this Detail.

        The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :param three_lined_company_names_second_line: The three_lined_company_names_second_line of this Detail.  # noqa: E501
        :type: list[CompanyName]
        """

        self._three_lined_company_names_second_line = three_lined_company_names_second_line

    @property
    def current_three_lined_company_name_second_line(self):
        """Gets the current_three_lined_company_name_second_line of this Detail.  # noqa: E501

        Current second line of the three-line company name (= value as at system date).<br><br>The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :return: The current_three_lined_company_name_second_line of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._current_three_lined_company_name_second_line

    @current_three_lined_company_name_second_line.setter
    def current_three_lined_company_name_second_line(self, current_three_lined_company_name_second_line):
        """Sets the current_three_lined_company_name_second_line of this Detail.

        Current second line of the three-line company name (= value as at system date).<br><br>The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :param current_three_lined_company_name_second_line: The current_three_lined_company_name_second_line of this Detail.  # noqa: E501
        :type: str
        """

        self._current_three_lined_company_name_second_line = current_three_lined_company_name_second_line

    @property
    def three_lined_company_names_third_line(self):
        """Gets the three_lined_company_names_third_line of this Detail.  # noqa: E501

        The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :return: The three_lined_company_names_third_line of this Detail.  # noqa: E501
        :rtype: list[CompanyName]
        """
        return self._three_lined_company_names_third_line

    @three_lined_company_names_third_line.setter
    def three_lined_company_names_third_line(self, three_lined_company_names_third_line):
        """Sets the three_lined_company_names_third_line of this Detail.

        The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :param three_lined_company_names_third_line: The three_lined_company_names_third_line of this Detail.  # noqa: E501
        :type: list[CompanyName]
        """

        self._three_lined_company_names_third_line = three_lined_company_names_third_line

    @property
    def current_three_lined_company_name_third_line(self):
        """Gets the current_three_lined_company_name_third_line of this Detail.  # noqa: E501

        Current third line of the three-line company name (= value as at system date).<br><br>The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :return: The current_three_lined_company_name_third_line of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._current_three_lined_company_name_third_line

    @current_three_lined_company_name_third_line.setter
    def current_three_lined_company_name_third_line(self, current_three_lined_company_name_third_line):
        """Sets the current_three_lined_company_name_third_line of this Detail.

        Current third line of the three-line company name (= value as at system date).<br><br>The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :param current_three_lined_company_name_third_line: The current_three_lined_company_name_third_line of this Detail.  # noqa: E501
        :type: str
        """

        self._current_three_lined_company_name_third_line = current_three_lined_company_name_third_line

    @property
    def two_lined_company_names_first_line(self):
        """Gets the two_lined_company_names_first_line of this Detail.  # noqa: E501

        The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :return: The two_lined_company_names_first_line of this Detail.  # noqa: E501
        :rtype: list[CompanyName]
        """
        return self._two_lined_company_names_first_line

    @two_lined_company_names_first_line.setter
    def two_lined_company_names_first_line(self, two_lined_company_names_first_line):
        """Sets the two_lined_company_names_first_line of this Detail.

        The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :param two_lined_company_names_first_line: The two_lined_company_names_first_line of this Detail.  # noqa: E501
        :type: list[CompanyName]
        """

        self._two_lined_company_names_first_line = two_lined_company_names_first_line

    @property
    def current_two_lined_company_name_first_line(self):
        """Gets the current_two_lined_company_name_first_line of this Detail.  # noqa: E501

        Current first line of the two-line company name (= value as at system date).<br><br>The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :return: The current_two_lined_company_name_first_line of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._current_two_lined_company_name_first_line

    @current_two_lined_company_name_first_line.setter
    def current_two_lined_company_name_first_line(self, current_two_lined_company_name_first_line):
        """Sets the current_two_lined_company_name_first_line of this Detail.

        Current first line of the two-line company name (= value as at system date).<br><br>The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :param current_two_lined_company_name_first_line: The current_two_lined_company_name_first_line of this Detail.  # noqa: E501
        :type: str
        """

        self._current_two_lined_company_name_first_line = current_two_lined_company_name_first_line

    @property
    def two_lined_company_names_second_line(self):
        """Gets the two_lined_company_names_second_line of this Detail.  # noqa: E501

        The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :return: The two_lined_company_names_second_line of this Detail.  # noqa: E501
        :rtype: list[CompanyName]
        """
        return self._two_lined_company_names_second_line

    @two_lined_company_names_second_line.setter
    def two_lined_company_names_second_line(self, two_lined_company_names_second_line):
        """Sets the two_lined_company_names_second_line of this Detail.

        The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :param two_lined_company_names_second_line: The two_lined_company_names_second_line of this Detail.  # noqa: E501
        :type: list[CompanyName]
        """

        self._two_lined_company_names_second_line = two_lined_company_names_second_line

    @property
    def current_two_lined_company_name_second_line(self):
        """Gets the current_two_lined_company_name_second_line of this Detail.  # noqa: E501

        Current second line of the two-line company name (= value as at system date).<br><br>The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :return: The current_two_lined_company_name_second_line of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._current_two_lined_company_name_second_line

    @current_two_lined_company_name_second_line.setter
    def current_two_lined_company_name_second_line(self, current_two_lined_company_name_second_line):
        """Sets the current_two_lined_company_name_second_line of this Detail.

        Current second line of the two-line company name (= value as at system date).<br><br>The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :param current_two_lined_company_name_second_line: The current_two_lined_company_name_second_line of this Detail.  # noqa: E501
        :type: str
        """

        self._current_two_lined_company_name_second_line = current_two_lined_company_name_second_line

    @property
    def winding_up_date(self):
        """Gets the winding_up_date of this Detail.  # noqa: E501

        Indicates the date on which a company was wound up.<br><br>The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :return: The winding_up_date of this Detail.  # noqa: E501
        :rtype: date
        """
        return self._winding_up_date

    @winding_up_date.setter
    def winding_up_date(self, winding_up_date):
        """Sets the winding_up_date of this Detail.

        Indicates the date on which a company was wound up.<br><br>The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :param winding_up_date: The winding_up_date of this Detail.  # noqa: E501
        :type: date
        """

        self._winding_up_date = winding_up_date

    @property
    def winding_up_proceedings(self):
        """Gets the winding_up_proceedings of this Detail.  # noqa: E501

        In corporate and associations law, \"winding-up\" describes the start of the period in which the entity moves from commercial operations into the phase of liquidation/administration of its operations – until it ceases to exist. Meaning of the values (IA = i.A., IL = i.L., INABW = in Abwicklung, INLIQ = in Liquidation).<br><br>The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :return: The winding_up_proceedings of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._winding_up_proceedings

    @winding_up_proceedings.setter
    def winding_up_proceedings(self, winding_up_proceedings):
        """Sets the winding_up_proceedings of this Detail.

        In corporate and associations law, \"winding-up\" describes the start of the period in which the entity moves from commercial operations into the phase of liquidation/administration of its operations – until it ceases to exist. Meaning of the values (IA = i.A., IL = i.L., INABW = in Abwicklung, INLIQ = in Liquidation).<br><br>The property may only be filled if the addressee is of the type 'legal_person'.  # noqa: E501

        :param winding_up_proceedings: The winding_up_proceedings of this Detail.  # noqa: E501
        :type: str
        """
        allowed_values = ["IA", "IL", "INABW", "INLIQ"]  # noqa: E501
        if (self._configuration.client_side_validation and
                winding_up_proceedings not in allowed_values):
            raise ValueError(
                "Invalid value for `winding_up_proceedings` ({0}), must be one of {1}"  # noqa: E501
                .format(winding_up_proceedings, allowed_values)
            )

        self._winding_up_proceedings = winding_up_proceedings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Detail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Detail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Detail):
            return True

        return self.to_dict() != other.to_dict()
