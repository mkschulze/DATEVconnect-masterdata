# coding: utf-8

"""
    Client Master Data

    In the documentation below, you will receive detailed functional and technical specifications on the API DATEVconnect for Master Data.  **General information on dealing with fields administered as historical** A number of fields in the  master data are administered as \"historical\". This means that the existing content is not overwritten when the field is updated, but that the existing value remains in place, with a new value added that is valid from a date entered by the user.  Specifically, the following fields are administered as historical:  *Ressource 'addressees'* - short_names, - surnames, - company_names, - legal_form_ids  *Subordinate object 'detail'* - considerations, - denominations, - federal_states_of_natural_person, - job_titles, - marital_statuses, - codes_of_classification_of_economic_activities_2008, - descriptions_of_classification_of_economic_activities_2008, - mad_codes_of_classification_of_economic_activities_2008, - codes_of_classification_of_economic_activities_2003, - descriptions_of_classification_of_economic_activities_2003, - mad_codes_of_classification_of_economic_activities_2003, - countries_of_head_office, - distributions_of_profit, - enterprise_purposes, - federal_states_mad_of_legal_person, - federal_states_of_legal_person, - fiscal_years, - kind_of_register_courts, - locations_of_head_office, - names_of_register_court, - registered_company_names, - registration_numbers, - three_lined_company_names_first_line, - three_lined_company_names_second_line, - three_lined_company_names_third_line, - two_lined_company_names_first_line, - two_lined_company_names_second_line  These fields are shown as arrays, with their elements exhibiting the following structure: - value, - valid_from  This structure makes it possible to generate periods that indicate the validity date of a particular value in a value range.  This is illustrated by the following examples:  \"job_titles\": [   {\"value\":\"Müller\"},   {\"value\":\"Bäcker\", \"valid_from\":\"1995-04-01T00:00:00.000\"},   {\"value\":\"Metzger\", \"valid_from\":\"2001-07-01T00:00:00.000\"} ] In this example, the profession \"Müller\" (\"miller\") was valid until 03/31/1995. \"Bäcker\" (\"baker\") was valid from 04/01/1995 to 06/30/2001. The value \"Metzger\" (\"butcher\") is valid starting 07/01/2001.  For all the historically administered fields listed above, there is an additional field that indicates the current value of the value range (the value that is valid today/as of the system time). The syntactic structure of the property name is as follows: current_<*Property name of the historically administered field in the singular*>.  In the example above, the property name is \"current_job_title\" with the value \"Metzger\" (\"current_job_title\": \"Metzger\").  When writing fields administered as historical, please note that both properties have to be entered to prevent content from being lost. This can once again be illustrated using the example above:  Starting on 01/01/2010, the person is no longer employed as a butcher (\"Metzger\"), but now works as a landlord (\"Wirt\") in the hospitality industry. In order to save this information in the master data, the request has to be as follows:  ...  \"job_titles\": [   {\"value\":\"Müller\"},   {\"value\":\"Bäcker\", \"valid_from\":\"1995-04-01T00:00:00.000\"},   {\"value\":\"Metzger\", \"valid_from\":\"2001-07-01T00:00:00.000\"},   {\"value\": \"Wirt\", \"valid_from\": \"2010-01-01T00:00:00.000\"} ],  \"current_job_title\": \"Wirt\",  ...  If the property \"current_job_title\" had not been entered, but only the property \"job_titles\", then the current value (\"landlord\" in this example) would have been overwritten by a NULL value, as there would have been no explicit entry for the current value.  If, however, only the property \"current_job_title\" had been entered (i.e. without entering the property \"job_titles\"), then all historical values would have been overwritten. The result would have been the sole value of \"landlord\" without any time period set.  In summary, it can be said that the content of the property \"current_job_title\" overwrites the content of the valid array element of the property \"job_titles\".   # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: schnittstellenberatung@datev.de
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Address(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'str',
        'city': 'str',
        'country_code': 'str',
        'postal_code': 'str',
        'post_office_box': 'str',
        'street': 'str',
        'additional_correspondence_title': 'str',
        'additional_delivery_text1': 'str',
        'additional_delivery_text2': 'str',
        'additional_shipping_information': 'str',
        'address_appendix': 'str',
        'address_manually_edited': 'str',
        'is_address_manually_edited': 'bool',
        'note': 'str',
        'valid_from': 'date',
        'valid_to': 'date',
        'currently_valid': 'bool',
        'is_correspondence_address': 'bool',
        'is_debitor_address': 'bool',
        'is_main_post_office_box_address': 'bool',
        'is_main_street_address': 'bool',
        'is_management_address': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'city': 'city',
        'country_code': 'country_code',
        'postal_code': 'postal_code',
        'post_office_box': 'post_office_box',
        'street': 'street',
        'additional_correspondence_title': 'additional_correspondence_title',
        'additional_delivery_text1': 'additional_delivery_text1',
        'additional_delivery_text2': 'additional_delivery_text2',
        'additional_shipping_information': 'additional_shipping_information',
        'address_appendix': 'address_appendix',
        'address_manually_edited': 'address_manually_edited',
        'is_address_manually_edited': 'is_address_manually_edited',
        'note': 'note',
        'valid_from': 'valid_from',
        'valid_to': 'valid_to',
        'currently_valid': 'currently_valid',
        'is_correspondence_address': 'is_correspondence_address',
        'is_debitor_address': 'is_debitor_address',
        'is_main_post_office_box_address': 'is_main_post_office_box_address',
        'is_main_street_address': 'is_main_street_address',
        'is_management_address': 'is_management_address'
    }

    def __init__(self, id=None, type=None, city=None, country_code=None, postal_code=None, post_office_box=None, street=None, additional_correspondence_title=None, additional_delivery_text1=None, additional_delivery_text2=None, additional_shipping_information=None, address_appendix=None, address_manually_edited=None, is_address_manually_edited=None, note=None, valid_from=None, valid_to=None, currently_valid=None, is_correspondence_address=None, is_debitor_address=None, is_main_post_office_box_address=None, is_main_street_address=None, is_management_address=None, _configuration=None):  # noqa: E501
        """Address - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._type = None
        self._city = None
        self._country_code = None
        self._postal_code = None
        self._post_office_box = None
        self._street = None
        self._additional_correspondence_title = None
        self._additional_delivery_text1 = None
        self._additional_delivery_text2 = None
        self._additional_shipping_information = None
        self._address_appendix = None
        self._address_manually_edited = None
        self._is_address_manually_edited = None
        self._note = None
        self._valid_from = None
        self._valid_to = None
        self._currently_valid = None
        self._is_correspondence_address = None
        self._is_debitor_address = None
        self._is_main_post_office_box_address = None
        self._is_main_street_address = None
        self._is_management_address = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.type = type
        if city is not None:
            self.city = city
        if country_code is not None:
            self.country_code = country_code
        if postal_code is not None:
            self.postal_code = postal_code
        if post_office_box is not None:
            self.post_office_box = post_office_box
        if street is not None:
            self.street = street
        if additional_correspondence_title is not None:
            self.additional_correspondence_title = additional_correspondence_title
        if additional_delivery_text1 is not None:
            self.additional_delivery_text1 = additional_delivery_text1
        if additional_delivery_text2 is not None:
            self.additional_delivery_text2 = additional_delivery_text2
        if additional_shipping_information is not None:
            self.additional_shipping_information = additional_shipping_information
        if address_appendix is not None:
            self.address_appendix = address_appendix
        if address_manually_edited is not None:
            self.address_manually_edited = address_manually_edited
        if is_address_manually_edited is not None:
            self.is_address_manually_edited = is_address_manually_edited
        if note is not None:
            self.note = note
        if valid_from is not None:
            self.valid_from = valid_from
        if valid_to is not None:
            self.valid_to = valid_to
        if currently_valid is not None:
            self.currently_valid = currently_valid
        if is_correspondence_address is not None:
            self.is_correspondence_address = is_correspondence_address
        if is_debitor_address is not None:
            self.is_debitor_address = is_debitor_address
        if is_main_post_office_box_address is not None:
            self.is_main_post_office_box_address = is_main_post_office_box_address
        if is_main_street_address is not None:
            self.is_main_street_address = is_main_street_address
        if is_management_address is not None:
            self.is_management_address = is_management_address

    @property
    def id(self):
        """Gets the id of this Address.  # noqa: E501

        GUID - internal ID of an address.  # noqa: E501

        :return: The id of this Address.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Address.

        GUID - internal ID of an address.  # noqa: E501

        :param id: The id of this Address.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this Address.  # noqa: E501

        Address type (street address, PO box address, corporate client address). One of these must be selected when creating a new address. Otherwise, this field will be read-only.  # noqa: E501

        :return: The type of this Address.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Address.

        Address type (street address, PO box address, corporate client address). One of these must be selected when creating a new address. Otherwise, this field will be read-only.  # noqa: E501

        :param type: The type of this Address.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["street", "post_office_box", "corporate_client"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def city(self):
        """Gets the city of this Address.  # noqa: E501

        Indicates the location. The maximum length depends on the country in which the address is located (for 'DE' and 'AT' 30 characters; for 'PL' 41 characters; for any other country or if no country has been defined 62 characters are permissible).  # noqa: E501

        :return: The city of this Address.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Address.

        Indicates the location. The maximum length depends on the country in which the address is located (for 'DE' and 'AT' 30 characters; for 'PL' 41 characters; for any other country or if no country has been defined 62 characters are permissible).  # noqa: E501

        :param city: The city of this Address.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def country_code(self):
        """Gets the country_code of this Address.  # noqa: E501

        Indicates the country in which the address is located. The following values are permissible (see “country_of_birth” definition).  # noqa: E501

        :return: The country_code of this Address.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Address.

        Indicates the country in which the address is located. The following values are permissible (see “country_of_birth” definition).  # noqa: E501

        :param country_code: The country_code of this Address.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def postal_code(self):
        """Gets the postal_code of this Address.  # noqa: E501

        Indicates the postal code. The maximum length depends on the country in which the address is located ('DE' 5 digits, 'AT' 4 digits, 'IT' 5 digits, 'CZ' 6 digits, 'PL' 6 digits.  For 'DE' and 'AT', the maximum and minimum lengths are the same. For any other country or if no country has been defined 10 digits are permissible).  # noqa: E501

        :return: The postal_code of this Address.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Address.

        Indicates the postal code. The maximum length depends on the country in which the address is located ('DE' 5 digits, 'AT' 4 digits, 'IT' 5 digits, 'CZ' 6 digits, 'PL' 6 digits.  For 'DE' and 'AT', the maximum and minimum lengths are the same. For any other country or if no country has been defined 10 digits are permissible).  # noqa: E501

        :param postal_code: The postal_code of this Address.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def post_office_box(self):
        """Gets the post_office_box of this Address.  # noqa: E501

        Indicates the post office box.<br><br>The property may only be filled if the address is of the type 'post_office_box'.  # noqa: E501

        :return: The post_office_box of this Address.  # noqa: E501
        :rtype: str
        """
        return self._post_office_box

    @post_office_box.setter
    def post_office_box(self, post_office_box):
        """Sets the post_office_box of this Address.

        Indicates the post office box.<br><br>The property may only be filled if the address is of the type 'post_office_box'.  # noqa: E501

        :param post_office_box: The post_office_box of this Address.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                post_office_box is not None and len(post_office_box) > 10):
            raise ValueError("Invalid value for `post_office_box`, length must be less than or equal to `10`")  # noqa: E501

        self._post_office_box = post_office_box

    @property
    def street(self):
        """Gets the street of this Address.  # noqa: E501

        Indicates the street. The maximum length depends on the country in which the address is located (for 'DE' and 'AT' 36 characters; for any other country or if no country has been defined 41 characters are permissible).<br>The property may only be filled if the address is of the type 'street'.  # noqa: E501

        :return: The street of this Address.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this Address.

        Indicates the street. The maximum length depends on the country in which the address is located (for 'DE' and 'AT' 36 characters; for any other country or if no country has been defined 41 characters are permissible).<br>The property may only be filled if the address is of the type 'street'.  # noqa: E501

        :param street: The street of this Address.  # noqa: E501
        :type: str
        """

        self._street = street

    @property
    def additional_correspondence_title(self):
        """Gets the additional_correspondence_title of this Address.  # noqa: E501

        Indicates a differing title in correspondence.  # noqa: E501

        :return: The additional_correspondence_title of this Address.  # noqa: E501
        :rtype: str
        """
        return self._additional_correspondence_title

    @additional_correspondence_title.setter
    def additional_correspondence_title(self, additional_correspondence_title):
        """Sets the additional_correspondence_title of this Address.

        Indicates a differing title in correspondence.  # noqa: E501

        :param additional_correspondence_title: The additional_correspondence_title of this Address.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                additional_correspondence_title is not None and len(additional_correspondence_title) > 30):
            raise ValueError("Invalid value for `additional_correspondence_title`, length must be less than or equal to `30`")  # noqa: E501

        self._additional_correspondence_title = additional_correspondence_title

    @property
    def additional_delivery_text1(self):
        """Gets the additional_delivery_text1 of this Address.  # noqa: E501

        Indicates the first part of the name of the differing delivery addressee.  # noqa: E501

        :return: The additional_delivery_text1 of this Address.  # noqa: E501
        :rtype: str
        """
        return self._additional_delivery_text1

    @additional_delivery_text1.setter
    def additional_delivery_text1(self, additional_delivery_text1):
        """Sets the additional_delivery_text1 of this Address.

        Indicates the first part of the name of the differing delivery addressee.  # noqa: E501

        :param additional_delivery_text1: The additional_delivery_text1 of this Address.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                additional_delivery_text1 is not None and len(additional_delivery_text1) > 50):
            raise ValueError("Invalid value for `additional_delivery_text1`, length must be less than or equal to `50`")  # noqa: E501

        self._additional_delivery_text1 = additional_delivery_text1

    @property
    def additional_delivery_text2(self):
        """Gets the additional_delivery_text2 of this Address.  # noqa: E501

        Indicates the second part of the name of the differing delivery addressee.  # noqa: E501

        :return: The additional_delivery_text2 of this Address.  # noqa: E501
        :rtype: str
        """
        return self._additional_delivery_text2

    @additional_delivery_text2.setter
    def additional_delivery_text2(self, additional_delivery_text2):
        """Sets the additional_delivery_text2 of this Address.

        Indicates the second part of the name of the differing delivery addressee.  # noqa: E501

        :param additional_delivery_text2: The additional_delivery_text2 of this Address.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                additional_delivery_text2 is not None and len(additional_delivery_text2) > 36):
            raise ValueError("Invalid value for `additional_delivery_text2`, length must be less than or equal to `36`")  # noqa: E501

        self._additional_delivery_text2 = additional_delivery_text2

    @property
    def additional_shipping_information(self):
        """Gets the additional_shipping_information of this Address.  # noqa: E501

        Indicates additional shipping information in correspondence, e.g. private/confidential or a shipment.  # noqa: E501

        :return: The additional_shipping_information of this Address.  # noqa: E501
        :rtype: str
        """
        return self._additional_shipping_information

    @additional_shipping_information.setter
    def additional_shipping_information(self, additional_shipping_information):
        """Sets the additional_shipping_information of this Address.

        Indicates additional shipping information in correspondence, e.g. private/confidential or a shipment.  # noqa: E501

        :param additional_shipping_information: The additional_shipping_information of this Address.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                additional_shipping_information is not None and len(additional_shipping_information) > 50):
            raise ValueError("Invalid value for `additional_shipping_information`, length must be less than or equal to `50`")  # noqa: E501

        self._additional_shipping_information = additional_shipping_information

    @property
    def address_appendix(self):
        """Gets the address_appendix of this Address.  # noqa: E501

        Indicates an address appendix in correspondence, e.g. \"c/o\".  # noqa: E501

        :return: The address_appendix of this Address.  # noqa: E501
        :rtype: str
        """
        return self._address_appendix

    @address_appendix.setter
    def address_appendix(self, address_appendix):
        """Sets the address_appendix of this Address.

        Indicates an address appendix in correspondence, e.g. \"c/o\".  # noqa: E501

        :param address_appendix: The address_appendix of this Address.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                address_appendix is not None and len(address_appendix) > 36):
            raise ValueError("Invalid value for `address_appendix`, length must be less than or equal to `36`")  # noqa: E501

        self._address_appendix = address_appendix

    @property
    def address_manually_edited(self):
        """Gets the address_manually_edited of this Address.  # noqa: E501

        Indicates a manually edited address.  # noqa: E501

        :return: The address_manually_edited of this Address.  # noqa: E501
        :rtype: str
        """
        return self._address_manually_edited

    @address_manually_edited.setter
    def address_manually_edited(self, address_manually_edited):
        """Sets the address_manually_edited of this Address.

        Indicates a manually edited address.  # noqa: E501

        :param address_manually_edited: The address_manually_edited of this Address.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                address_manually_edited is not None and len(address_manually_edited) > 255):
            raise ValueError("Invalid value for `address_manually_edited`, length must be less than or equal to `255`")  # noqa: E501

        self._address_manually_edited = address_manually_edited

    @property
    def is_address_manually_edited(self):
        """Gets the is_address_manually_edited of this Address.  # noqa: E501

        Indicates whether the address has been manually edited.  # noqa: E501

        :return: The is_address_manually_edited of this Address.  # noqa: E501
        :rtype: bool
        """
        return self._is_address_manually_edited

    @is_address_manually_edited.setter
    def is_address_manually_edited(self, is_address_manually_edited):
        """Sets the is_address_manually_edited of this Address.

        Indicates whether the address has been manually edited.  # noqa: E501

        :param is_address_manually_edited: The is_address_manually_edited of this Address.  # noqa: E501
        :type: bool
        """

        self._is_address_manually_edited = is_address_manually_edited

    @property
    def note(self):
        """Gets the note of this Address.  # noqa: E501

        Field for notes about the address.  # noqa: E501

        :return: The note of this Address.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this Address.

        Field for notes about the address.  # noqa: E501

        :param note: The note of this Address.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                note is not None and len(note) > 40):
            raise ValueError("Invalid value for `note`, length must be less than or equal to `40`")  # noqa: E501

        self._note = note

    @property
    def valid_from(self):
        """Gets the valid_from of this Address.  # noqa: E501

        Indicates the date from which an address is valid.  # noqa: E501

        :return: The valid_from of this Address.  # noqa: E501
        :rtype: date
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this Address.

        Indicates the date from which an address is valid.  # noqa: E501

        :param valid_from: The valid_from of this Address.  # noqa: E501
        :type: date
        """

        self._valid_from = valid_from

    @property
    def valid_to(self):
        """Gets the valid_to of this Address.  # noqa: E501

        Indicates the date until which an address is valid.  # noqa: E501

        :return: The valid_to of this Address.  # noqa: E501
        :rtype: date
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to):
        """Sets the valid_to of this Address.

        Indicates the date until which an address is valid.  # noqa: E501

        :param valid_to: The valid_to of this Address.  # noqa: E501
        :type: date
        """

        self._valid_to = valid_to

    @property
    def currently_valid(self):
        """Gets the currently_valid of this Address.  # noqa: E501

        Indicates whether or not the address is currently valid.  # noqa: E501

        :return: The currently_valid of this Address.  # noqa: E501
        :rtype: bool
        """
        return self._currently_valid

    @currently_valid.setter
    def currently_valid(self, currently_valid):
        """Sets the currently_valid of this Address.

        Indicates whether or not the address is currently valid.  # noqa: E501

        :param currently_valid: The currently_valid of this Address.  # noqa: E501
        :type: bool
        """

        self._currently_valid = currently_valid

    @property
    def is_correspondence_address(self):
        """Gets the is_correspondence_address of this Address.  # noqa: E501

        Indicates whether this is the correspondence address. Among all valid addresses  of an addressee, this property must be marked with 'true' exactly once.  # noqa: E501

        :return: The is_correspondence_address of this Address.  # noqa: E501
        :rtype: bool
        """
        return self._is_correspondence_address

    @is_correspondence_address.setter
    def is_correspondence_address(self, is_correspondence_address):
        """Sets the is_correspondence_address of this Address.

        Indicates whether this is the correspondence address. Among all valid addresses  of an addressee, this property must be marked with 'true' exactly once.  # noqa: E501

        :param is_correspondence_address: The is_correspondence_address of this Address.  # noqa: E501
        :type: bool
        """

        self._is_correspondence_address = is_correspondence_address

    @property
    def is_debitor_address(self):
        """Gets the is_debitor_address of this Address.  # noqa: E501

        Indicates whether this is the debtor address. Among all valid addresses of an addressee, this property must be marked with 'true' no more than once.  # noqa: E501

        :return: The is_debitor_address of this Address.  # noqa: E501
        :rtype: bool
        """
        return self._is_debitor_address

    @is_debitor_address.setter
    def is_debitor_address(self, is_debitor_address):
        """Sets the is_debitor_address of this Address.

        Indicates whether this is the debtor address. Among all valid addresses of an addressee, this property must be marked with 'true' no more than once.  # noqa: E501

        :param is_debitor_address: The is_debitor_address of this Address.  # noqa: E501
        :type: bool
        """

        self._is_debitor_address = is_debitor_address

    @property
    def is_main_post_office_box_address(self):
        """Gets the is_main_post_office_box_address of this Address.  # noqa: E501

        Indicates whether this is the main post office box address. Only relevant if the address is a post office box address (type=post_office_box). Among all valid post office box addresses of an addressee, this property must be marked with 'true' exactly once.  # noqa: E501

        :return: The is_main_post_office_box_address of this Address.  # noqa: E501
        :rtype: bool
        """
        return self._is_main_post_office_box_address

    @is_main_post_office_box_address.setter
    def is_main_post_office_box_address(self, is_main_post_office_box_address):
        """Sets the is_main_post_office_box_address of this Address.

        Indicates whether this is the main post office box address. Only relevant if the address is a post office box address (type=post_office_box). Among all valid post office box addresses of an addressee, this property must be marked with 'true' exactly once.  # noqa: E501

        :param is_main_post_office_box_address: The is_main_post_office_box_address of this Address.  # noqa: E501
        :type: bool
        """

        self._is_main_post_office_box_address = is_main_post_office_box_address

    @property
    def is_main_street_address(self):
        """Gets the is_main_street_address of this Address.  # noqa: E501

        Indicates whether this is the main street address. Only relevant if the address is a street address (type=street). Among all valid street addresses of an addressee, this property must be marked with 'true' exactly once.  # noqa: E501

        :return: The is_main_street_address of this Address.  # noqa: E501
        :rtype: bool
        """
        return self._is_main_street_address

    @is_main_street_address.setter
    def is_main_street_address(self, is_main_street_address):
        """Sets the is_main_street_address of this Address.

        Indicates whether this is the main street address. Only relevant if the address is a street address (type=street). Among all valid street addresses of an addressee, this property must be marked with 'true' exactly once.  # noqa: E501

        :param is_main_street_address: The is_main_street_address of this Address.  # noqa: E501
        :type: bool
        """

        self._is_main_street_address = is_main_street_address

    @property
    def is_management_address(self):
        """Gets the is_management_address of this Address.  # noqa: E501

        Indicates whether this is the management address. Only relevant if the associated addressee is of the type 'legal_person'. Among all valid addresses of an addressee (legal_person), this property must be marked with 'true' exactly once.  # noqa: E501

        :return: The is_management_address of this Address.  # noqa: E501
        :rtype: bool
        """
        return self._is_management_address

    @is_management_address.setter
    def is_management_address(self, is_management_address):
        """Sets the is_management_address of this Address.

        Indicates whether this is the management address. Only relevant if the associated addressee is of the type 'legal_person'. Among all valid addresses of an addressee (legal_person), this property must be marked with 'true' exactly once.  # noqa: E501

        :param is_management_address: The is_management_address of this Address.  # noqa: E501
        :type: bool
        """

        self._is_management_address = is_management_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Address, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Address):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Address):
            return True

        return self.to_dict() != other.to_dict()
