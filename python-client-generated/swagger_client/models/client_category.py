# coding: utf-8

"""
    Client Master Data

    In the documentation below, you will receive detailed functional and technical specifications on the API DATEVconnect for Master Data.  **General information on dealing with fields administered as historical** A number of fields in the  master data are administered as \"historical\". This means that the existing content is not overwritten when the field is updated, but that the existing value remains in place, with a new value added that is valid from a date entered by the user.  Specifically, the following fields are administered as historical:  *Ressource 'addressees'* - short_names, - surnames, - company_names, - legal_form_ids  *Subordinate object 'detail'* - considerations, - denominations, - federal_states_of_natural_person, - job_titles, - marital_statuses, - codes_of_classification_of_economic_activities_2008, - descriptions_of_classification_of_economic_activities_2008, - mad_codes_of_classification_of_economic_activities_2008, - codes_of_classification_of_economic_activities_2003, - descriptions_of_classification_of_economic_activities_2003, - mad_codes_of_classification_of_economic_activities_2003, - countries_of_head_office, - distributions_of_profit, - enterprise_purposes, - federal_states_mad_of_legal_person, - federal_states_of_legal_person, - fiscal_years, - kind_of_register_courts, - locations_of_head_office, - names_of_register_court, - registered_company_names, - registration_numbers, - three_lined_company_names_first_line, - three_lined_company_names_second_line, - three_lined_company_names_third_line, - two_lined_company_names_first_line, - two_lined_company_names_second_line  These fields are shown as arrays, with their elements exhibiting the following structure: - value, - valid_from  This structure makes it possible to generate periods that indicate the validity date of a particular value in a value range.  This is illustrated by the following examples:  \"job_titles\": [   {\"value\":\"Müller\"},   {\"value\":\"Bäcker\", \"valid_from\":\"1995-04-01T00:00:00.000\"},   {\"value\":\"Metzger\", \"valid_from\":\"2001-07-01T00:00:00.000\"} ] In this example, the profession \"Müller\" (\"miller\") was valid until 03/31/1995. \"Bäcker\" (\"baker\") was valid from 04/01/1995 to 06/30/2001. The value \"Metzger\" (\"butcher\") is valid starting 07/01/2001.  For all the historically administered fields listed above, there is an additional field that indicates the current value of the value range (the value that is valid today/as of the system time). The syntactic structure of the property name is as follows: current_<*Property name of the historically administered field in the singular*>.  In the example above, the property name is \"current_job_title\" with the value \"Metzger\" (\"current_job_title\": \"Metzger\").  When writing fields administered as historical, please note that both properties have to be entered to prevent content from being lost. This can once again be illustrated using the example above:  Starting on 01/01/2010, the person is no longer employed as a butcher (\"Metzger\"), but now works as a landlord (\"Wirt\") in the hospitality industry. In order to save this information in the master data, the request has to be as follows:  ...  \"job_titles\": [   {\"value\":\"Müller\"},   {\"value\":\"Bäcker\", \"valid_from\":\"1995-04-01T00:00:00.000\"},   {\"value\":\"Metzger\", \"valid_from\":\"2001-07-01T00:00:00.000\"},   {\"value\": \"Wirt\", \"valid_from\": \"2010-01-01T00:00:00.000\"} ],  \"current_job_title\": \"Wirt\",  ...  If the property \"current_job_title\" had not been entered, but only the property \"job_titles\", then the current value (\"landlord\" in this example) would have been overwritten by a NULL value, as there would have been no explicit entry for the current value.  If, however, only the property \"current_job_title\" had been entered (i.e. without entering the property \"job_titles\"), then all historical values would have been overwritten. The result would have been the sole value of \"landlord\" without any time period set.  In summary, it can be said that the content of the property \"current_job_title\" overwrites the content of the valid array element of the property \"job_titles\".   # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: schnittstellenberatung@datev.de
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ClientCategory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'client_category_type_id': 'str',
        'client_category_type_short_name': 'str',
        'client_id': 'str',
        'client_name': 'str',
        'client_number': 'int',
        'client_status': 'str',
        'timestamp': 'date'
    }

    attribute_map = {
        'id': 'id',
        'client_category_type_id': 'client_category_type_id',
        'client_category_type_short_name': 'client_category_type_short_name',
        'client_id': 'client_id',
        'client_name': 'client_name',
        'client_number': 'client_number',
        'client_status': 'client_status',
        'timestamp': 'timestamp'
    }

    def __init__(self, id=None, client_category_type_id=None, client_category_type_short_name=None, client_id=None, client_name=None, client_number=None, client_status=None, timestamp=None, _configuration=None):  # noqa: E501
        """ClientCategory - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._client_category_type_id = None
        self._client_category_type_short_name = None
        self._client_id = None
        self._client_name = None
        self._client_number = None
        self._client_status = None
        self._timestamp = None
        self.discriminator = None

        self.id = id
        self.client_category_type_id = client_category_type_id
        if client_category_type_short_name is not None:
            self.client_category_type_short_name = client_category_type_short_name
        self.client_id = client_id
        if client_name is not None:
            self.client_name = client_name
        if client_number is not None:
            self.client_number = client_number
        if client_status is not None:
            self.client_status = client_status
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def id(self):
        """Gets the id of this ClientCategory.  # noqa: E501

        GUID of a client category assignment - internal identifier.  # noqa: E501

        :return: The id of this ClientCategory.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClientCategory.

        GUID of a client category assignment - internal identifier.  # noqa: E501

        :param id: The id of this ClientCategory.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def client_category_type_id(self):
        """Gets the client_category_type_id of this ClientCategory.  # noqa: E501

        GUID of a client category type - identifies a client category type.  # noqa: E501

        :return: The client_category_type_id of this ClientCategory.  # noqa: E501
        :rtype: str
        """
        return self._client_category_type_id

    @client_category_type_id.setter
    def client_category_type_id(self, client_category_type_id):
        """Sets the client_category_type_id of this ClientCategory.

        GUID of a client category type - identifies a client category type.  # noqa: E501

        :param client_category_type_id: The client_category_type_id of this ClientCategory.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and client_category_type_id is None:
            raise ValueError("Invalid value for `client_category_type_id`, must not be `None`")  # noqa: E501

        self._client_category_type_id = client_category_type_id

    @property
    def client_category_type_short_name(self):
        """Gets the client_category_type_short_name of this ClientCategory.  # noqa: E501

        Short name of the client category type.  # noqa: E501

        :return: The client_category_type_short_name of this ClientCategory.  # noqa: E501
        :rtype: str
        """
        return self._client_category_type_short_name

    @client_category_type_short_name.setter
    def client_category_type_short_name(self, client_category_type_short_name):
        """Sets the client_category_type_short_name of this ClientCategory.

        Short name of the client category type.  # noqa: E501

        :param client_category_type_short_name: The client_category_type_short_name of this ClientCategory.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                client_category_type_short_name is not None and len(client_category_type_short_name) > 10):
            raise ValueError("Invalid value for `client_category_type_short_name`, length must be less than or equal to `10`")  # noqa: E501

        self._client_category_type_short_name = client_category_type_short_name

    @property
    def client_id(self):
        """Gets the client_id of this ClientCategory.  # noqa: E501

        GUID of a client - identifies a client.   # noqa: E501

        :return: The client_id of this ClientCategory.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ClientCategory.

        GUID of a client - identifies a client.   # noqa: E501

        :param client_id: The client_id of this ClientCategory.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def client_name(self):
        """Gets the client_name of this ClientCategory.  # noqa: E501

        Name of a client.  # noqa: E501

        :return: The client_name of this ClientCategory.  # noqa: E501
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """Sets the client_name of this ClientCategory.

        Name of a client.  # noqa: E501

        :param client_name: The client_name of this ClientCategory.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                client_name is not None and len(client_name) > 30):
            raise ValueError("Invalid value for `client_name`, length must be less than or equal to `30`")  # noqa: E501

        self._client_name = client_name

    @property
    def client_number(self):
        """Gets the client_number of this ClientCategory.  # noqa: E501

        Central client number.   # noqa: E501

        :return: The client_number of this ClientCategory.  # noqa: E501
        :rtype: int
        """
        return self._client_number

    @client_number.setter
    def client_number(self, client_number):
        """Sets the client_number of this ClientCategory.

        Central client number.   # noqa: E501

        :param client_number: The client_number of this ClientCategory.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                client_number is not None and client_number > 999999999):  # noqa: E501
            raise ValueError("Invalid value for `client_number`, must be a value less than or equal to `999999999`")  # noqa: E501
        if (self._configuration.client_side_validation and
                client_number is not None and client_number < 1):  # noqa: E501
            raise ValueError("Invalid value for `client_number`, must be a value greater than or equal to `1`")  # noqa: E501

        self._client_number = client_number

    @property
    def client_status(self):
        """Gets the client_status of this ClientCategory.  # noqa: E501

        Indicates whether the client relationship is active or inactive.  # noqa: E501

        :return: The client_status of this ClientCategory.  # noqa: E501
        :rtype: str
        """
        return self._client_status

    @client_status.setter
    def client_status(self, client_status):
        """Sets the client_status of this ClientCategory.

        Indicates whether the client relationship is active or inactive.  # noqa: E501

        :param client_status: The client_status of this ClientCategory.  # noqa: E501
        :type: str
        """
        allowed_values = ["inactive", "active"]  # noqa: E501
        if (self._configuration.client_side_validation and
                client_status not in allowed_values):
            raise ValueError(
                "Invalid value for `client_status` ({0}), must be one of {1}"  # noqa: E501
                .format(client_status, allowed_values)
            )

        self._client_status = client_status

    @property
    def timestamp(self):
        """Gets the timestamp of this ClientCategory.  # noqa: E501

        Indicates when the client category assignment was last edited.  # noqa: E501

        :return: The timestamp of this ClientCategory.  # noqa: E501
        :rtype: date
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ClientCategory.

        Indicates when the client category assignment was last edited.  # noqa: E501

        :param timestamp: The timestamp of this ClientCategory.  # noqa: E501
        :type: date
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientCategory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientCategory):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ClientCategory):
            return True

        return self.to_dict() != other.to_dict()
