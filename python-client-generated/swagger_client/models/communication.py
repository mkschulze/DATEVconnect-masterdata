# coding: utf-8

"""
    Client Master Data

    In the documentation below, you will receive detailed functional and technical specifications on the API DATEVconnect for Master Data.  **General information on dealing with fields administered as historical** A number of fields in the  master data are administered as \"historical\". This means that the existing content is not overwritten when the field is updated, but that the existing value remains in place, with a new value added that is valid from a date entered by the user.  Specifically, the following fields are administered as historical:  *Ressource 'addressees'* - short_names, - surnames, - company_names, - legal_form_ids  *Subordinate object 'detail'* - considerations, - denominations, - federal_states_of_natural_person, - job_titles, - marital_statuses, - codes_of_classification_of_economic_activities_2008, - descriptions_of_classification_of_economic_activities_2008, - mad_codes_of_classification_of_economic_activities_2008, - codes_of_classification_of_economic_activities_2003, - descriptions_of_classification_of_economic_activities_2003, - mad_codes_of_classification_of_economic_activities_2003, - countries_of_head_office, - distributions_of_profit, - enterprise_purposes, - federal_states_mad_of_legal_person, - federal_states_of_legal_person, - fiscal_years, - kind_of_register_courts, - locations_of_head_office, - names_of_register_court, - registered_company_names, - registration_numbers, - three_lined_company_names_first_line, - three_lined_company_names_second_line, - three_lined_company_names_third_line, - two_lined_company_names_first_line, - two_lined_company_names_second_line  These fields are shown as arrays, with their elements exhibiting the following structure: - value, - valid_from  This structure makes it possible to generate periods that indicate the validity date of a particular value in a value range.  This is illustrated by the following examples:  \"job_titles\": [   {\"value\":\"Müller\"},   {\"value\":\"Bäcker\", \"valid_from\":\"1995-04-01T00:00:00.000\"},   {\"value\":\"Metzger\", \"valid_from\":\"2001-07-01T00:00:00.000\"} ] In this example, the profession \"Müller\" (\"miller\") was valid until 03/31/1995. \"Bäcker\" (\"baker\") was valid from 04/01/1995 to 06/30/2001. The value \"Metzger\" (\"butcher\") is valid starting 07/01/2001.  For all the historically administered fields listed above, there is an additional field that indicates the current value of the value range (the value that is valid today/as of the system time). The syntactic structure of the property name is as follows: current_<*Property name of the historically administered field in the singular*>.  In the example above, the property name is \"current_job_title\" with the value \"Metzger\" (\"current_job_title\": \"Metzger\").  When writing fields administered as historical, please note that both properties have to be entered to prevent content from being lost. This can once again be illustrated using the example above:  Starting on 01/01/2010, the person is no longer employed as a butcher (\"Metzger\"), but now works as a landlord (\"Wirt\") in the hospitality industry. In order to save this information in the master data, the request has to be as follows:  ...  \"job_titles\": [   {\"value\":\"Müller\"},   {\"value\":\"Bäcker\", \"valid_from\":\"1995-04-01T00:00:00.000\"},   {\"value\":\"Metzger\", \"valid_from\":\"2001-07-01T00:00:00.000\"},   {\"value\": \"Wirt\", \"valid_from\": \"2010-01-01T00:00:00.000\"} ],  \"current_job_title\": \"Wirt\",  ...  If the property \"current_job_title\" had not been entered, but only the property \"job_titles\", then the current value (\"landlord\" in this example) would have been overwritten by a NULL value, as there would have been no explicit entry for the current value.  If, however, only the property \"current_job_title\" had been entered (i.e. without entering the property \"job_titles\"), then all historical values would have been overwritten. The result would have been the sole value of \"landlord\" without any time period set.  In summary, it can be said that the content of the property \"current_job_title\" overwrites the content of the valid array element of the property \"job_titles\".   # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: schnittstellenberatung@datev.de
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Communication(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'str',
        'data_content': 'str',
        'number_standardized': 'str',
        'note': 'str',
        'is_main_communication': 'bool',
        'is_management_phone': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'data_content': 'data_content',
        'number_standardized': 'number_standardized',
        'note': 'note',
        'is_main_communication': 'is_main_communication',
        'is_management_phone': 'is_management_phone'
    }

    def __init__(self, id=None, type=None, data_content=None, number_standardized=None, note=None, is_main_communication=None, is_management_phone=None, _configuration=None):  # noqa: E501
        """Communication - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._type = None
        self._data_content = None
        self._number_standardized = None
        self._note = None
        self._is_main_communication = None
        self._is_management_phone = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.type = type
        if data_content is not None:
            self.data_content = data_content
        if number_standardized is not None:
            self.number_standardized = number_standardized
        if note is not None:
            self.note = note
        if is_main_communication is not None:
            self.is_main_communication = is_main_communication
        if is_management_phone is not None:
            self.is_management_phone = is_management_phone

    @property
    def id(self):
        """Gets the id of this Communication.  # noqa: E501

        GUID - internal ID of a communication link.  # noqa: E501

        :return: The id of this Communication.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Communication.

        GUID - internal ID of a communication link.  # noqa: E501

        :param id: The id of this Communication.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this Communication.  # noqa: E501

        Indicates the type of communication medium to which a certain number/address relates. Can only be selected when creating a new communication link. Otherwise, this field will be read-only.  # noqa: E501

        :return: The type of this Communication.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Communication.

        Indicates the type of communication medium to which a certain number/address relates. Can only be selected when creating a new communication link. Otherwise, this field will be read-only.  # noqa: E501

        :param type: The type of this Communication.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["phone", "email", "url", "fax", "other"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def data_content(self):
        """Gets the data_content of this Communication.  # noqa: E501

        Indicates the number (e.g. telephone number) or address (e.g. e-mail address) of the communication medium concerned.  # noqa: E501

        :return: The data_content of this Communication.  # noqa: E501
        :rtype: str
        """
        return self._data_content

    @data_content.setter
    def data_content(self, data_content):
        """Sets the data_content of this Communication.

        Indicates the number (e.g. telephone number) or address (e.g. e-mail address) of the communication medium concerned.  # noqa: E501

        :param data_content: The data_content of this Communication.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                data_content is not None and len(data_content) > 60):
            raise ValueError("Invalid value for `data_content`, length must be less than or equal to `60`")  # noqa: E501

        self._data_content = data_content

    @property
    def number_standardized(self):
        """Gets the number_standardized of this Communication.  # noqa: E501

        Indicates the telephone number/fax number without special characters (purely as a sequence of digits).  # noqa: E501

        :return: The number_standardized of this Communication.  # noqa: E501
        :rtype: str
        """
        return self._number_standardized

    @number_standardized.setter
    def number_standardized(self, number_standardized):
        """Sets the number_standardized of this Communication.

        Indicates the telephone number/fax number without special characters (purely as a sequence of digits).  # noqa: E501

        :param number_standardized: The number_standardized of this Communication.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                number_standardized is not None and len(number_standardized) > 60):
            raise ValueError("Invalid value for `number_standardized`, length must be less than or equal to `60`")  # noqa: E501

        self._number_standardized = number_standardized

    @property
    def note(self):
        """Gets the note of this Communication.  # noqa: E501

        Field for notes about the communication link.  # noqa: E501

        :return: The note of this Communication.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this Communication.

        Field for notes about the communication link.  # noqa: E501

        :param note: The note of this Communication.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                note is not None and len(note) > 40):
            raise ValueError("Invalid value for `note`, length must be less than or equal to `40`")  # noqa: E501

        self._note = note

    @property
    def is_main_communication(self):
        """Gets the is_main_communication of this Communication.  # noqa: E501

        Indicates the standard communication link for each means of communication. If communication_type is 'other', then this property may not be set to 'true'. Apart from this, exactly one of the communication links for the means of communication must be marked as 'true'.  # noqa: E501

        :return: The is_main_communication of this Communication.  # noqa: E501
        :rtype: bool
        """
        return self._is_main_communication

    @is_main_communication.setter
    def is_main_communication(self, is_main_communication):
        """Sets the is_main_communication of this Communication.

        Indicates the standard communication link for each means of communication. If communication_type is 'other', then this property may not be set to 'true'. Apart from this, exactly one of the communication links for the means of communication must be marked as 'true'.  # noqa: E501

        :param is_main_communication: The is_main_communication of this Communication.  # noqa: E501
        :type: bool
        """

        self._is_main_communication = is_main_communication

    @property
    def is_management_phone(self):
        """Gets the is_management_phone of this Communication.  # noqa: E501

        Indicates the management phone. Only relevant if the communication type is 'phone' and the associated addressee is of the type 'legal_person'. Exactly one telephone line of the corresponding addressee must be marked as 'true'.  # noqa: E501

        :return: The is_management_phone of this Communication.  # noqa: E501
        :rtype: bool
        """
        return self._is_management_phone

    @is_management_phone.setter
    def is_management_phone(self, is_management_phone):
        """Sets the is_management_phone of this Communication.

        Indicates the management phone. Only relevant if the communication type is 'phone' and the associated addressee is of the type 'legal_person'. Exactly one telephone line of the corresponding addressee must be marked as 'true'.  # noqa: E501

        :param is_management_phone: The is_management_phone of this Communication.  # noqa: E501
        :type: bool
        """

        self._is_management_phone = is_management_phone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Communication, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Communication):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Communication):
            return True

        return self.to_dict() != other.to_dict()
