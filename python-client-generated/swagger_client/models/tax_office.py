# coding: utf-8

"""
    Client Master Data

    In the documentation below, you will receive detailed functional and technical specifications on the API DATEVconnect for Master Data.  **General information on dealing with fields administered as historical** A number of fields in the  master data are administered as \"historical\". This means that the existing content is not overwritten when the field is updated, but that the existing value remains in place, with a new value added that is valid from a date entered by the user.  Specifically, the following fields are administered as historical:  *Ressource 'addressees'* - short_names, - surnames, - company_names, - legal_form_ids  *Subordinate object 'detail'* - considerations, - denominations, - federal_states_of_natural_person, - job_titles, - marital_statuses, - codes_of_classification_of_economic_activities_2008, - descriptions_of_classification_of_economic_activities_2008, - mad_codes_of_classification_of_economic_activities_2008, - codes_of_classification_of_economic_activities_2003, - descriptions_of_classification_of_economic_activities_2003, - mad_codes_of_classification_of_economic_activities_2003, - countries_of_head_office, - distributions_of_profit, - enterprise_purposes, - federal_states_mad_of_legal_person, - federal_states_of_legal_person, - fiscal_years, - kind_of_register_courts, - locations_of_head_office, - names_of_register_court, - registered_company_names, - registration_numbers, - three_lined_company_names_first_line, - three_lined_company_names_second_line, - three_lined_company_names_third_line, - two_lined_company_names_first_line, - two_lined_company_names_second_line  These fields are shown as arrays, with their elements exhibiting the following structure: - value, - valid_from  This structure makes it possible to generate periods that indicate the validity date of a particular value in a value range.  This is illustrated by the following examples:  \"job_titles\": [   {\"value\":\"Müller\"},   {\"value\":\"Bäcker\", \"valid_from\":\"1995-04-01T00:00:00.000\"},   {\"value\":\"Metzger\", \"valid_from\":\"2001-07-01T00:00:00.000\"} ] In this example, the profession \"Müller\" (\"miller\") was valid until 03/31/1995. \"Bäcker\" (\"baker\") was valid from 04/01/1995 to 06/30/2001. The value \"Metzger\" (\"butcher\") is valid starting 07/01/2001.  For all the historically administered fields listed above, there is an additional field that indicates the current value of the value range (the value that is valid today/as of the system time). The syntactic structure of the property name is as follows: current_<*Property name of the historically administered field in the singular*>.  In the example above, the property name is \"current_job_title\" with the value \"Metzger\" (\"current_job_title\": \"Metzger\").  When writing fields administered as historical, please note that both properties have to be entered to prevent content from being lost. This can once again be illustrated using the example above:  Starting on 01/01/2010, the person is no longer employed as a butcher (\"Metzger\"), but now works as a landlord (\"Wirt\") in the hospitality industry. In order to save this information in the master data, the request has to be as follows:  ...  \"job_titles\": [   {\"value\":\"Müller\"},   {\"value\":\"Bäcker\", \"valid_from\":\"1995-04-01T00:00:00.000\"},   {\"value\":\"Metzger\", \"valid_from\":\"2001-07-01T00:00:00.000\"},   {\"value\": \"Wirt\", \"valid_from\": \"2010-01-01T00:00:00.000\"} ],  \"current_job_title\": \"Wirt\",  ...  If the property \"current_job_title\" had not been entered, but only the property \"job_titles\", then the current value (\"landlord\" in this example) would have been overwritten by a NULL value, as there would have been no explicit entry for the current value.  If, however, only the property \"current_job_title\" had been entered (i.e. without entering the property \"job_titles\"), then all historical values would have been overwritten. The result would have been the sole value of \"landlord\" without any time period set.  In summary, it can be said that the content of the property \"current_job_title\" overwrites the content of the valid array element of the property \"job_titles\".   # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: schnittstellenberatung@datev.de
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TaxOffice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'country_code': 'str',
        'note': 'str',
        'tax_number': 'str',
        'tax_number_certificated': 'str',
        'tax_number_standardized': 'str',
        'tax_office_name': 'str',
        'tax_office_number': 'int',
        'valid_from': 'date',
        'valid_to': 'date',
        'currently_valid': 'bool',
        'is_competent_for_operational_income_tax': 'bool',
        'is_competent_for_turnover_tax': 'bool',
        'is_competent_for_wage_tax': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'country_code': 'country_code',
        'note': 'note',
        'tax_number': 'tax_number',
        'tax_number_certificated': 'tax_number_certificated',
        'tax_number_standardized': 'tax_number_standardized',
        'tax_office_name': 'tax_office_name',
        'tax_office_number': 'tax_office_number',
        'valid_from': 'valid_from',
        'valid_to': 'valid_to',
        'currently_valid': 'currently_valid',
        'is_competent_for_operational_income_tax': 'is_competent_for_operational_income_tax',
        'is_competent_for_turnover_tax': 'is_competent_for_turnover_tax',
        'is_competent_for_wage_tax': 'is_competent_for_wage_tax'
    }

    def __init__(self, id=None, country_code=None, note=None, tax_number=None, tax_number_certificated=None, tax_number_standardized=None, tax_office_name=None, tax_office_number=None, valid_from=None, valid_to=None, currently_valid=None, is_competent_for_operational_income_tax=None, is_competent_for_turnover_tax=None, is_competent_for_wage_tax=None, _configuration=None):  # noqa: E501
        """TaxOffice - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._country_code = None
        self._note = None
        self._tax_number = None
        self._tax_number_certificated = None
        self._tax_number_standardized = None
        self._tax_office_name = None
        self._tax_office_number = None
        self._valid_from = None
        self._valid_to = None
        self._currently_valid = None
        self._is_competent_for_operational_income_tax = None
        self._is_competent_for_turnover_tax = None
        self._is_competent_for_wage_tax = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if country_code is not None:
            self.country_code = country_code
        if note is not None:
            self.note = note
        if tax_number is not None:
            self.tax_number = tax_number
        if tax_number_certificated is not None:
            self.tax_number_certificated = tax_number_certificated
        if tax_number_standardized is not None:
            self.tax_number_standardized = tax_number_standardized
        if tax_office_name is not None:
            self.tax_office_name = tax_office_name
        if tax_office_number is not None:
            self.tax_office_number = tax_office_number
        if valid_from is not None:
            self.valid_from = valid_from
        if valid_to is not None:
            self.valid_to = valid_to
        if currently_valid is not None:
            self.currently_valid = currently_valid
        if is_competent_for_operational_income_tax is not None:
            self.is_competent_for_operational_income_tax = is_competent_for_operational_income_tax
        if is_competent_for_turnover_tax is not None:
            self.is_competent_for_turnover_tax = is_competent_for_turnover_tax
        if is_competent_for_wage_tax is not None:
            self.is_competent_for_wage_tax = is_competent_for_wage_tax

    @property
    def id(self):
        """Gets the id of this TaxOffice.  # noqa: E501

        GUID - internal ID of a tax office.  # noqa: E501

        :return: The id of this TaxOffice.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaxOffice.

        GUID - internal ID of a tax office.  # noqa: E501

        :param id: The id of this TaxOffice.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def country_code(self):
        """Gets the country_code of this TaxOffice.  # noqa: E501

        Indicates the country in which the tax office is located. The following values are permissible (see “country_of_birth” definition).  # noqa: E501

        :return: The country_code of this TaxOffice.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this TaxOffice.

        Indicates the country in which the tax office is located. The following values are permissible (see “country_of_birth” definition).  # noqa: E501

        :param country_code: The country_code of this TaxOffice.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                country_code is not None and len(country_code) > 2):
            raise ValueError("Invalid value for `country_code`, length must be less than or equal to `2`")  # noqa: E501

        self._country_code = country_code

    @property
    def note(self):
        """Gets the note of this TaxOffice.  # noqa: E501

        Field for notes about the tax office.  # noqa: E501

        :return: The note of this TaxOffice.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this TaxOffice.

        Field for notes about the tax office.  # noqa: E501

        :param note: The note of this TaxOffice.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                note is not None and len(note) > 40):
            raise ValueError("Invalid value for `note`, length must be less than or equal to `40`")  # noqa: E501

        self._note = note

    @property
    def tax_number(self):
        """Gets the tax_number of this TaxOffice.  # noqa: E501

        Indicates the tax number which is assigned to the tax payer.  # noqa: E501

        :return: The tax_number of this TaxOffice.  # noqa: E501
        :rtype: str
        """
        return self._tax_number

    @tax_number.setter
    def tax_number(self, tax_number):
        """Sets the tax_number of this TaxOffice.

        Indicates the tax number which is assigned to the tax payer.  # noqa: E501

        :param tax_number: The tax_number of this TaxOffice.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                tax_number is not None and len(tax_number) > 20):
            raise ValueError("Invalid value for `tax_number`, length must be less than or equal to `20`")  # noqa: E501

        self._tax_number = tax_number

    @property
    def tax_number_certificated(self):
        """Gets the tax_number_certificated of this TaxOffice.  # noqa: E501

        Indicates the tax number which is certified according to ELSTER guideline.  # noqa: E501

        :return: The tax_number_certificated of this TaxOffice.  # noqa: E501
        :rtype: str
        """
        return self._tax_number_certificated

    @tax_number_certificated.setter
    def tax_number_certificated(self, tax_number_certificated):
        """Sets the tax_number_certificated of this TaxOffice.

        Indicates the tax number which is certified according to ELSTER guideline.  # noqa: E501

        :param tax_number_certificated: The tax_number_certificated of this TaxOffice.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                tax_number_certificated is not None and len(tax_number_certificated) > 13):
            raise ValueError("Invalid value for `tax_number_certificated`, length must be less than or equal to `13`")  # noqa: E501

        self._tax_number_certificated = tax_number_certificated

    @property
    def tax_number_standardized(self):
        """Gets the tax_number_standardized of this TaxOffice.  # noqa: E501

        Indicates the tax number without special characters (purely as a sequence of digits).  # noqa: E501

        :return: The tax_number_standardized of this TaxOffice.  # noqa: E501
        :rtype: str
        """
        return self._tax_number_standardized

    @tax_number_standardized.setter
    def tax_number_standardized(self, tax_number_standardized):
        """Sets the tax_number_standardized of this TaxOffice.

        Indicates the tax number without special characters (purely as a sequence of digits).  # noqa: E501

        :param tax_number_standardized: The tax_number_standardized of this TaxOffice.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                tax_number_standardized is not None and len(tax_number_standardized) > 20):
            raise ValueError("Invalid value for `tax_number_standardized`, length must be less than or equal to `20`")  # noqa: E501

        self._tax_number_standardized = tax_number_standardized

    @property
    def tax_office_name(self):
        """Gets the tax_office_name of this TaxOffice.  # noqa: E501

        Name of the tax office.  # noqa: E501

        :return: The tax_office_name of this TaxOffice.  # noqa: E501
        :rtype: str
        """
        return self._tax_office_name

    @tax_office_name.setter
    def tax_office_name(self, tax_office_name):
        """Sets the tax_office_name of this TaxOffice.

        Name of the tax office.  # noqa: E501

        :param tax_office_name: The tax_office_name of this TaxOffice.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                tax_office_name is not None and len(tax_office_name) > 60):
            raise ValueError("Invalid value for `tax_office_name`, length must be less than or equal to `60`")  # noqa: E501

        self._tax_office_name = tax_office_name

    @property
    def tax_office_number(self):
        """Gets the tax_office_number of this TaxOffice.  # noqa: E501

        Indicates the number of the tax office. This number identifies a tax office.  # noqa: E501

        :return: The tax_office_number of this TaxOffice.  # noqa: E501
        :rtype: int
        """
        return self._tax_office_number

    @tax_office_number.setter
    def tax_office_number(self, tax_office_number):
        """Sets the tax_office_number of this TaxOffice.

        Indicates the number of the tax office. This number identifies a tax office.  # noqa: E501

        :param tax_office_number: The tax_office_number of this TaxOffice.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                tax_office_number is not None and tax_office_number > 9999):  # noqa: E501
            raise ValueError("Invalid value for `tax_office_number`, must be a value less than or equal to `9999`")  # noqa: E501
        if (self._configuration.client_side_validation and
                tax_office_number is not None and tax_office_number < 1):  # noqa: E501
            raise ValueError("Invalid value for `tax_office_number`, must be a value greater than or equal to `1`")  # noqa: E501

        self._tax_office_number = tax_office_number

    @property
    def valid_from(self):
        """Gets the valid_from of this TaxOffice.  # noqa: E501

        Indicates the date from which a tax office is valid.  # noqa: E501

        :return: The valid_from of this TaxOffice.  # noqa: E501
        :rtype: date
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this TaxOffice.

        Indicates the date from which a tax office is valid.  # noqa: E501

        :param valid_from: The valid_from of this TaxOffice.  # noqa: E501
        :type: date
        """

        self._valid_from = valid_from

    @property
    def valid_to(self):
        """Gets the valid_to of this TaxOffice.  # noqa: E501

        Indicates the date until which a tax office is valid.  # noqa: E501

        :return: The valid_to of this TaxOffice.  # noqa: E501
        :rtype: date
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to):
        """Sets the valid_to of this TaxOffice.

        Indicates the date until which a tax office is valid.  # noqa: E501

        :param valid_to: The valid_to of this TaxOffice.  # noqa: E501
        :type: date
        """

        self._valid_to = valid_to

    @property
    def currently_valid(self):
        """Gets the currently_valid of this TaxOffice.  # noqa: E501

        Indicates whether or not the tax office is currently valid.  # noqa: E501

        :return: The currently_valid of this TaxOffice.  # noqa: E501
        :rtype: bool
        """
        return self._currently_valid

    @currently_valid.setter
    def currently_valid(self, currently_valid):
        """Sets the currently_valid of this TaxOffice.

        Indicates whether or not the tax office is currently valid.  # noqa: E501

        :param currently_valid: The currently_valid of this TaxOffice.  # noqa: E501
        :type: bool
        """

        self._currently_valid = currently_valid

    @property
    def is_competent_for_operational_income_tax(self):
        """Gets the is_competent_for_operational_income_tax of this TaxOffice.  # noqa: E501

        Indicates whether the tax office is competent for operating tax respectively income tax. Among all valid tax offices of an addressee, this property must be marked with 'true' exactly once.  # noqa: E501

        :return: The is_competent_for_operational_income_tax of this TaxOffice.  # noqa: E501
        :rtype: bool
        """
        return self._is_competent_for_operational_income_tax

    @is_competent_for_operational_income_tax.setter
    def is_competent_for_operational_income_tax(self, is_competent_for_operational_income_tax):
        """Sets the is_competent_for_operational_income_tax of this TaxOffice.

        Indicates whether the tax office is competent for operating tax respectively income tax. Among all valid tax offices of an addressee, this property must be marked with 'true' exactly once.  # noqa: E501

        :param is_competent_for_operational_income_tax: The is_competent_for_operational_income_tax of this TaxOffice.  # noqa: E501
        :type: bool
        """

        self._is_competent_for_operational_income_tax = is_competent_for_operational_income_tax

    @property
    def is_competent_for_turnover_tax(self):
        """Gets the is_competent_for_turnover_tax of this TaxOffice.  # noqa: E501

        Indicates whether the tax office is competent for turnover tax. Among all valid tax offices of an addressee, this property must be marked with 'true' no more than once.  # noqa: E501

        :return: The is_competent_for_turnover_tax of this TaxOffice.  # noqa: E501
        :rtype: bool
        """
        return self._is_competent_for_turnover_tax

    @is_competent_for_turnover_tax.setter
    def is_competent_for_turnover_tax(self, is_competent_for_turnover_tax):
        """Sets the is_competent_for_turnover_tax of this TaxOffice.

        Indicates whether the tax office is competent for turnover tax. Among all valid tax offices of an addressee, this property must be marked with 'true' no more than once.  # noqa: E501

        :param is_competent_for_turnover_tax: The is_competent_for_turnover_tax of this TaxOffice.  # noqa: E501
        :type: bool
        """

        self._is_competent_for_turnover_tax = is_competent_for_turnover_tax

    @property
    def is_competent_for_wage_tax(self):
        """Gets the is_competent_for_wage_tax of this TaxOffice.  # noqa: E501

        Indicates whether the tax office is competent for wage tax. Among all valid tax offices of an addressee, this property must be marked with 'true' no more than once.  # noqa: E501

        :return: The is_competent_for_wage_tax of this TaxOffice.  # noqa: E501
        :rtype: bool
        """
        return self._is_competent_for_wage_tax

    @is_competent_for_wage_tax.setter
    def is_competent_for_wage_tax(self, is_competent_for_wage_tax):
        """Sets the is_competent_for_wage_tax of this TaxOffice.

        Indicates whether the tax office is competent for wage tax. Among all valid tax offices of an addressee, this property must be marked with 'true' no more than once.  # noqa: E501

        :param is_competent_for_wage_tax: The is_competent_for_wage_tax of this TaxOffice.  # noqa: E501
        :type: bool
        """

        self._is_competent_for_wage_tax = is_competent_for_wage_tax

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaxOffice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaxOffice):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TaxOffice):
            return True

        return self.to_dict() != other.to_dict()
